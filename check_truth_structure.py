#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–µ—Å–æ—Å—Ç—ã–∫–æ–≤–æ–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ true.json
"""

import json
import os
from pathlib import Path

def check_truth_structure(truth_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç truth.json –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ—Å—Ç—ã–∫–æ–≤–∫–∏"""

    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {truth_path}")

    with open(truth_path, 'r', encoding='utf-8') as f:
        truth_data = json.load(f)

    issues = []
    results = truth_data.get('results', {})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    required_sections = ['work_breakdown_structure', 'volume_calculations', 'scheduled_packages']
    for section in required_sections:
        if section not in results:
            issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª: {section}")
        else:
            count = len(results[section])
            print(f"‚úÖ {section}: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ package ID –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    work_breakdown_packages = [p['id'] for p in results.get('work_breakdown_structure', []) if p.get('type') == 'package']
    volume_calc_packages = [p['id'] for p in results.get('volume_calculations', []) if p.get('type') == 'package']
    scheduled_packages_ids = [p.get('package_id', p.get('id', 'unknown')) for p in results.get('scheduled_packages', [])]

    print(f"\nüì¶ –ü–∞–∫–µ—Ç—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:")
    print(f"   work_breakdown_structure: {work_breakdown_packages}")
    print(f"   volume_calculations: {volume_calc_packages}")
    print(f"   scheduled_packages: {scheduled_packages_ids}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–∞–∫–µ—Ç—ã –µ—Å—Ç—å –≤–µ–∑–¥–µ
    all_packages = set(work_breakdown_packages + volume_calc_packages + scheduled_packages_ids)
    for pkg_id in all_packages:
        if pkg_id not in work_breakdown_packages:
            issues.append(f"‚ùå –ü–∞–∫–µ—Ç {pkg_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ work_breakdown_structure")
        if pkg_id not in volume_calc_packages:
            issues.append(f"‚ùå –ü–∞–∫–µ—Ç {pkg_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ volume_calculations")
        if pkg_id not in scheduled_packages_ids:
            issues.append(f"‚ùå –ü–∞–∫–µ—Ç {pkg_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ scheduled_packages")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–∞–ª–∏—á–∏–µ calculations –≤ –ø–∞–∫–µ—Ç–∞—Ö
    missing_calculations = []
    for pkg in results.get('volume_calculations', []):
        if pkg.get('type') == 'package' and 'calculations' not in pkg:
            missing_calculations.append(pkg.get('id', 'unknown'))

    if missing_calculations:
        issues.append(f"‚ùå –ü–∞–∫–µ—Ç—ã –±–µ–∑ calculations: {missing_calculations}")
    else:
        print(f"‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã –≤ volume_calculations –∏–º–µ—é—Ç calculations")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ù–∞–ª–∏—á–∏–µ scheduling_reasoning –≤ scheduled_packages
    missing_reasoning = []
    for pkg in results.get('scheduled_packages', []):
        if 'scheduling_reasoning' not in pkg:
            missing_reasoning.append(pkg.get('package_id', pkg.get('id', 'unknown')))

    if missing_reasoning:
        issues.append(f"‚ùå –ü–∞–∫–µ—Ç—ã –±–µ–∑ scheduling_reasoning: {missing_reasoning}")
    else:
        print(f"‚úÖ –í—Å–µ scheduled_packages –∏–º–µ—é—Ç scheduling_reasoning")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: timeline_blocks
    timeline_blocks = truth_data.get('timeline_blocks', [])
    if not timeline_blocks:
        issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç timeline_blocks")
    else:
        print(f"‚úÖ timeline_blocks: {len(timeline_blocks)} –±–ª–æ–∫–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ scheduled_packages —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏
        used_blocks = set()
        for pkg in results.get('scheduled_packages', []):
            schedule_blocks = pkg.get('schedule_blocks', [])
            used_blocks.update(schedule_blocks)

        available_blocks = set(block.get('block_id', block.get('week_id')) for block in timeline_blocks)
        missing_blocks = used_blocks - available_blocks
        if missing_blocks:
            issues.append(f"‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏: {missing_blocks}")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    if not issues:
        print("üéâ –õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–µ—Å–æ—Å—Ç—ã–∫–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    else:
        print(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º:")
        for issue in issues:
            print(f"   {issue}")

    return issues

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç
    project_path = "/home/imort/Herzog_v3/projects/34975055/b38f541e/true.json"

    if os.path.exists(project_path):
        issues = check_truth_structure(project_path)
        print(f"\nüéØ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
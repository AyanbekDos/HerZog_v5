#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞ RECITATION
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, '/home/imort/Herzog_v3')

from src.ai_agents.scheduler_and_staffer import run_scheduler_and_staffer

async def test_recitation_bypass():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞ RECITATION"""
    project_path = "/home/imort/Herzog_v3/projects/34975055/d490876a"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ö–æ–¥–∞ RECITATION –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
    
    if not os.path.exists(project_path):
        print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
        return
    
    try:
        result = await run_scheduler_and_staffer(project_path)
        
        if result.get('success', False):
            print("‚úÖ –£–°–ü–ï–•! –°–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ RECITATION —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            print("‚ùå –ù–ï–£–î–ê–ß–ê!")
            print(f"üìä –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_recitation_bypass())
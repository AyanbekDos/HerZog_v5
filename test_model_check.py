#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ OpenRouter
"""

import asyncio
import aiohttp
import os
from dotenv import load_dotenv

load_dotenv()

async def check_available_models():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Claude —á–µ—Ä–µ–∑ OpenRouter"""
    print("üîç === –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–´–• –ú–û–î–ï–õ–ï–ô CLAUDE ===")

    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Claude –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    models_to_test = [
        'anthropic/claude-sonnet-4',
        'anthropic/claude-3.5-sonnet-20241022',
        'anthropic/claude-3-5-sonnet-20241022',  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        'anthropic/claude-3.5-sonnet'
    ]

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/imort/Herzog_v3",
        "X-Title": "Herzog Model Test"
    }

    base_url = "https://openrouter.ai/api/v1/chat/completions"

    for model in models_to_test:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model}")

        payload = {
            "model": model,
            "messages": [{"role": "user", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '—Ä–∞–±–æ—Ç–∞—é'"}],
            "max_tokens": 50,
            "temperature": 0.1
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(base_url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data.get('choices', [{}])[0].get('message', {}).get('content', '')
                        usage = data.get('usage', {})

                        print(f"  ‚úÖ –†–ê–ë–û–¢–ê–ï–¢")
                        print(f"  üìù –û—Ç–≤–µ—Ç: {content.strip()}")
                        print(f"  üìä –¢–æ–∫–µ–Ω—ã: {usage.get('total_tokens', 'N/A')}")

                        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ –æ—Ç–≤–µ—Ç—É
                        payload2 = {
                            "model": model,
                            "messages": [{"role": "user", "content": "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –∏ –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏ –≤ JSON: {'name': 'your-name', 'version': 'your-version'}"}],
                            "max_tokens": 100,
                            "temperature": 0.1
                        }

                        async with session.post(base_url, json=payload2, headers=headers) as response2:
                            if response2.status == 200:
                                data2 = await response2.json()
                                content2 = data2.get('choices', [{}])[0].get('message', {}).get('content', '')
                                print(f"  üîç –°–∞–º–æ–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {content2.strip()[:100]}")

                    elif response.status == 400:
                        data = await response.json()
                        error = data.get('error', {}).get('message', 'Unknown error')
                        print(f"  ‚ùå –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø: {error}")

                    elif response.status == 429:
                        print(f"  ‚è∞ RATE LIMIT")

                    else:
                        print(f"  ‚ùì HTTP {response.status}")
                        data = await response.json()
                        print(f"     {data}")

        except Exception as e:
            print(f"  üí• –û–®–ò–ë–ö–ê: {e}")

    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(check_available_models())
name: Deploy HerZog v3 to Digital Ocean

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run basic syntax check
      run: |
        python -m py_compile main_bot.py
        python -m py_compile src/main_pipeline.py
        
    - name: Test imports
      run: |
        python -c "from src.shared.gemini_client import GeminiClient"
        python -c "from src.ai_agents.work_packager import WorkPackager"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        
    - name: Deploy to Digital Ocean
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_DROPLET_IP }} << 'EOF'
          # Переходим в домашнюю директорию
          cd ~
          
          # (Опционально) Чистим старую папку в /opt, если она есть
          sudo rm -rf /opt/herzog
          
          # Останавливаем старый контейнер, если он существует
          if [ -f "herzog/docker-compose.yml" ]; then
            docker-compose -f herzog/docker-compose.yml down || true
          fi
          
          # Клонируем или обновляем репозиторий
          if [ -d "herzog" ]; then
            cd herzog
            git pull origin main
          else
            git clone https://github.com/AyanbekDos/HerZog_v5.git herzog
            cd herzog
          fi
          
          # Создаем .env файл из секретов
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > .env
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
          echo "SMETNOEDELO_API_KEY=${{ secrets.SMETNOEDELO_API_KEY }}" >> .env
          echo "ENVIRONMENT=production" >> .env
          echo "LOG_LEVEL=INFO" >> .env
          
          # Собираем и запускаем новый контейнер
          docker-compose build --no-cache
          docker-compose up -d --force-recreate
          
          # Очищаем старые образы
          docker image prune -f
          
          echo "✅ HerZog v3 успешно развернут!"
        EOF
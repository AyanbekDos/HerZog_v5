"""
–û–±—â–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API
"""

import os
import json
import logging
import asyncio
import time
import uuid
import google.generativeai as genai
from typing import Dict, Any, Optional
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

class GeminiClient:
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        genai.configure(api_key=self.api_key)
        
        # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Ö –∑–∞–¥–∞—á –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        self.agent_models = {
            'work_packager': 'gemini-2.5-pro',        # –°–ª–æ–∂–Ω–æ–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç - –Ω—É–∂–Ω—ã –º–æ—â–Ω–æ—Å—Ç–∏
            'works_to_packages': 'gemini-2.5-flash-lite',  # –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ - —ç–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã
            'counter': 'gemini-2.5-flash-lite',       # –ü–æ–¥—Å—á–µ—Ç—ã - –±—ã—Å—Ç—Ä–æ –∏ –¥–µ—à–µ–≤–æ
            'scheduler_and_staffer': 'gemini-2.5-pro', # –°–ª–æ–∂–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω—É–∂–Ω—ã –º–æ—â–Ω–æ—Å—Ç–∏
            'classifier': 'gemini-2.5-flash-lite'     # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç - –±—ã—Å—Ç—Ä–æ –∏ –¥–µ—à–µ–≤–æ
        }
        
        # –ö—ç—à –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–π
        self._model_cache = {}
        
        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.model = self._get_model('gemini-2.5-pro')

    
    def _get_model(self, model_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
        if model_name not in self._model_cache:
            self._model_cache[model_name] = genai.GenerativeModel(model_name)
            logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        return self._model_cache[model_name]
    
    def get_model_for_agent(self, agent_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        model_name = self.agent_models.get(agent_name, 'gemini-2.5-pro')
        return self._get_model(model_name)
        
    async def generate_response(self, prompt: str, max_retries: int = 5, agent_name: str = None, system_instruction: Optional[str] = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π

        Args:
            prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç (–¥–∞–Ω–Ω—ã–µ)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ
            agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            system_instruction: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —à–∞–±–ª–æ–Ω—ã)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        if agent_name and agent_name in self.agent_models:
            model_name = self.agent_models[agent_name]
        else:
            model_name = 'gemini-2.5-pro'

        # –ï—Å–ª–∏ –µ—Å—Ç—å system_instruction, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        if system_instruction:
            model = genai.GenerativeModel(model_name, system_instruction=system_instruction)
            logger.info(f"üß† –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: {model_name}")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            if agent_name and agent_name in self.agent_models:
                model = self.get_model_for_agent(agent_name)
            else:
                model = self.model

        for attempt in range(max_retries):
            try:
                logger.info(f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {model_name} {f'({agent_name})' if agent_name else ''} (–ø—Ä–æ–º—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞
                if agent_name == 'work_packager':
                    max_tokens = 8000
                elif agent_name == 'counter':
                    max_tokens = 8000  # Counter –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –æ—Ç–≤–µ—Ç—ã
                else:
                    max_tokens = 4000
                    
                
                response = await model.generate_content_async(
                    prompt,
                    generation_config=genai.types.GenerationConfig(
                        temperature=0.3,
                        top_p=0.8,
                        max_output_tokens=max_tokens,
                        response_mime_type="application/json"
                    )
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
                if not response.candidates:
                    logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
                    if response.prompt_feedback:
                        feedback_reason = getattr(response.prompt_feedback, 'block_reason', 'UNKNOWN')
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {feedback_reason}")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2 + attempt)
                        continue
                    else:
                        raise Exception("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º finish_reason –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                finish_reason = getattr(response.candidates[0], 'finish_reason', None)

                if finish_reason == 2:  # RECITATION - –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                    raise Exception(f"–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Gemini –∏–∑-–∑–∞ RECITATION")

                if finish_reason == 3:  # SAFETY - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    raise Exception("–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Gemini –∏–∑-–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                try:
                    response_text = response.text
                except Exception as text_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å response.text: {text_error}")
                    if finish_reason == 4:  # MAX_TOKENS - –æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω
                        logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤. –£–≤–µ–ª–∏—á–∏–≤–∞—é –ª–∏–º–∏—Ç...")
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤
                        if attempt < max_retries - 1:
                            continue
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {text_error}")
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º markdown –æ–±–µ—Ä—Ç–∫–∏
                try:
                    cleaned_text = self._clean_json_from_markdown(response_text)
                    response_json = self._try_fix_broken_json(cleaned_text)
                    json_parse_success = True
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Gemini: {e}")

                    # JSONDecodeError —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π - —Ä–µ—Ç—Ä–∞–∏–º
                    if attempt < max_retries - 1:
                        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–∑-–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries})")
                        await asyncio.sleep(1 + attempt)
                        continue
                    else:
                        # –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                        return {
                            'success': False,
                            'error': f'JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}',
                            'response': None,
                            'raw_text': response_text
                        }
                
                result = {
                    'success': True,
                    'response': response_json,
                    'json_parse_success': json_parse_success,
                    'raw_text': response_text,
                    'model_used': model_name,
                    'agent_name': agent_name,
                    'prompt_feedback': str(response.prompt_feedback) if response.prompt_feedback else None,
                    'usage_metadata': {
                        'prompt_token_count': getattr(response.usage_metadata, 'prompt_token_count', 0),
                        'candidates_token_count': getattr(response.usage_metadata, 'candidates_token_count', 0),
                        'total_token_count': getattr(response.usage_metadata, 'total_token_count', 0)
                    },
                    'attempt': attempt + 1,
                    'llm_input': prompt  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                }
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {model_name} {f'({agent_name})' if agent_name else ''} –∑–∞ {attempt + 1} –ø–æ–ø—ã—Ç–∫—É, —Ç–æ–∫–µ–Ω–æ–≤: {result['usage_metadata']['total_token_count']}")
                return result
                
            except Exception as e:
                error_str = str(e)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 429 –æ—à–∏–±–∫—É (rate limiting)
                if "429" in error_str or "quota" in error_str.lower() or "rate" in error_str.lower():
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    retry_delay = self._extract_retry_delay(error_str)
                    if retry_delay is None:
                        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff: 2^attempt —Å–µ–∫—É–Ω–¥
                        retry_delay = 2 ** attempt
                    
                    if attempt < max_retries - 1:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        logger.warning(f"‚è∞ 429 Rate Limit! –ñ–¥–µ–º {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 2}...")
                        await asyncio.sleep(retry_delay)
                        continue
                    else:
                        logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}) –¥–ª—è rate limit")
                
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                
                if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    return {
                        'success': False,
                        'error': error_str,
                        'response': None,
                        'attempts': max_retries
                    }
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                await asyncio.sleep(1)
        
        # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–æ–π—Ç–∏ —Å—é–¥–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return {
            'success': False,
            'error': "Unexpected error: exhausted all retries",
            'response': None
        }
    
    def _extract_retry_delay(self, error_str: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ –æ—à–∏–±–∫–∏ 429"""
        import re
        
        # –ò—â–µ–º "retry_delay {\n  seconds: 44\n}"
        match = re.search(r'retry_delay\s*\{\s*seconds:\s*(\d+)', error_str)
        if match:
            return int(match.group(1))
        
        return None
    
    def _clean_json_from_markdown(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç JSON –æ—Ç markdown –æ–±–µ—Ä—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —á–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç Gemini
        
        Args:
            text: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π JSON —Ç–µ–∫—Å—Ç
        """
        import re
        
        # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ —Ç–∏–ø–∞ ```json ... ```
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: ```json –∏–ª–∏ ``` –≤ –Ω–∞—á–∞–ª–µ, –∑–∞—Ç–µ–º JSON, –∑–∞—Ç–µ–º ``` –≤ –∫–æ–Ω—Ü–µ
        markdown_pattern = r'^```(?:json)?\s*\n?(.*?)\n?```\s*$'
        match = re.search(markdown_pattern, text.strip(), re.DOTALL | re.IGNORECASE)
        
        if match:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É ```
            cleaned = match.group(1).strip()
            return cleaned
        
        # –ï—Å–ª–∏ markdown –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return text.strip()
    
    def _try_fix_broken_json(self, text: str):
        """
        –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å –æ—á–∏—Å—Ç–∫–æ–π —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤

        Args:
            text: JSON —Ç–µ–∫—Å—Ç

        Returns:
            –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç JSON
        """
        import re

        # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–º–∞—é—Ç JSON
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã: \n, \r, \t, \", \\
        cleaned_text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', text)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        try:
            return json.loads(cleaned_text)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ \\n
            # –¢–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–π, –∞ –Ω–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ JSON
            cleaned_text = re.sub(r'(?<="[^"]*)\n(?=[^"]*"[,}\]])', '\\\\n', cleaned_text)
            return json.loads(cleaned_text)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
gemini_client = GeminiClient()
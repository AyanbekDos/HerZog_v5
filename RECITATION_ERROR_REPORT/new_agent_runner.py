"""
–ù–æ–≤—ã–π runner –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ HerZog v3.0
–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã: work_packager, works_to_packages, counter, scheduler_and_staffer
"""

import json
import logging
import os
import asyncio
from typing import Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
from .work_packager import run_work_packager
from .works_to_packages import run_works_to_packages
from .counter import run_counter
from .scheduler_and_staffer import run_scheduler_and_staffer

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
NEW_AGENTS = {
    "work_packager": {
        "name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç",
        "function": run_work_packager,
        "description": "–°–æ–∑–¥–∞–µ—Ç —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç –∏–∑ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç"
    },
    "works_to_packages": {
        "name": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –∫ –ø–∞–∫–µ—Ç–∞–º", 
        "function": run_works_to_packages,
        "description": "–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∂–¥—É—é —Ä–∞–±–æ—Ç—É –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–∞–∫–µ—Ç–∞–º"
    },
    "counter": {
        "name": "–°–º–µ—Ç—á–∏–∫ - —Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤",
        "function": run_counter,
        "description": "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç"
    },
    "scheduler_and_staffer": {
        "name": "–°—É–ø–µ—Ä-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω",
        "function": run_scheduler_and_staffer,
        "description": "–°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
    }
}

async def run_new_agent(agent_name: str, project_path: str) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    
    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞ (work_packager, works_to_packages, counter, scheduler_and_staffer)
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    """
    
    if agent_name not in NEW_AGENTS:
        return {
            'success': False,
            'error': f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç: {agent_name}",
            'available_agents': list(NEW_AGENTS.keys())
        }
    
    agent_config = NEW_AGENTS[agent_name]
    
    logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞: {agent_config['name']}")
    logger.info(f"üìù {agent_config['description']}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        result = await agent_config['function'](project_path)
        
        if result.get('success'):
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"‚ùå –ê–≥–µ–Ω—Ç {agent_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.get('error')}")
        
        return result
        
    except Exception as e:
        error_result = {
            'success': False,
            'error': str(e),
            'agent': agent_name
        }
        logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∞–≥–µ–Ω—Ç–µ {agent_name}: {e}")
        return error_result

async def run_new_pipeline(project_path: str, start_from: str = "work_packager") -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    
    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        start_from: –° –∫–∞–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞—á–∞—Ç—å
        
    Returns:
        –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞
    """
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
    pipeline_sequence = [
        "work_packager",
        "works_to_packages", 
        "counter",
        "scheduler_and_staffer"
    ]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–∞–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞—á–∏–Ω–∞—Ç—å
    try:
        start_index = pipeline_sequence.index(start_from)
        agents_to_run = pipeline_sequence[start_index:]
    except ValueError:
        return {
            'success': False,
            'error': f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç: {start_from}",
            'available_agents': pipeline_sequence
        }
    
    logger.info(f"üèóÔ∏è –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ HerZog v3.0")
    logger.info(f"üìÇ –ü—Ä–æ–µ–∫—Ç: {project_path}")
    logger.info(f"üéØ –ê–≥–µ–Ω—Ç—ã: {' ‚Üí '.join(agents_to_run)}")
    
    pipeline_result = {
        'success': False,
        'project_path': project_path,
        'agents_completed': [],
        'agents_failed': [],
        'start_from': start_from,
        'total_agents': len(agents_to_run),
        'results': {}
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for agent_name in agents_to_run:
        logger.info(f"\n{'='*50}")
        logger.info(f"üöÄ –≠–¢–ê–ü: {agent_name.upper()}")
        logger.info(f"{'='*50}")
        
        agent_result = await run_new_agent(agent_name, project_path)
        pipeline_result['results'][agent_name] = agent_result
        
        if agent_result.get('success'):
            pipeline_result['agents_completed'].append(agent_name)
            logger.info(f"‚úÖ –≠—Ç–∞–ø {agent_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            pipeline_result['agents_failed'].append(agent_name)
            logger.error(f"‚ùå –≠—Ç–∞–ø {agent_name} –ø—Ä–æ–≤–∞–ª–µ–Ω: {agent_result.get('error')}")
            
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
            pipeline_result['error'] = f"–ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —ç—Ç–∞–ø–µ {agent_name}: {agent_result.get('error')}"
            return pipeline_result
    
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    pipeline_result['success'] = True
    logger.info(f"\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(pipeline_result['agents_completed'])}")
    
    return pipeline_result

def run_new_agent_sync(agent_name: str, project_path: str) -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
    
    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        
    Returns:
        True –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
    """
    try:
        result = asyncio.run(run_new_agent(agent_name, project_path))
        return result.get('success', False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–µ –¥–ª—è {agent_name}: {e}")
        return False

def get_new_agent_info(agent_name: Optional[str] = None) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö
    
    Args:
        agent_name: –ò–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
        
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ(–∞—Ö)
    """
    if agent_name:
        if agent_name in NEW_AGENTS:
            return NEW_AGENTS[agent_name]
        else:
            return {'error': f'–ê–≥–µ–Ω—Ç {agent_name} –Ω–µ –Ω–∞–π–¥–µ–Ω'}
    else:
        return NEW_AGENTS

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ runner'–∞
    import sys
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    if len(sys.argv) >= 3:
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: python new_agent_runner.py work_packager /path/to/project
        agent_name = sys.argv[1]
        project_path = sys.argv[2]
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: {agent_name}")
        print(f"üìÇ –ü—Ä–æ–µ–∫—Ç: {project_path}")
        
        result = asyncio.run(run_new_agent(agent_name, project_path))
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
    elif len(sys.argv) == 2:
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: python new_agent_runner.py /path/to/project  
        project_path = sys.argv[1]
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
        print(f"üìÇ –ü—Ä–æ–µ–∫—Ç: {project_path}")
        
        result = asyncio.run(run_new_pipeline(project_path))
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö
        print("ü§ñ –ù–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã HerZog v3.0:")
        print("=" * 50)
        
        for agent_name, config in NEW_AGENTS.items():
            print(f"üì¶ {agent_name}:")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {config['name']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {config['description']}")
            print()
        
        print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python new_agent_runner.py work_packager /path/to/project  # –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç")
        print("   python new_agent_runner.py /path/to/project               # –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω")
#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Claude
"""

import asyncio
import json
import logging
import os
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
load_dotenv()

async def debug_claude_response():
    """–°–º–æ—Ç—Ä–∏–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Claude"""
    print("üîç === –û–¢–õ–ê–î–ö–ê –û–¢–í–ï–¢–ê CLAUDE ===")

    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    os.environ['CLAUDE_TEST_MODE'] = 'true'

    try:
        from src.shared.claude_client import ClaudeClient
        client = ClaudeClient()

        # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º—Ç –¥–ª—è JSON –æ—Ç–≤–µ—Ç–∞
        simple_prompt = """
        –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
        {
            "test": "success",
            "packages": [
                {
                    "name": "Test Package",
                    "items": ["item1", "item2"]
                }
            ]
        }
        """

        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π JSON –ø—Ä–æ–º—Ç...")

        result = await client.generate_response(
            prompt=simple_prompt,
            agent_name="test_agent"
        )

        print(f"\nüìä –£—Å–ø–µ—Ö: {result['success']}")
        print(f"üìä –¢–æ–∫–µ–Ω—ã: {result.get('usage_metadata', {}).get('total_token_count', 'N/A')}")

        if 'raw_text' in result:
            print(f"\nüìã ===== –ü–û–õ–ù–´–ô –°–´–†–û–ô –û–¢–í–ï–¢ =====")
            print(f"–î–ª–∏–Ω–∞: {len(result['raw_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print("--- –ù–ê–ß–ê–õ–û ---")
            print(result['raw_text'])
            print("--- –ö–û–ù–ï–¶ ---")

            # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ markdown
            raw = result['raw_text']
            if "```" in raw:
                print(f"\nüîç –ù–∞–π–¥–µ–Ω markdown –±–ª–æ–∫!")

            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—á–∏—Å—Ç–∫–∏
            print(f"\nüßπ === –ü–û–ü–´–¢–ö–ò –û–ß–ò–°–¢–ö–ò ===")

            # –°–ø–æ—Å–æ–± 1: –£–¥–∞–ª—è–µ–º –≤—Å—ë –¥–æ –ø–µ—Ä–≤–æ–π {
            first_brace = raw.find('{')
            if first_brace != -1:
                cleaned1 = raw[first_brace:]
                last_brace = cleaned1.rfind('}')
                if last_brace != -1:
                    cleaned1 = cleaned1[:last_brace+1]
                print(f"–°–ø–æ—Å–æ–± 1 (–¥–æ –ø–µ—Ä–≤–æ–π {{): {cleaned1[:100]}...")

                try:
                    test_json = json.loads(cleaned1)
                    print(f"‚úÖ –°–ø–æ—Å–æ–± 1 —Å—Ä–∞–±–æ—Ç–∞–ª!")
                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {test_json}")
                except Exception as e:
                    print(f"‚ùå –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

        else:
            print("‚ùå –ù–µ—Ç raw_text –≤ –æ—Ç–≤–µ—Ç–µ")

        # –¢–µ—Å—Ç —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        print(f"\nüîÑ === –¢–ï–°–¢ –° –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–°–¢–†–£–ö–¶–ò–ï–ô ===")

        system_instruction = """
        –¢—ã –î–û–õ–ñ–ï–ù –æ—Ç–≤–µ—á–∞—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        –ù–ò–ö–ê–ö–û–ì–û –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
        –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON.
        """

        result2 = await client.generate_response(
            prompt="–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π JSON —Å –ø–æ–ª–µ–º 'status': 'ok'",
            agent_name="test_agent",
            system_instruction=system_instruction
        )

        if 'raw_text' in result2:
            print(f"\nüìã ===== –û–¢–í–ï–¢ –° –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–°–¢–†–£–ö–¶–ò–ï–ô =====")
            print("--- –ù–ê–ß–ê–õ–û ---")
            print(result2['raw_text'])
            print("--- –ö–û–ù–ï–¶ ---")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_claude_response())
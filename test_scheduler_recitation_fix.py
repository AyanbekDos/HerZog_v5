#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è RECITATION –æ—à–∏–±–∫–∏ –≤ scheduler_and_staffer
"""

import asyncio
import json
import sys
import logging

sys.path.insert(0, '/home/imort/Herzog_v3')

from src.ai_agents.scheduler_and_staffer import SchedulerAndStaffer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

async def test_scheduler_format_prompt():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–ª–µ–Ω–∏–µ –≤ scheduler_and_staffer"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SchedulerAndStaffer —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º —Å–æ–ª–µ–Ω–∏–µ–º")

    agent = SchedulerAndStaffer()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    input_data = {
        'work_packages': [
            {
                'package_id': 'pkg_001',
                'package_name': '–î–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
                'total_volume': {'quantity': 150.0, 'unit': '–º¬≤'},
                'source_works_count': 5,
                'complexity': 'medium'
            }
        ],
        'timeline_blocks': [
            {'week_id': 1, 'start_date': '2024-01-01', 'end_date': '2024-01-07'}
        ],
        'workforce_range': {'min': 10, 'max': 20},
        'user_directive': '—Ç–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞'
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt_template = agent._load_prompt()

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Å–æ–ª–µ–Ω–∏–µ–º
        system_instruction, user_prompt = agent._format_prompt(input_data, prompt_template)

        print(f"‚úÖ System instruction –ø–æ–ª—É—á–µ–Ω–∞: {len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úÖ User prompt –ø–æ–ª—É—á–µ–Ω: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ user_prompt –≤–∞–ª–∏–¥–Ω—ã–π JSON
        user_data = json.loads(user_prompt)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω—Ç–∏-RECITATION –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
        assert '_meta' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '_meta' —Å –∞–Ω—Ç–∏-RECITATION –¥–∞–Ω–Ω—ã–º–∏"
        assert 'session_id' in user_data['_meta'], "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç session_id"
        assert 'timestamp' in user_data['_meta'], "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç timestamp"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        assert 'work_packages' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'work_packages'"
        assert 'timeline_blocks' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'timeline_blocks'"

        print("‚úÖ –ê–Ω—Ç–∏-RECITATION –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print(f"‚úÖ Session ID: {user_data['_meta']['session_id']}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–ª–µ–Ω–∏–µ –∫ system_instruction
        salted_system_instruction = agent._add_salt_to_prompt(system_instruction)
        print(f"‚úÖ –°–æ–ª–µ–Ω–∞—è system_instruction: {len(salted_system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–ª–µ–Ω–∏–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ
        assert "TASK_ID" in salted_system_instruction, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TASK_ID –≤ —Å–æ–ª–µ–Ω–∏–∏"
        assert "ANTI_RECITATION_SALT" in salted_system_instruction, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ANTI_RECITATION_SALT"

        print("üéâ SchedulerAndStaffer —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º —Å–æ–ª–µ–Ω–∏–µ–º –≥–æ—Ç–æ–≤!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è RECITATION –¥–ª—è scheduler_and_staffer")

    success = await test_scheduler_format_prompt()

    if success:
        print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–∏–ª–µ–Ω–Ω–æ–µ —Å–æ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ RECITATION")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ –≤ user_prompt")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò!")

    return success

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ Herzog v3.0
–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ .py —Ñ–∞–π–ª—ã –∏ –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –õ–õ–ú
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ .gitignore
"""

import os
import fnmatch
from pathlib import Path
from datetime import datetime


def load_gitignore_patterns(project_root):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ .gitignore"""
    gitignore_path = project_root / '.gitignore'
    patterns = []

    if gitignore_path.exists():
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º gitignore –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ fnmatch –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                    if line.endswith('/'):
                        patterns.append(line[:-1])  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    patterns.append(line)

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                    if not line.startswith('**/'):
                        patterns.append(f"**/{line}")
                        if line.endswith('/'):
                            patterns.append(f"**/{line[:-1]}")

    return patterns


def should_ignore_path(path, project_root, ignore_patterns):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ .gitignore"""
    relative_path = path.relative_to(project_root)

    for pattern in ignore_patterns:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        if fnmatch.fnmatch(str(relative_path), pattern):
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if fnmatch.fnmatch(relative_path.name, pattern):
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±—É—é —á–∞—Å—Ç—å –ø—É—Ç–∏
        path_parts = str(relative_path).split(os.sep)
        for part in path_parts:
            if fnmatch.fnmatch(part, pattern):
                return True

    return False


def create_project_snapshot(output_file="snapshot.txt"):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ –≤—Å–µ–º–∏ .py —Ñ–∞–π–ª–∞–º–∏ –∏ –≤–∞–∂–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ .gitignore
    """

    project_root = Path.cwd()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ .gitignore
    ignore_patterns = load_gitignore_patterns(project_root)
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ignore_patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ .gitignore")

    # –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    include_extensions = ['.py', '.txt', '.md', '.json', '.env.example']
    include_files = ['CLAUDE.md', 'requirements.txt', '.env.example', 'README.md']

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ .gitignore)
    force_exclude_dirs = {
        '.git',
        'node_modules'
    }

    with open(output_file, 'w', encoding='utf-8') as snapshot:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–Ω–∞–ø—à–æ—Ç–∞
        snapshot.write(f"# –°–ù–ê–ü–®–û–¢ –ü–†–û–ï–ö–¢–ê HERZOG V3.0\n")
        snapshot.write(f"# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        snapshot.write(f"# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}\n")
        snapshot.write("=" * 80 + "\n\n")

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        snapshot.write("## –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê\n\n")
        for root, dirs, files in os.walk(project_root):
            root_path = Path(root)

            # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ .gitignore –∏ force_exclude_dirs
            dirs[:] = [
                d for d in dirs
                if d not in force_exclude_dirs and not should_ignore_path(root_path / d, project_root, ignore_patterns)
            ]

            level = root.replace(str(project_root), '').count(os.sep)
            indent = '  ' * level

            if level == 0:
                snapshot.write(f"{os.path.basename(root)}/\n")
            else:
                snapshot.write(f"{indent}{os.path.basename(root)}/\n")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ)
            sub_indent = '  ' * (level + 1)
            for file in files:
                file_path = root_path / file
                if (not should_ignore_path(file_path, project_root, ignore_patterns) and
                    (any(file.endswith(ext) for ext in include_extensions) or
                     file in include_files)):
                    snapshot.write(f"{sub_indent}{file}\n")

        snapshot.write("\n" + "=" * 80 + "\n\n")

        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        file_count = 0
        ignored_count = 0

        for root, dirs, files in os.walk(project_root):
            root_path = Path(root)

            # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ .gitignore –∏ force_exclude_dirs
            dirs[:] = [
                d for d in dirs
                if d not in force_exclude_dirs and not should_ignore_path(root_path / d, project_root, ignore_patterns)
            ]

            for file in sorted(files):
                file_path = root_path / file
                relative_path = file_path.relative_to(project_root)

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
                if should_ignore_path(file_path, project_root, ignore_patterns):
                    ignored_count += 1
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª
                should_include = False

                # –í–∫–ª—é—á–∞–µ–º .py —Ñ–∞–π–ª—ã
                if file.endswith('.py'):
                    should_include = True

                # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
                elif file in include_files:
                    should_include = True

                # –í–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤
                elif file.endswith('.txt') and 'prompt' in file.lower():
                    should_include = True

                if should_include:
                    try:
                        snapshot.write(f"## –§–ê–ô–õ: {relative_path}\n")
                        snapshot.write("-" * 60 + "\n")

                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read()
                            snapshot.write(content)

                        snapshot.write("\n\n" + "=" * 80 + "\n\n")
                        file_count += 1

                    except Exception as e:
                        snapshot.write(f"–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê: {e}\n\n")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        snapshot.write("## –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ù–ê–ü–®–û–¢–ê\n")
        snapshot.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ: {file_count}\n")
        snapshot.write(f"–§–∞–π–ª–æ–≤ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {ignored_count}\n")
        snapshot.write(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö .gitignore –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(ignore_patterns)}\n")
        snapshot.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    print(f"‚úÖ –°–Ω–∞–ø—à–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω: {output_file}")
    print(f"üìÅ –í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
    print(f"üö´ –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {ignored_count}")
    print(f"üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ .gitignore: {len(ignore_patterns)}")
    return output_file


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç
    snapshot_file = create_project_snapshot()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    size_mb = os.path.getsize(snapshot_file) / (1024 * 1024)
    print(f"üìä –†–∞–∑–º–µ—Ä —Å–Ω–∞–ø—à–æ—Ç–∞: {size_mb:.2f} –ú–ë")
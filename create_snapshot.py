#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ Herzog v3.0
–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ .py —Ñ–∞–π–ª—ã –∏ –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –õ–õ–ú
"""

import os
from pathlib import Path
from datetime import datetime


def create_project_snapshot(output_file="snapshot.txt"):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ –≤—Å–µ–º–∏ .py —Ñ–∞–π–ª–∞–º–∏ –∏ –≤–∞–∂–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    """

    # –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    include_extensions = ['.py', '.txt', '.md', '.json', '.env.example']
    include_files = ['CLAUDE.md', 'requirements.txt', '.env.example', 'README.md']

    # –ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    exclude_dirs = {
        '__pycache__',
        '.git',
        'venv',
        'env',
        '.venv',
        'node_modules',
        'projects',  # –†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        '.pytest_cache'
    }

    project_root = Path.cwd()

    with open(output_file, 'w', encoding='utf-8') as snapshot:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–Ω–∞–ø—à–æ—Ç–∞
        snapshot.write(f"# –°–ù–ê–ü–®–û–¢ –ü–†–û–ï–ö–¢–ê HERZOG V3.0\n")
        snapshot.write(f"# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        snapshot.write(f"# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}\n")
        snapshot.write("=" * 80 + "\n\n")

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        snapshot.write("## –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê\n\n")
        for root, dirs, files in os.walk(project_root):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in exclude_dirs]

            level = root.replace(str(project_root), '').count(os.sep)
            indent = '  ' * level

            if level == 0:
                snapshot.write(f"{os.path.basename(root)}/\n")
            else:
                snapshot.write(f"{indent}{os.path.basename(root)}/\n")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            sub_indent = '  ' * (level + 1)
            for file in files:
                if (any(file.endswith(ext) for ext in include_extensions) or
                    file in include_files):
                    snapshot.write(f"{sub_indent}{file}\n")

        snapshot.write("\n" + "=" * 80 + "\n\n")

        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        file_count = 0

        for root, dirs, files in os.walk(project_root):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in exclude_dirs]

            for file in sorted(files):
                file_path = Path(root) / file
                relative_path = file_path.relative_to(project_root)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª
                should_include = False

                # –í–∫–ª—é—á–∞–µ–º .py —Ñ–∞–π–ª—ã
                if file.endswith('.py'):
                    should_include = True

                # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
                elif file in include_files:
                    should_include = True

                # –í–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤
                elif file.endswith('.txt') and 'prompt' in file.lower():
                    should_include = True

                if should_include:
                    try:
                        snapshot.write(f"## –§–ê–ô–õ: {relative_path}\n")
                        snapshot.write("-" * 60 + "\n")

                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read()
                            snapshot.write(content)

                        snapshot.write("\n\n" + "=" * 80 + "\n\n")
                        file_count += 1

                    except Exception as e:
                        snapshot.write(f"–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê: {e}\n\n")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        snapshot.write("## –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ù–ê–ü–®–û–¢–ê\n")
        snapshot.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ: {file_count}\n")
        snapshot.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    print(f"‚úÖ –°–Ω–∞–ø—à–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω: {output_file}")
    print(f"üìÅ –í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
    return output_file


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç
    snapshot_file = create_project_snapshot()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    size_mb = os.path.getsize(snapshot_file) / (1024 * 1024)
    print(f"üìä –†–∞–∑–º–µ—Ä —Å–Ω–∞–ø—à–æ—Ç–∞: {size_mb:.2f} –ú–ë")
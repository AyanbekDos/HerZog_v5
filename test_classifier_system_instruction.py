#!/usr/bin/env python3
"""
–¢–µ—Å—Ç gemini_classifier —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π system_instruction
"""

import asyncio
import sys
import os
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, str(Path(__file__).parent))

from src.data_processing.gemini_classifier import classify_with_gemini

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_gemini_classifier_with_system_instruction():
    """–¢–µ—Å—Ç gemini_classifier —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gemini_classifier —Å system_instruction")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_items = [
        {
            "id": "test_001",
            "code": "1.1-01",
            "name": "–ü–æ–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
        },
        {
            "id": "test_002",
            "code": "2.2-03",
            "name": "–¶–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç–ª–∞–Ω–¥—Å–∫–∏–π –ú400"
        },
        {
            "id": "test_003",
            "code": "3.3-05",
            "name": "–ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
        },
        {
            "id": "test_004",
            "code": "4.4-07",
            "name": "–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"
        }
    ]

    try:
        result = await classify_with_gemini(test_items)

        if result and len(result) > 0:
            logger.info("‚úÖ Gemini classifier —É—Å–ø–µ—à–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –ø–æ–∑–∏—Ü–∏–∏!")
            for item_id, classification in result.items():
                logger.info(f"üìù {item_id}: {classification.get('classification')} - {classification.get('reasoning')}")

            return True
        else:
            logger.error("‚ùå Gemini classifier –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ gemini_classifier: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gemini_classifier —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")

    classifier_ok = await test_gemini_classifier_with_system_instruction()

    # –ò—Ç–æ–≥–∏
    logger.info("üìä === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    logger.info(f"Gemini Classifier: {'‚úÖ OK' if classifier_ok else '‚ùå FAIL'}")

    return 0 if classifier_ok else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å Claude –∞–≥–µ–Ω—Ç–∞–º–∏
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ –æ–∂–∏–¥–∞—é—Ç –∞–≥–µ–Ω—Ç—ã
"""

import asyncio
import json
import logging
import os
import tempfile
import shutil
from pathlib import Path
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–∞–ø–∞ 3_prepared
TEST_DATA = {
    "metadata": {
        "user_id": "test_user_claude",
        "project_id": "test_project_claude",
        "created_at": "2024-01-01T00:00:00Z",
        "updated_at": "2024-01-01T00:00:00Z",
        "current_stage": "3_prepared",
        "stages_completed": ["1_extracted", "2_classified", "3_prepared"],
        "pipeline_status": [
            {"agent_name": "work_packager", "status": "pending"},
            {"agent_name": "works_to_packages", "status": "pending"},
            {"agent_name": "counter", "status": "pending"},
            {"agent_name": "scheduler_and_staffer", "status": "pending"}
        ]
    },
    "directives": {
        "target_package_count": 3,
        "project_timeline": {
            "start_date": "2024-01-01",
            "end_date": "2024-02-01",
            "total_weeks": 4
        },
        "workforce": {"min": 5, "max": 10, "average": 8},
        "special_instructions": {
            "work_packager": "—Å–æ–∑–¥–∞–π —Ä–æ–≤–Ω–æ 3 –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç",
            "counter": "–ø–æ–¥—Å—á–∏—Ç–∞–π –æ–±—ä–µ–º—ã —Ç–æ—á–Ω–æ",
            "scheduler": "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ 4 –Ω–µ–¥–µ–ª—è–º"
        }
    },
    "timeline_blocks": [
        {"week_id": 1, "start_date": "2024-01-01", "end_date": "2024-01-07", "days_count": 7},
        {"week_id": 2, "start_date": "2024-01-08", "end_date": "2024-01-14", "days_count": 7},
        {"week_id": 3, "start_date": "2024-01-15", "end_date": "2024-01-21", "days_count": 7},
        {"week_id": 4, "start_date": "2024-01-22", "end_date": "2024-01-28", "days_count": 7}
    ],
    "packages": [],  # –ü—É—Å—Ç–æ–π, –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–≥–µ–Ω—Ç–∞–º–∏
    "results": {
        "work_packages": []  # –ü–æ–ª–µ –∫–æ—Ç–æ—Ä–æ–µ –æ–∂–∏–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç work_packager
    },
    "source_work_items": [
        {
            "id": "work_001",
            "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –∫–∏—Ä–ø–∏—á–Ω–æ–π –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 25.0,
            "unit_cost": 600.0,
            "total_cost": 15000.0,
            "category": "demolition",
            "original_data": {"source": "test"}
        },
        {
            "id": "work_002",
            "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω —Ü–µ–º–µ–Ω—Ç–Ω–∞—è",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 50.0,
            "unit_cost": 900.0,
            "total_cost": 45000.0,
            "category": "finishing",
            "original_data": {"source": "test"}
        },
        {
            "id": "work_003",
            "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 50.0,
            "unit_cost": 350.0,
            "total_cost": 17500.0,
            "category": "finishing",
            "original_data": {"source": "test"}
        },
        {
            "id": "work_004",
            "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ü–µ–º–µ–Ω—Ç–Ω–æ–π —Å—Ç—è–∂–∫–∏",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 80.0,
            "unit_cost": 1200.0,
            "total_cost": 96000.0,
            "category": "flooring",
            "original_data": {"source": "test"}
        }
    ]
}

def create_project_structure(base_dir, data):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ –æ–∂–∏–¥–∞—é—Ç –∞–≥–µ–Ω—Ç—ã"""
    project_dir = Path(base_dir) / "projects" / data["metadata"]["user_id"] / data["metadata"]["project_id"]

    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    stages = ["0_input", "1_extracted", "2_classified", "3_prepared", "4_packaged", "5_counted", "6_scheduled", "7_output"]
    for stage in stages:
        stage_dir = project_dir / stage
        stage_dir.mkdir(parents=True, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º true.json –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∫–∞–∫ –æ–∂–∏–¥–∞—é—Ç –∞–≥–µ–Ω—Ç—ã)
    truth_file = project_dir / "true.json"
    with open(truth_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    # –¢–∞–∫–∂–µ –∫–æ–ø–∏—Ä—É–µ–º –≤ 3_prepared –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    truth_file_prepared = project_dir / "3_prepared" / "truth.json"
    with open(truth_file_prepared, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_dir}")
    print(f"üìÑ truth.json —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {truth_file}")

    return str(project_dir)

async def test_full_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω Claude –∞–≥–µ–Ω—Ç–æ–≤"""
    print("üöÄ === –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê CLAUDE –ê–ì–ï–ù–¢–û–í ===")
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {os.getenv('CLAUDE_TEST_MODE', 'true')}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Claude
    try:
        from src.shared.claude_client import claude_client
        claude_client.reset_usage_stats()
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Claude —Å–±—Ä–æ—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    base_temp_dir = tempfile.mkdtemp(prefix="claude_pipeline_")
    print(f"üìÇ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_temp_dir}")

    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        project_dir = create_project_structure(base_temp_dir, TEST_DATA)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç—ã
        try:
            from src.ai_agents.work_packager import run_work_packager
            from src.ai_agents.works_to_packages import run_works_to_packages
            from src.ai_agents.counter import run_counter
            from src.ai_agents.scheduler_and_staffer import run_scheduler_and_staffer
            print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return

        agents = [
            ("Work Packager", run_work_packager, "4_packaged"),
            ("Works to Packages", run_works_to_packages, "5_counted"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: works_to_packages —Å–æ–∑–¥–∞–µ—Ç 5_counted
            ("Counter", run_counter, "6_scheduled"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: counter —Å–æ–∑–¥–∞–µ—Ç 6_scheduled
            ("Scheduler and Staffer", run_scheduler_and_staffer, "7_output")  # scheduler —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ]

        results = []
        total_time = 0

        for i, (agent_name, agent_func, expected_stage) in enumerate(agents, 1):
            print(f"\nüéØ === –¢–ï–°–¢ {i}: {agent_name.upper()} ===")

            try:
                start_time = asyncio.get_event_loop().time()

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
                result = await agent_func(project_dir)

                end_time = asyncio.get_event_loop().time()
                duration = end_time - start_time
                total_time += duration

                if result and result.get('success'):
                    print(f"‚úÖ {agent_name} —É—Å–ø–µ—à–µ–Ω!")
                    print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –≤ –Ω—É–∂–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    expected_dir = Path(project_dir) / expected_stage
                    if expected_dir.exists():
                        files = list(expected_dir.glob("*.json"))
                        if files:
                            print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {files[0].name}")
                        else:
                            print(f"‚ö†Ô∏è  –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤ –≤ {expected_stage}")
                    else:
                        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {expected_stage} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")

                    results.append((agent_name, True, duration))

                else:
                    error = result.get('error', 'Unknown error') if result else 'No result'
                    print(f"‚ùå {agent_name} –æ—à–∏–±–∫–∞: {error}")
                    if result and 'raw_text' in result:
                        print(f"üìÑ –°–´–†–û–ô –û–¢–í–ï–¢ LLM:\n---\n{result['raw_text']}\n---")
                    results.append((agent_name, False, duration))
                    break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ

            except Exception as e:
                print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {agent_name}: {e}")
                import traceback
                traceback.print_exc()
                results.append((agent_name, False, 0))
                break

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüéØ === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")

        successful = sum(1 for _, success, _ in results if success)
        total = len(results)

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{len(agents)}")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Claude
        try:
            from src.shared.claude_client import claude_client
            stats = claude_client.get_usage_stats()
            print(f"\nüí∞ === –°–¢–ê–¢–ò–°–¢–ò–ö–ê CLAUDE ===")
            print(f"–ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
            print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_input_tokens']}")
            print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_output_tokens']}")
            print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${stats['estimated_cost']:.4f}")

            if stats['total_requests'] > 0:
                avg_cost = stats['estimated_cost'] / stats['total_requests']
                print(f"üìä –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∑–∞–ø—Ä–æ—Å: ~${avg_cost:.4f}")

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        # –î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìã === –î–ï–¢–ê–õ–ò ===")
        for name, success, duration in results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {name}: {duration:.2f} —Å–µ–∫")

        if successful == len(agents):
            print(f"\nüéâ –í–°–ï –ê–ì–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –° CLAUDE!")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            print(f"\nüìÅ === –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ ===")
            for stage in ["4_packaged", "5_counted", "6_scheduled", "7_output"]:
                stage_dir = Path(project_dir) / stage
                if stage_dir.exists():
                    files = list(stage_dir.glob("*.json"))
                    if files:
                        print(f"{stage}: {files[0].name} ({files[0].stat().st_size} –±–∞–π—Ç)")

        else:
            print(f"\n‚ö†Ô∏è  –ù–µ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç ({successful}/{len(agents)})")

    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            shutil.rmtree(base_temp_dir)
            print(f"\nüßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            print(f"–ü–∞–ø–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å: {base_temp_dir}")

if __name__ == "__main__":
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    os.environ['CLAUDE_TEST_MODE'] = 'true'

    asyncio.run(test_full_pipeline())

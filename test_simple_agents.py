#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –º–µ–Ω—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, str(Path(__file__).parent))

from src.ai_agents.work_packager import WorkPackager
from src.ai_agents.works_to_packages import WorksToPackagesAssigner
from src.ai_agents.counter import WorkVolumeCalculator
from src.ai_agents.scheduler_and_staffer import SchedulerAndStaffer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_salt_mechanism():
    """–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å–æ–ª–∏")

    agent = WorkPackager()
    test_prompt = "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–ª–∏"
    salted_prompt = agent._add_salt_to_prompt(test_prompt)

    logger.info(f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {len(test_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"‚úÖ –° —Å–æ–ª—å—é: {len(salted_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"‚úÖ –°–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {'ID:' in salted_prompt and '–ö–æ–Ω—Ç—Ä–æ–ª—å:' in salted_prompt}")

    return True

async def test_small_project():
    """–¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç"""
    logger.info("üß™ –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç")

    # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    projects_dir = "/home/imort/Herzog_v3/projects"
    small_project_path = None

    for user_id in os.listdir(projects_dir):
        user_path = os.path.join(projects_dir, user_id)
        if not os.path.isdir(user_path):
            continue

        for project_id in os.listdir(user_path):
            project_path = os.path.join(user_path, project_id)
            truth_path = os.path.join(project_path, "true.json")

            if os.path.exists(truth_path):
                try:
                    with open(truth_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)

                    work_items = data.get('source_work_items', [])
                    if 10 <= len(work_items) <= 50:  # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç —Å 10-50 —Ä–∞–±–æ—Ç–∞–º–∏
                        small_project_path = project_path
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–µ–∫—Ç: {project_path}")
                        logger.info(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç: {len(work_items)}")
                        break

                except Exception as e:
                    continue

        if small_project_path:
            break

    if not small_project_path:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç")
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º work_packager –Ω–∞ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ work_packager –Ω–∞ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    agent = WorkPackager()
    result = await agent.process(small_project_path)

    if result.get('success'):
        logger.info(f"‚úÖ work_packager: –°–æ–∑–¥–∞–Ω–æ {result.get('packages_created', 0)} –ø–∞–∫–µ—Ç–æ–≤")
        return True
    else:
        logger.error(f"‚ùå work_packager: {result.get('error')}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤")

    # –¢–µ—Å—Ç 1: –ú–µ—Ö–∞–Ω–∏–∑–º —Å–æ–ª–∏
    salt_ok = await test_salt_mechanism()

    # –¢–µ—Å—Ç 2: –ú–∞–ª—ã–π –ø—Ä–æ–µ–∫—Ç
    small_project_ok = await test_small_project()

    # –ò—Ç–æ–≥–∏
    logger.info("üìä === –ò–¢–û–ì–ò –¢–ï–°–¢–û–í ===")
    logger.info(f"–ú–µ—Ö–∞–Ω–∏–∑–º —Å–æ–ª–∏: {'‚úÖ OK' if salt_ok else '‚ùå FAIL'}")
    logger.info(f"–ú–∞–ª—ã–π –ø—Ä–æ–µ–∫—Ç: {'‚úÖ OK' if small_project_ok else '‚ùå FAIL'}")

    return 0 if (salt_ok and small_project_ok) else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
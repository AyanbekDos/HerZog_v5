"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤ HerZog v3.0 —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import json
import os
import shutil
import tempfile
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
TEST_PROJECT_DATA = {
    "meta": {
        "created_at": datetime.now().isoformat(),
        "total_work_items": 6,
        "total_timeline_blocks": 12,
        "project_duration_weeks": 12
    },
    "directives": {
        "target_work_count": 15,
        "project_timeline": {
            "start_date": "01.01.2024",
            "end_date": "31.03.2024"
        },
        "workforce_range": {"min": 8, "max": 15},
        "directives": {
            "conceptualizer": "–≤—Å—é —ç–ª–µ–∫—Ç—Ä–∏–∫—É –≤ –æ–¥–∏–Ω –±–ª–æ–∫, –∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ",
            "strategist": "–¥–µ–º–æ–Ω—Ç–∞–∂ –Ω–∞ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–µ",
            "accountant": "–ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å—á–∏—Ç–∞–π –ø–ª–æ—â–∞–¥—å –≤ –º¬≤",
            "foreman": "–Ω–∞ –æ—Ç–¥–µ–ª–∫—É –±–æ–ª—å—à–µ –ª—é–¥–µ–π"
        }
    },
    "timeline_blocks": [
        {"week_id": 1, "start_date": "01.01.2024", "end_date": "07.01.2024", "days": 7},
        {"week_id": 2, "start_date": "08.01.2024", "end_date": "14.01.2024", "days": 7},
        {"week_id": 3, "start_date": "15.01.2024", "end_date": "21.01.2024", "days": 7},
        {"week_id": 4, "start_date": "22.01.2024", "end_date": "28.01.2024", "days": 7},
        {"week_id": 5, "start_date": "29.01.2024", "end_date": "04.02.2024", "days": 7},
        {"week_id": 6, "start_date": "05.02.2024", "end_date": "11.02.2024", "days": 7},
        {"week_id": 7, "start_date": "12.02.2024", "end_date": "18.02.2024", "days": 7},
        {"week_id": 8, "start_date": "19.02.2024", "end_date": "25.02.2024", "days": 7},
        {"week_id": 9, "start_date": "26.02.2024", "end_date": "04.03.2024", "days": 7},
        {"week_id": 10, "start_date": "05.03.2024", "end_date": "11.03.2024", "days": 7},
        {"week_id": 11, "start_date": "12.03.2024", "end_date": "18.03.2024", "days": 7},
        {"week_id": 12, "start_date": "19.03.2024", "end_date": "25.03.2024", "days": 7}
    ],
    "work_items": [
        {
            "id": "work_001",
            "original_data": {
                "internal_id": "pos_001",
                "source_file": "test_smeta.xlsx",
                "position_num": "1",
                "code": "–ì–≠–°–ù46-02-009-02",
                "name": "–î–µ–º–æ–Ω—Ç–∞–∂ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏ —Å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π —Å—Ç–µ–Ω",
                "unit": "100 –º2",
                "quantity": "2.5",
                "classification": "–†–∞–±–æ—Ç–∞"
            },
            "group_id": None,
            "group_name": None,
            "schedule_phases": [],
            "worker_counts": []
        },
        {
            "id": "work_002", 
            "original_data": {
                "internal_id": "pos_002",
                "source_file": "test_smeta.xlsx",
                "position_num": "2",
                "code": "–ì–≠–°–ù15-04-015-01",
                "name": "–ö–ª–∞–¥–∫–∞ —Å—Ç–µ–Ω –∏–∑ –∫–∏—Ä–ø–∏—á–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ",
                "unit": "–º3",
                "quantity": "15.8",
                "classification": "–†–∞–±–æ—Ç–∞"
            },
            "group_id": None,
            "group_name": None,
            "schedule_phases": [],
            "worker_counts": []
        },
        {
            "id": "work_003",
            "original_data": {
                "internal_id": "pos_003",
                "source_file": "test_smeta.xlsx",
                "position_num": "3", 
                "code": "–ì–≠–°–ù23-03-003-01",
                "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è —Å–∏–ª–æ–≤–æ–≥–æ –≤ —Ç—Ä—É–±–∞—Ö",
                "unit": "–º",
                "quantity": "120",
                "classification": "–†–∞–±–æ—Ç–∞"
            },
            "group_id": None,
            "group_name": None,
            "schedule_phases": [],
            "worker_counts": []
        },
        {
            "id": "work_004",
            "original_data": {
                "internal_id": "pos_004",
                "source_file": "test_smeta.xlsx",
                "position_num": "4",
                "code": "–ì–≠–°–ù24-01-015-02",
                "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ—è–∫–æ–≤ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö —Å—Ç–∞–ª—å–Ω—ã—Ö",
                "unit": "–º",
                "quantity": "25",
                "classification": "–†–∞–±–æ—Ç–∞"
            },
            "group_id": None,
            "group_name": None,
            "schedule_phases": [],
            "worker_counts": []
        },
        {
            "id": "work_005",
            "original_data": {
                "internal_id": "pos_005",
                "source_file": "test_smeta.xlsx",
                "position_num": "5",
                "code": "–ì–≠–°–ù15-01-052-01",
                "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π —Å—Ç–µ–Ω —Ü–µ–º–µ–Ω—Ç–Ω–æ-–∏–∑–≤–µ—Å—Ç–∫–æ–≤—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º",
                "unit": "100 –º2",
                "quantity": "3.2",
                "classification": "–†–∞–±–æ—Ç–∞"
            },
            "group_id": None,
            "group_name": None,
            "schedule_phases": [],
            "worker_counts": []
        },
        {
            "id": "work_006",
            "original_data": {
                "internal_id": "pos_006",
                "source_file": "test_smeta.xlsx",
                "position_num": "6",
                "code": "–ì–≠–°–ù15-01-055-03",
                "name": "–û–∫—Ä–∞—Å–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π —Å—Ç–µ–Ω –∏ –ø–æ—Ç–æ–ª–∫–æ–≤",
                "unit": "100 –º2", 
                "quantity": "4.1",
                "classification": "–†–∞–±–æ—Ç–∞"
            },
            "group_id": None,
            "group_name": None,
            "schedule_phases": [],
            "worker_counts": []
        }
    ],
    "processing_status": {
        "extraction": "completed",
        "classification": "completed", 
        "preparation": "completed",
        "conceptualization": "pending",
        "scheduling": "pending",
        "accounting": "pending",
        "staffing": "pending",
        "reporting": "pending"
    }
}


async def test_agents_pipeline():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ: {temp_dir}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
        paths = {
            3: f"{temp_dir}/3_prepared",
            4: f"{temp_dir}/4_conceptualized", 
            5: f"{temp_dir}/5_scheduled",
            6: f"{temp_dir}/6_accounted",
            7: f"{temp_dir}/7_staffed",
            8: f"{temp_dir}/8_output"
        }
        
        for path in paths.values():
            os.makedirs(path, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        initial_data = TEST_PROJECT_DATA.copy()
        with open(f"{paths[3]}/project_data.json", 'w', encoding='utf-8') as f:
            json.dump(initial_data, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        
        # –¢–µ—Å—Ç 1: –ê–≥–µ–Ω—Ç –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        logger.info("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ê–≥–µ–Ω—Ç 1: –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª–∏–∑–∞—Ç–æ—Ä")
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ (—Å —É—á–µ—Ç–æ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π)
            import sys
            sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
            
            from src.ai_agents.agent_1_conceptualizer import run_agent as run_agent_1
            
            result_1 = await run_agent_1(paths[3], paths[4])
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç 1 –∑–∞–≤–µ—Ä—à–µ–Ω: {result_1}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(f"{paths[4]}/project_data.json", 'r', encoding='utf-8') as f:
                data_after_1 = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
            grouped_count = sum(1 for item in data_after_1['work_items'] if item.get('group_id') is not None)
            logger.info(f"–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–±–æ—Ç: {grouped_count}/6")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            assert os.path.exists(f"{paths[4]}/llm_input.json"), "–§–∞–π–ª llm_input.json –Ω–µ —Å–æ–∑–¥–∞–Ω"
            assert os.path.exists(f"{paths[4]}/llm_response.json"), "–§–∞–π–ª llm_response.json –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç 1 –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ 1: {e}")
            return False
        
        # –¢–µ—Å—Ç 2: –ê–≥–µ–Ω—Ç –°—Ç—Ä–∞—Ç–µ–≥  
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ê–≥–µ–Ω—Ç 2: –°—Ç—Ä–∞—Ç–µ–≥")
        try:
            from src.ai_agents.agent_2_strategist import run_agent as run_agent_2
            
            result_2 = await run_agent_2(paths[4], paths[5])
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç 2 –∑–∞–≤–µ—Ä—à–µ–Ω: {result_2}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(f"{paths[5]}/project_data.json", 'r', encoding='utf-8') as f:
                data_after_2 = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–∑—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
            scheduled_count = sum(1 for item in data_after_2['work_items'] if item.get('schedule_phases'))
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–±–æ—Ç: {scheduled_count}/6")
            
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç 2 –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ 2: {e}")
            return False
        
        # –¢–µ—Å—Ç 3: –ê–≥–µ–Ω—Ç –ë—É—Ö–≥–∞–ª—Ç–µ—Ä
        logger.info("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ê–≥–µ–Ω—Ç 3: –ë—É—Ö–≥–∞–ª—Ç–µ—Ä")
        try:
            from src.ai_agents.agent_3_accountant import run_agent as run_agent_3
            
            result_3 = await run_agent_3(paths[5], paths[6])
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç 3 –∑–∞–≤–µ—Ä—à–µ–Ω: {result_3}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(f"{paths[6]}/project_data.json", 'r', encoding='utf-8') as f:
                data_after_3 = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –∏—Ç–æ–≥–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
            group_summary = data_after_3.get('group_summary', {})
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–≤–æ–¥–æ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º: {len(group_summary)}")
            
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç 3 –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ 3: {e}")
            return False
        
        # –¢–µ—Å—Ç 4: –ê–≥–µ–Ω—Ç –ü—Ä–æ—Ä–∞–±
        logger.info("‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ê–≥–µ–Ω—Ç 4: –ü—Ä–æ—Ä–∞–±")
        try:
            from src.ai_agents.agent_4_foreman import run_agent as run_agent_4
            
            result_4 = await run_agent_4(paths[6], paths[7])
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç 4 –∑–∞–≤–µ—Ä—à–µ–Ω: {result_4}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç  
            with open(f"{paths[7]}/project_data.json", 'r', encoding='utf-8') as f:
                data_after_4 = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—á–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
            staffed_count = sum(1 for item in data_after_4['work_items'] if item.get('worker_counts'))
            logger.info(f"–£–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–æ —Ä–∞–±–æ—Ç: {staffed_count}/6")
            
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç 4 –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ 4: {e}")
            return False
        
        # –¢–µ—Å—Ç 5: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        try:
            from src.data_processing.reporter import generate_excel_report
            
            final_input = f"{paths[7]}/project_data.json"
            excel_file = generate_excel_report(final_input, paths[8])
            
            assert os.path.exists(excel_file), "Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
            logger.info(f"‚úÖ Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {excel_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è project_data.json")
        
        with open(f"{paths[7]}/project_data.json", 'r', encoding='utf-8') as f:
            final_data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        for item in final_data['work_items']:
            assert item.get('group_id') is not None, f"group_id –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–ª—è {item['id']}"
            assert item.get('group_name') is not None, f"group_name –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–ª—è {item['id']}"
            # schedule_phases –∏ worker_counts –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status = final_data['processing_status']
        assert status['conceptualization'] == 'completed', "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ completed"
        assert status['scheduling'] == 'completed', "–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ completed" 
        assert status['accounting'] == 'completed', "–°—Ç–∞—Ç—É—Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ –Ω–µ completed"
        assert status['staffing'] == 'completed', "–°—Ç–∞—Ç—É—Å —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∏—è –Ω–µ completed"
        
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        groups = set(item.get('group_id') for item in final_data['work_items'] if item.get('group_id'))
        logger.info(f"üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–±–æ—Ç: {len(final_data['work_items'])}")
        logger.info(f"   –ù–µ–¥–µ–ª—å –≤ –ø—Ä–æ–µ–∫—Ç–µ: {len(final_data['timeline_blocks'])}")
        if 'group_summary' in final_data:
            logger.info(f"   –°–≤–æ–¥–æ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º: {len(final_data['group_summary'])}")
        
        return True


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    result = asyncio.run(test_agents_pipeline())
    if result:
        print("\nüéØ –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üîÑ –û–±–æ–≥–∞—â–µ–Ω–∏–µ project_data.json –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ")
        print("üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤")
        exit(1)
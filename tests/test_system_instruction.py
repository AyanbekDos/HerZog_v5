#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å system_instruction –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION
"""

import asyncio
import sys
import os
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, str(Path(__file__).parent))

from src.ai_agents.work_packager import WorkPackager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_work_packager_with_system_instruction():
    """–¢–µ—Å—Ç work_packager —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π system_instruction"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WorkPackager —Å system_instruction –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")

    # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç
    projects_dir = "/home/imort/Herzog_v3/projects"
    test_project_path = None

    for user_id in os.listdir(projects_dir):
        user_path = os.path.join(projects_dir, user_id)
        if not os.path.isdir(user_path):
            continue

        for project_id in os.listdir(user_path):
            project_path = os.path.join(user_path, project_id)
            truth_path = os.path.join(project_path, "true.json")

            if os.path.exists(truth_path):
                try:
                    with open(truth_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)

                    work_items = data.get('source_work_items', [])
                    if 10 <= len(work_items) <= 30:  # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç —Å 10-30 —Ä–∞–±–æ—Ç–∞–º–∏
                        test_project_path = project_path
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {project_path}")
                        logger.info(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç: {len(work_items)}")
                        break

                except Exception as e:
                    continue

        if test_project_path:
            break

    if not test_project_path:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º work_packager —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    agent = WorkPackager()
    result = await agent.process(test_project_path)

    if result.get('success'):
        logger.info(f"‚úÖ WorkPackager —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {result.get('work_packages_created', 0)} –ø–∞–∫–µ—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        debug_path = os.path.join(test_project_path, "4_packaged", "llm_input.json")
        if os.path.exists(debug_path):
            with open(debug_path, 'r', encoding='utf-8') as f:
                debug_data = json.load(f)

            if 'system_instruction' in debug_data and 'user_prompt' in debug_data:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                logger.info(f"üìù System instruction: {len(debug_data['system_instruction'])} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üìù User prompt: {len(debug_data['user_prompt'])} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                logger.warning("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

        return True
    else:
        logger.error(f"‚ùå WorkPackager –ø—Ä–æ–≤–∞–ª–µ–Ω: {result.get('error')}")
        return False

async def test_simple_system_instruction():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ system_instruction"""
    logger.info("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç system_instruction")

    from src.shared.gemini_client import gemini_client

    system_instruction = "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."
    user_prompt = '{"question": "What is 2+2?"}'

    try:
        response = await gemini_client.generate_response(
            prompt=user_prompt,
            system_instruction=system_instruction
        )

        if response.get('success'):
            logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç system_instruction –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {response.get('error')}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å system_instruction")

    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
    simple_test_ok = await test_simple_system_instruction()

    # –¢–µ—Å—Ç 2: WorkPackager
    work_packager_ok = await test_work_packager_with_system_instruction()

    # –ò—Ç–æ–≥–∏
    logger.info("üìä === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    logger.info(f"–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: {'‚úÖ OK' if simple_test_ok else '‚ùå FAIL'}")
    logger.info(f"WorkPackager: {'‚úÖ OK' if work_packager_ok else '‚ùå FAIL'}")

    if simple_test_ok and work_packager_ok:
        logger.info("üéâ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("üí• –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
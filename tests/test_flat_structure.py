#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ ID
"""

import sys
import os
import json
import tempfile
import uuid
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/imort/Herzog_v3')

from src.data_processing.extractor import extract_from_files
from src.data_processing.classifier import classify_items
from src.data_processing.preparer import filter_works_from_classified


def test_flat_structure():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω —Å –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    """
    print("üß™ –¢–ï–°–¢: –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º extractor - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–¥–∏–Ω—ã–π id –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç EXTRACTOR...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    import pandas as pd
    
    test_data = {
        'A': ['‚Ññ –ø/–ø', '1', '2'],
        'B': ['–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–ì–≠–°–ù46-02-009', '–§–°–ë–¶-14.4.01.02'],
        'C': ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç', '–û—Ç–±–∏–≤–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏', '–°–º–µ—Å—å —Å—É—Ö–∞—è'],
        'H': ['–ï–¥.–∏–∑–º.', '–º2', '–∫–≥'],
        'I': ['–ö–æ–ª-–≤–æ', '100', '500']
    }
    
    df = pd.DataFrame(test_data)
    
    with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
        df.to_excel(tmp.name, index=False, header=False)
        tmp_excel = tmp.name
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        extracted_data = extract_from_files([tmp_excel])
        
        print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if extracted_data:
            first_item = extracted_data[0]
            print(f"   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
            for key, value in first_item.items():
                print(f"      {key}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –µ–¥–∏–Ω—ã–π id
            assert 'id' in first_item, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'id'"
            assert 'internal_id' not in first_item, "–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ 'internal_id'"
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ extractor –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º classifier
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç CLASSIFIER...")
        
        classified_data = classify_items(extracted_data)
        print(f"   ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ {len(classified_data)} –∑–∞–ø–∏—Å–µ–π")
        
        if classified_data:
            first_classified = classified_data[0]
            print(f"   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
            for key, value in first_classified.items():
                print(f"      {key}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ id —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            assert 'id' in first_classified, "–ü–æ—Ç–µ—Ä—è–Ω id –ø–æ—Å–ª–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            assert first_classified['id'] == first_item['id'], "ID –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ classifier –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º preparer
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç PREPARER...")
        
        work_items = filter_works_from_classified(classified_data)
        print(f"   ‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(work_items)} —Ä–∞–±–æ—Ç")
        
        if work_items:
            first_work = work_items[0]
            print(f"   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç—ã:")
            for key, value in first_work.items():
                print(f"      {key}: {value}")
            
            # –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∏–∫–∞–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ original_data!
            assert 'original_data' not in first_work, "–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å 'original_data'"
            assert 'id' in first_work, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id –≤ —Ä–∞–±–æ—Ç–µ"
            assert 'source_file' in first_work, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç source_file –≤ —Ä–∞–±–æ—Ç–µ"
            assert 'code' in first_work, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç code –≤ —Ä–∞–±–æ—Ç–µ"
            assert 'name' in first_work, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç name –≤ —Ä–∞–±–æ—Ç–µ"
            
            print("   ‚úÖ –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
            print("   üéâ –ù–ï–¢ –í–õ–û–ñ–ï–ù–ù–û–°–¢–ò original_data - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–æ—Å–∫–∞—è!")
        
        print("\n" + "=" * 50)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å –ø–ª–æ—Å–∫–∞—è —Å –µ–¥–∏–Ω—ã–º ID")
        print("üìã –û–¥–∏–Ω ID –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç —á–µ—Ä–µ–∑ –≤—Å–µ —ç—Ç–∞–ø—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        os.unlink(tmp_excel)


if __name__ == "__main__":
    test_flat_structure()
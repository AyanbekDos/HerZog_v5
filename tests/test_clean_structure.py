#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —á—Ç–æ –≤ project_data.json –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π group_id, group_name
"""

import json
import tempfile
import os
import sys
sys.path.append('/home/imort/Herzog_v3')

from src.data_processing.preparer import prepare_project_data

def test_clean_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö null –ø–æ–ª–µ–π"""
    
    test_raw_estimates = [
        {
            'internal_id': 'work-1',
            'source_file': 'test.xlsx',
            'position_num': '1',
            'code': '–ì–≠–°–ù46-02-009-02',
            'name': '–û—Ç–±–∏–≤–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏',
            'unit': '100 –º2',
            'quantity': '7.77'
        }
    ]
    
    test_directives = {
        'target_work_count': 10,
        'project_timeline': {
            'start_date': '01.01.2024',
            'end_date': '07.01.2024'
        },
        'workforce_range': {'min': 5, 'max': 15}
    }
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as f1:
        json.dump(test_raw_estimates, f1, ensure_ascii=False)
        raw_estimates_file = f1.name
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as f2:
        json.dump(test_directives, f2, ensure_ascii=False)
        directives_file = f2.name
    
    try:
        result = prepare_project_data(raw_estimates_file, directives_file)
        
        work_items = result.get('work_items', [])
        print(f"üìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–±–æ—Ç...")
        
        for i, work_item in enumerate(work_items):
            print(f"   Work {i+1}:")
            for key, value in work_item.items():
                print(f"     {key}: {type(value).__name__}")
                if key == 'original_data':
                    for subkey, subvalue in value.items():
                        print(f"       {subkey}: {subvalue}")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç group_id –∏ group_name
            if 'group_id' in work_item:
                print(f"‚ùå –ù–ê–ô–î–ï–ù–û –î–ï–†–¨–ú–û: group_id = {work_item['group_id']}")
                return False
            if 'group_name' in work_item:
                print(f"‚ùå –ù–ê–ô–î–ï–ù–û –î–ï–†–¨–ú–û: group_name = {work_item['group_name']}")
                return False
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∏—Å—Ç–∞—è - –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö null –ø–æ–ª–µ–π!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        try:
            os.unlink(raw_estimates_file)
            os.unlink(directives_file)
        except:
            pass

if __name__ == "__main__":
    success = test_clean_structure()
    if success:
        print("\nüéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∏—Å—Ç–∞—è!")
    else:
        print("\nüí© –ï—Å—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–ª—è!")
        sys.exit(1)
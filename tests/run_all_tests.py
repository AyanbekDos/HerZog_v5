#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã HerZog v3.0
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —á–µ—Ç—ã—Ä–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ
"""

import asyncio
import subprocess
import sys
import time
from pathlib import Path

def run_test_file(test_file):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    
    print(f"\n{'='*60}")
    print(f"üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: {test_file}")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫–∞–∫ subprocess
        result = subprocess.run([
            sys.executable, test_file
        ], capture_output=True, text=True, timeout=60)
        
        duration = time.time() - start_time
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(result.stdout)
        
        if result.stderr:
            print("STDERR:", result.stderr)
        
        success = result.returncode == 0
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f}—Å")
        
        if success:
            print(f"‚úÖ –¢–ï–°–¢ {test_file} –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå –¢–ï–°–¢ {test_file} –ü–†–û–í–ê–õ–ï–ù (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode})")
        
        return success, duration
        
    except subprocess.TimeoutExpired:
        duration = time.time() - start_time
        print(f"‚è∞ –¢–ï–°–¢ {test_file} –ü–†–ï–í–´–°–ò–õ –õ–ò–ú–ò–¢ –í–†–ï–ú–ï–ù–ò ({duration:.1f}—Å)")
        return False, duration
        
    except Exception as e:
        duration = time.time() - start_time
        print(f"üí• –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–ê {test_file}: {e}")
        return False, duration

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ HERZOG v3.0")
    print("=" * 60)
    
    tests_dir = Path(__file__).parent
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    test_files = [
        "test_work_packager.py",
        "test_works_to_packages.py", 
        "test_counter.py",
        "test_scheduler_and_staffer.py",
        "test_full_pipeline.py"
    ]
    
    results = []
    total_start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
    for test_file in test_files:
        test_path = tests_dir / test_file
        
        if not test_path.exists():
            print(f"‚ö†Ô∏è –¢–ï–°–¢ –ù–ï –ù–ê–ô–î–ï–ù: {test_file}")
            results.append((test_file, False, 0))
            continue
        
        success, duration = run_test_file(str(test_path))
        results.append((test_file, success, duration))
    
    total_duration = time.time() - total_start_time
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    failed = 0
    
    for test_file, success, duration in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_file:<30} {status} ({duration:.1f}—Å)")
        
        if success:
            passed += 1
        else:
            failed += 1
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed}")
    print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤: {failed}")
    print(f"  üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f}—Å")
    
    success_rate = (passed / len(results)) * 100 if results else 0
    print(f"  üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
    
    if passed == len(results):
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ HerZog v3.0 –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        sys.exit(0)
    else:
        print(f"\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´!")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        sys.exit(1)

if __name__ == "__main__":
    main()
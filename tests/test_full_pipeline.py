#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Herzog
sys.path.append('/home/imort/Herzog_v3')

from src.ai_agents.counter import run_counter
from src.ai_agents.scheduler_and_staffer import run_scheduler_and_staffer
from src.data_processing.reporter_v3 import generate_multipage_excel_report

async def test_counter_and_scheduler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º counter –∏ scheduler_and_staffer —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ counter –∏ scheduler_and_staffer —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç 
    project_path = "/home/imort/Herzog_v3/projects/34975055/d490876a"
    
    if not os.path.exists(project_path):
        print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
        return False
    
    try:
        # –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ–º counter —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
        print(f"üîÑ –ó–∞–ø—É—Å–∫ counter –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
        counter_result = await run_counter(project_path)
        
        if not counter_result['success']:
            print(f"‚ùå Counter –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {counter_result.get('error')}")
            return False
        
        print(f"‚úÖ Counter –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {counter_result.get('packages_processed', 0)}")
        
        # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º scheduler_and_staffer —Å –æ–±—Ö–æ–¥–æ–º RECITATION
        print(f"üîÑ –ó–∞–ø—É—Å–∫ scheduler_and_staffer –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
        scheduler_result = await run_scheduler_and_staffer(project_path)
        
        if not scheduler_result['success']:
            print(f"‚ùå Scheduler_and_staffer –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {scheduler_result.get('error')}")
            return False
            
        print(f"‚úÖ Scheduler_and_staffer –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {scheduler_result.get('packages_scheduled', 0)}")
        
        # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞...")
        try:
            truth_file = os.path.join(project_path, "true.json")
            output_folder = os.path.join(project_path, "8_output")
            os.makedirs(output_folder, exist_ok=True)
            
            excel_file = generate_multipage_excel_report(truth_file, output_folder)
            print(f"‚úÖ Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {excel_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        output_folder = os.path.join(project_path, "8_output")
        if os.path.exists(output_folder):
            print(f"\nüìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ 8_output:")
            for file in os.listdir(output_folder):
                file_path = os.path.join(output_folder, file)
                if os.path.isfile(file_path):
                    size = os.path.getsize(file_path)
                    print(f"   üìÑ {file} ({size} –±–∞–π—Ç)")
        
        return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_counter_and_scheduler())
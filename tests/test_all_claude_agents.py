#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 4 AI –∞–≥–µ–Ω—Ç–æ–≤ —Å Claude API
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import json
import logging
import os
import tempfile
import shutil
from pathlib import Path
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
TEST_DATA_STAGE_3 = {
    "meta": {
        "user_id": "test_user",
        "project_id": "test_project_claude",
        "current_stage": "3_prepared"
    },
    "directives": {
        "target_package_count": 3,
        "project_timeline": {
            "start_date": "2024-01-01",
            "end_date": "2024-02-01",
            "total_weeks": 4
        },
        "workforce": {"min": 5, "max": 10, "average": 8},
        "special_instructions": {
            "work_packager": "–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ—Ö–æ–∂–∏–µ —Ä–∞–±–æ—Ç—ã",
            "counter": "—Å—á–∏—Ç–∞–π —Ç–æ—á–Ω–æ",
            "scheduler": "—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–π"
        }
    },
    "work_items": [
        {
            "id": "work_001",
            "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 15.0,
            "unit_cost": 500.0,
            "total_cost": 7500.0,
            "category": "demolition"
        },
        {
            "id": "work_002",
            "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 30.0,
            "unit_cost": 800.0,
            "total_cost": 24000.0,
            "category": "finishing"
        },
        {
            "id": "work_003",
            "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 30.0,
            "unit_cost": 300.0,
            "total_cost": 9000.0,
            "category": "finishing"
        }
    ]
}

async def test_work_packager():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ work_packager"""
    print("\nüéØ === –¢–ï–°–¢ 1: WORK PACKAGER ===")

    try:
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º import –Ω–∞ Claude
        from src.shared.claude_client import claude_client as gemini_client

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∞–≥–µ–Ω—Ç–∞
        from src.ai_agents.work_packager import _load_prompt, _save_result

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
            json.dump(TEST_DATA_STAGE_3, f, ensure_ascii=False, indent=2)
            temp_file = f.name

        print(f"üìÑ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º—Ç
        prompt = _load_prompt()
        print(f"‚úÖ –ü—Ä–æ–º—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        with open(temp_file, 'r', encoding='utf-8') as f:
            data = json.load(f)

        data_json = json.dumps(data, ensure_ascii=False, indent=2)
        user_prompt = f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç –≤ –ø–∞–∫–µ—Ç—ã:\n\n{data_json}\n\n–°–≥—Ä—É–ø–ø–∏—Ä—É–π —Ä–∞–±–æ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."

        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Claude
        result = await gemini_client.generate_response(
            prompt=user_prompt,
            agent_name="work_packager",
            system_instruction=prompt,
            max_retries=3
        )

        if result['success']:
            print(f"‚úÖ Work Packager —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {result['usage_metadata']['total_token_count']}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('estimated_cost', 0):.4f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            response = result['response']
            if isinstance(response, dict):
                packages_key = 'packages' if 'packages' in response else 'work_packages'
                packages = response.get(packages_key, [])
                print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {len(packages)}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
                output_data = data.copy()
                output_data['packages'] = packages
                output_data['meta']['current_stage'] = "4_packaged"

                next_file = temp_file.replace('.json', '_packaged.json')
                with open(next_file, 'w', encoding='utf-8') as f:
                    json.dump(output_data, f, ensure_ascii=False, indent=2)

                os.unlink(temp_file)
                return next_file, result.get('estimated_cost', 0)

        else:
            print(f"‚ùå Work Packager –æ—à–∏–±–∫–∞: {result['error']}")
            os.unlink(temp_file)
            return None, 0

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Work Packager: {e}")
        import traceback
        traceback.print_exc()
        return None, 0

async def test_works_to_packages(input_file):
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ works_to_packages"""
    print("\nüéØ === –¢–ï–°–¢ 2: WORKS TO PACKAGES ===")

    if not input_file:
        print("‚ùå –ù–µ—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç work_packager")
        return None, 0

    try:
        from src.shared.claude_client import claude_client as gemini_client

        # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º—Ç
        prompt_path = "src/prompts/works_to_packages_prompt.txt"
        with open(prompt_path, 'r', encoding='utf-8') as f:
            prompt = f.read()

        print(f"‚úÖ –ü—Ä–æ–º—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        with open(input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)

        data_json = json.dumps(data, ensure_ascii=False, indent=2)
        user_prompt = f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞–∫–µ—Ç—ã:\n\n{data_json}"

        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude...")

        result = await gemini_client.generate_response(
            prompt=user_prompt,
            agent_name="works_to_packages",
            system_instruction=prompt,
            max_retries=3
        )

        if result['success']:
            print(f"‚úÖ Works to Packages —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {result['usage_metadata']['total_token_count']}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('estimated_cost', 0):.4f}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            response = result['response']
            next_file = input_file.replace('_packaged.json', '_works2packages.json')

            with open(next_file, 'w', encoding='utf-8') as f:
                json.dump(response, f, ensure_ascii=False, indent=2)

            os.unlink(input_file)
            return next_file, result.get('estimated_cost', 0)

        else:
            print(f"‚ùå Works to Packages –æ—à–∏–±–∫–∞: {result['error']}")
            return None, 0

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Works to Packages: {e}")
        import traceback
        traceback.print_exc()
        return None, 0

async def test_counter(input_file):
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ counter"""
    print("\nüéØ === –¢–ï–°–¢ 3: COUNTER ===")

    if not input_file:
        print("‚ùå –ù–µ—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç works_to_packages")
        return None, 0

    try:
        from src.shared.claude_client import claude_client as gemini_client

        # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º—Ç
        prompt_path = "src/prompts/counter_prompt.txt"
        with open(prompt_path, 'r', encoding='utf-8') as f:
            prompt = f.read()

        print(f"‚úÖ –ü—Ä–æ–º—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        with open(input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)

        data_json = json.dumps(data, ensure_ascii=False, indent=2)
        user_prompt = f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤:\n\n{data_json}"

        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude...")

        result = await gemini_client.generate_response(
            prompt=user_prompt,
            agent_name="counter",
            system_instruction=prompt,
            max_retries=3
        )

        if result['success']:
            print(f"‚úÖ Counter —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {result['usage_metadata']['total_token_count']}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('estimated_cost', 0):.4f}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            response = result['response']
            next_file = input_file.replace('_works2packages.json', '_counted.json')

            with open(next_file, 'w', encoding='utf-8') as f:
                json.dump(response, f, ensure_ascii=False, indent=2)

            os.unlink(input_file)
            return next_file, result.get('estimated_cost', 0)

        else:
            print(f"‚ùå Counter –æ—à–∏–±–∫–∞: {result['error']}")
            return None, 0

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Counter: {e}")
        import traceback
        traceback.print_exc()
        return None, 0

async def test_scheduler_and_staffer(input_file):
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ scheduler_and_staffer"""
    print("\nüéØ === –¢–ï–°–¢ 4: SCHEDULER AND STAFFER ===")

    if not input_file:
        print("‚ùå –ù–µ—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç counter")
        return None, 0

    try:
        from src.shared.claude_client import claude_client as gemini_client

        # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º—Ç
        prompt_path = "src/prompts/scheduler_and_staffer_prompt.txt"
        with open(prompt_path, 'r', encoding='utf-8') as f:
            prompt = f.read()

        print(f"‚úÖ –ü—Ä–æ–º—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        with open(input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)

        data_json = json.dumps(data, ensure_ascii=False, indent=2)
        user_prompt = f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n{data_json}"

        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude...")

        result = await gemini_client.generate_response(
            prompt=user_prompt,
            agent_name="scheduler_and_staffer",
            system_instruction=prompt,
            max_retries=3
        )

        if result['success']:
            print(f"‚úÖ Scheduler and Staffer —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {result['usage_metadata']['total_token_count']}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('estimated_cost', 0):.4f}")

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response = result['response']
            final_file = input_file.replace('_counted.json', '_scheduled.json')

            with open(final_file, 'w', encoding='utf-8') as f:
                json.dump(response, f, ensure_ascii=False, indent=2)

            print(f"üìÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_file}")

            os.unlink(input_file)
            return final_file, result.get('estimated_cost', 0)

        else:
            print(f"‚ùå Scheduler and Staffer –æ—à–∏–±–∫–∞: {result['error']}")
            return None, 0

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Scheduler and Staffer: {e}")
        import traceback
        traceback.print_exc()
        return None, 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
    print("üöÄ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• CLAUDE –ê–ì–ï–ù–¢–û–í ===")
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {os.getenv('CLAUDE_TEST_MODE', 'true')}")

    total_cost = 0.0

    # –¢–µ—Å—Ç 1: Work Packager
    file1, cost1 = await test_work_packager()
    total_cost += cost1

    if not file1:
        print("\n‚ùå –¢–ï–°–¢–´ –û–°–¢–ê–ù–û–í–õ–ï–ù–´ –ù–ê WORK PACKAGER")
        return

    # –¢–µ—Å—Ç 2: Works to Packages
    file2, cost2 = await test_works_to_packages(file1)
    total_cost += cost2

    if not file2:
        print("\n‚ùå –¢–ï–°–¢–´ –û–°–¢–ê–ù–û–í–õ–ï–ù–´ –ù–ê WORKS TO PACKAGES")
        return

    # –¢–µ—Å—Ç 3: Counter
    file3, cost3 = await test_counter(file2)
    total_cost += cost3

    if not file3:
        print("\n‚ùå –¢–ï–°–¢–´ –û–°–¢–ê–ù–û–í–õ–ï–ù–´ –ù–ê COUNTER")
        return

    # –¢–µ—Å—Ç 4: Scheduler and Staffer
    file4, cost4 = await test_scheduler_and_staffer(file3)
    total_cost += cost4

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüéØ === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    if file4:
        print("‚úÖ –í–°–ï 4 –ê–ì–ï–ù–¢–ê –†–ê–ë–û–¢–ê–Æ–¢ –° CLAUDE!")
        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${total_cost:.4f}")
        print(f"üìÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file4}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        try:
            with open(file4, 'r', encoding='utf-8') as f:
                final_data = json.load(f)

            packages = final_data.get('packages', [])
            print(f"üì¶ –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {len(packages)}")

            if packages:
                print(f"üìã –ü–µ—Ä–≤—ã–π –ø–∞–∫–µ—Ç: {packages[0].get('name', 'Unnamed')}")

        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {e}")

    else:
        print("‚ùå –ù–ï –í–°–ï –ê–ì–ï–ù–¢–´ –ü–†–û–®–õ–ò –¢–ï–°–¢")
        print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Ç–µ—Å—Ç—ã: ~${total_cost:.4f}")

    print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
    for temp_file in [file1, file2, file3, file4]:
        if temp_file and os.path.exists(temp_file):
            try:
                os.unlink(temp_file)
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {temp_file}")
            except:
                pass

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    os.environ['CLAUDE_TEST_MODE'] = 'true'

    asyncio.run(main())
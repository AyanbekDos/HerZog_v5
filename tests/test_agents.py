#!/usr/bin/env python3
"""
–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö AI –∞–≥–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã HerZog
–ò—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import sys
import os
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.ai_agents.work_packager import WorkPackager
from src.ai_agents.works_to_packages import WorksToPackagesAssigner
from src.ai_agents.counter import WorkVolumeCalculator
from src.ai_agents.scheduler_and_staffer import SchedulerAndStaffer

logger = logging.getLogger(__name__)

class AgentTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""

    def __init__(self, test_project_path: str):
        self.test_project_path = test_project_path
        self.results = {}

    async def test_work_packager(self):
        """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ work_packager"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ work_packager")

        agent = WorkPackager()
        result = await agent.process(self.test_project_path)

        self.results['work_packager'] = {
            'success': result.get('success', False),
            'packages_created': result.get('packages_created', 0),
            'error': result.get('error')
        }

        if result.get('success'):
            logger.info(f"‚úÖ work_packager: –°–æ–∑–¥–∞–Ω–æ {result.get('packages_created', 0)} –ø–∞–∫–µ—Ç–æ–≤")
        else:
            logger.error(f"‚ùå work_packager: {result.get('error')}")

    async def test_works_to_packages(self):
        """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ works_to_packages"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ works_to_packages")

        agent = WorksToPackagesAssigner(batch_size=25)  # –ú–µ–Ω—å—à–∏–π –±–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        result = await agent.process(self.test_project_path)

        self.results['works_to_packages'] = {
            'success': result.get('success', False),
            'works_processed': result.get('works_processed', 0),
            'batches_processed': result.get('batches_processed', 0),
            'error': result.get('error')
        }

        if result.get('success'):
            logger.info(f"‚úÖ works_to_packages: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.get('works_processed', 0)} —Ä–∞–±–æ—Ç –≤ {result.get('batches_processed', 0)} –±–∞—Ç—á–∞—Ö")
        else:
            logger.error(f"‚ùå works_to_packages: {result.get('error')}")

    async def test_counter(self):
        """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ counter"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ counter")

        agent = WorkVolumeCalculator()
        result = await agent.process(self.test_project_path)

        self.results['counter'] = {
            'success': result.get('success', False),
            'packages_calculated': result.get('packages_calculated', 0),
            'error': result.get('error')
        }

        if result.get('success'):
            logger.info(f"‚úÖ counter: –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {result.get('packages_calculated', 0)} –ø–∞–∫–µ—Ç–æ–≤")
        else:
            logger.error(f"‚ùå counter: {result.get('error')}")

    async def test_scheduler_and_staffer(self):
        """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ scheduler_and_staffer"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ scheduler_and_staffer")

        agent = SchedulerAndStaffer(batch_size=8)  # –ú–µ–Ω—å—à–∏–π –±–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        result = await agent.process(self.test_project_path)

        self.results['scheduler_and_staffer'] = {
            'success': result.get('success', False),
            'packages_scheduled': result.get('packages_scheduled', 0),
            'workforce_valid': result.get('workforce_valid', False),
            'error': result.get('error')
        }

        if result.get('success'):
            logger.info(f"‚úÖ scheduler_and_staffer: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {result.get('packages_scheduled', 0)} –ø–∞–∫–µ—Ç–æ–≤, –ø–µ—Ä—Å–æ–Ω–∞–ª –≤–∞–ª–∏–¥–µ–Ω: {result.get('workforce_valid')}")
        else:
            logger.error(f"‚ùå scheduler_and_staffer: {result.get('error')}")

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ: {self.test_project_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(self.test_project_path):
            logger.error(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.test_project_path}")
            return self.results

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º true.json
        true_json_path = os.path.join(self.test_project_path, "true.json")
        if not os.path.exists(true_json_path):
            logger.error(f"‚ùå –§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {true_json_path}")
            return self.results

        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            await self.test_work_packager()
            await self.test_works_to_packages()
            await self.test_counter()
            await self.test_scheduler_and_staffer()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            self.results['critical_error'] = str(e)

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
        self._print_summary()

        return self.results

    def _print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üìä === –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–û–í ===")

        total_tests = 0
        passed_tests = 0

        for agent_name, result in self.results.items():
            if agent_name == 'critical_error':
                continue

            total_tests += 1
            status = "‚úÖ –ü–†–û–®–ï–õ" if result.get('success') else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            error_msg = f" ({result.get('error')})" if result.get('error') else ""

            logger.info(f"  {agent_name}: {status}{error_msg}")

            if result.get('success'):
                passed_tests += 1

        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_tests}/{total_tests} ({success_rate:.1f}%)")

        if 'critical_error' in self.results:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {self.results['critical_error']}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
    test_project_path = "/home/imort/Herzog_v3/projects/34975055/841377b4"

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester = AgentTester(test_project_path)
    results = await tester.run_all_tests()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    success_count = sum(1 for r in results.values() if isinstance(r, dict) and r.get('success'))
    total_count = len([r for r in results.values() if isinstance(r, dict) and 'success' in r])

    return 0 if success_count == total_count else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
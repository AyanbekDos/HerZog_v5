#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ works_to_packages.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –ø–∞–∫–µ—Ç–∞–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞—Ç—á–∏–Ω–≥–∞
"""

import json
import os
import sys
import asyncio
import tempfile
import shutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.ai_agents.works_to_packages import WorksToPackagesAssigner
from tests.mock_gemini_client import mock_gemini_client

# –ü–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π gemini_client –Ω–∞ –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import src.ai_agents.works_to_packages
src.ai_agents.works_to_packages.gemini_client = mock_gemini_client

class TestWorksToPackages:
    
    def __init__(self):
        self.test_project_path = None
    
    def setup_test_project(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å mock –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_project_path = tempfile.mkdtemp(prefix='test_herzog_')
        
        # –°–æ–∑–¥–∞–µ–º mock true.json —Å –ø–∞–∫–µ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
        mock_truth_data = {
            "metadata": {
                "project_id": "test_project",
                "project_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
                "pipeline_status": [
                    {"agent_name": "work_packager", "status": "completed"},
                    {"agent_name": "works_to_packages", "status": "pending"}
                ]
            },
            "project_inputs": {
                "target_work_package_count": 6,
                "agent_directives": {
                    "conceptualizer": "–≤—Å—é —ç–ª–µ–∫—Ç—Ä–∏–∫—É –æ–±—ä–µ–¥–∏–Ω–∏ –≤ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç"
                }
            },
            "source_work_items": [
                {
                    "id": "work_001",
                    "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫ –∫–∏—Ä–ø–∏—á–Ω—ã—Ö",
                    "code": "08.01.001"
                },
                {
                    "id": "work_002",
                    "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ–ª–∞ –ª–∏–Ω–æ–ª–µ—É–º", 
                    "code": "08.02.015"
                },
                {
                    "id": "work_003",
                    "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è –í–í–ì 3—Ö2.5",
                    "code": "19.03.012"
                },
                {
                    "id": "work_004",
                    "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö",
                    "code": "19.05.001"
                },
                {
                    "id": "work_005",
                    "name": "–ú–æ–Ω—Ç–∞–∂ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π",
                    "code": "19.05.003"
                },
                {
                    "id": "work_006",
                    "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω —Ü–µ–º–µ–Ω—Ç–Ω—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º",
                    "code": "15.01.001"
                },
                {
                    "id": "work_007",
                    "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–æ–π –∫—Ä–∞—Å–∫–æ–π",
                    "code": "15.06.001"
                },
                {
                    "id": "work_008",
                    "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ç—è–∂–∫–∏ —Ü–µ–º–µ–Ω—Ç–Ω–æ–π",
                    "code": "11.01.001"
                },
                {
                    "id": "work_009",
                    "name": "–£–∫–ª–∞–¥–∫–∞ –ª–∞–º–∏–Ω–∞—Ç–∞",
                    "code": "11.04.001"
                },
                {
                    "id": "work_010",
                    "name": "–ú–æ–Ω—Ç–∞–∂ –ø–æ–¥–≤–µ—Å–Ω–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞",
                    "code": "15.07.001"
                },
                {
                    "id": "work_011",
                    "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Ç—Ä—É–± –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞",
                    "code": "18.01.001"
                },
                {
                    "id": "work_012",
                    "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—Å–∏—Ç–µ–ª—è",
                    "code": "18.03.001"
                }
            ],
            "results": {
                "work_packages": [
                    {
                        "package_id": "pkg_001",
                        "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                        "description": "–°–Ω–æ—Å –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫, –¥–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏–π –ø–æ–ª–∞ –∏ –ø–æ—Ç–æ–ª–∫–∞"
                    },
                    {
                        "package_id": "pkg_002",
                        "name": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", 
                        "description": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ –∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π"
                    },
                    {
                        "package_id": "pkg_003",
                        "name": "–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å—Ç–µ–Ω",
                        "description": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ –∏ –ø–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –ø–æ–º–µ—â–µ–Ω–∏–π"
                    },
                    {
                        "package_id": "pkg_004",
                        "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª–æ–≤",
                        "description": "–°—Ç—è–∂–∫–∞ –∏ —É–∫–ª–∞–¥–∫–∞ –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π"
                    },
                    {
                        "package_id": "pkg_005",
                        "name": "–†–∞–±–æ—Ç—ã –ø–æ –ø–æ—Ç–æ–ª–∫–∞–º",
                        "description": "–ú–æ–Ω—Ç–∞–∂ –ø–æ–¥–≤–µ—Å–Ω—ã—Ö –∏ –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–æ–≤"
                    },
                    {
                        "package_id": "pkg_006",
                        "name": "–°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã",
                        "description": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Ç—Ä—É–± –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏"
                    }
                ]
            }
        }
        
        truth_path = os.path.join(self.test_project_path, "true.json")
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(mock_truth_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
        return self.test_project_path
    
    async def test_works_to_packages_full(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç"""
        
        print("üß™ === –¢–ï–°–¢ WORKS_TO_PACKAGES –ü–û–õ–ù–´–ô –ü–†–û–¶–ï–°–° ===")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project_path = self.setup_test_project()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = WorksToPackagesAssigner(batch_size=5)  # –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ works_to_packages...")
            result = await agent.process(project_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                print("‚úÖ –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–±–æ—Ç: {result.get('works_processed', 0)}")
                print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞—Ç—á–µ–π: {result.get('batches_processed', 0)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π true.json
                truth_path = os.path.join(project_path, "true.json")
                with open(truth_path, 'r', encoding='utf-8') as f:
                    updated_truth = json.load(f)
                
                source_work_items = updated_truth.get('source_work_items', [])
                
                print(f"üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –ø–∞–∫–µ—Ç–∞–º:")
                package_counts = {}
                
                for work in source_work_items:
                    package_id = work.get('package_id', '–ù–ï_–ù–ê–ó–ù–ê–ß–ï–ù')
                    work_name = work.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    print(f"  {work['id']}: {work_name[:40]}... ‚Üí {package_id}")
                    
                    if package_id not in package_counts:
                        package_counts[package_id] = 0
                    package_counts[package_id] += 1
                
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º:")
                for pkg_id, count in package_counts.items():
                    print(f"  {pkg_id}: {count} —Ä–∞–±–æ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∞–≥–µ–Ω—Ç–∞
                agent_folder = os.path.join(project_path, "5_works_to_packages")
                if os.path.exists(agent_folder):
                    files = os.listdir(agent_folder)
                    batch_files = [f for f in files if f.startswith('batch_')]
                    print(f"üìÅ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –±–∞—Ç—á–µ–π: {len(batch_files)} —Ñ–∞–π–ª–æ–≤")
                
                # –ë–∞–∑–æ–≤—ã–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                assert len(source_work_items) == 12, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
                
                works_with_packages = [w for w in source_work_items if w.get('package_id')]
                assert len(works_with_packages) == 12, "–ù–µ –≤—Å–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫ –ø–∞–∫–µ—Ç–∞–º"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ package_id —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                valid_packages = {'pkg_001', 'pkg_002', 'pkg_003', 'pkg_004', 'pkg_005', 'pkg_006'}
                for work in source_work_items:
                    assert work.get('package_id') in valid_packages, f"–ù–µ–≤–µ—Ä–Ω—ã–π package_id: {work.get('package_id')}"
                
                print("‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
                return True
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {result.get('error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
        
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
                print(f"üßπ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
    
    async def test_batch_processing(self):
        """–¢–µ—Å—Ç –±–∞—Ç—á–∏–Ω–≥–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç"""
        
        print("üß™ === –¢–ï–°–¢ –ë–ê–¢–ß–ò–ù–ì–ê ===")
        
        project_path = self.setup_test_project()
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç—á–∏–Ω–≥–∞
            truth_path = os.path.join(project_path, "true.json")
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ —Ä–∞–±–æ—Ç (–≤—Å–µ–≥–æ –±—É–¥–µ—Ç 22)
            extra_works = []
            for i in range(13, 23):
                extra_works.append({
                    "id": f"work_{i:03d}",
                    "name": f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ {i}",
                    "code": f"99.99.{i:03d}"
                })
            
            truth_data['source_work_items'].extend(extra_works)
            
            with open(truth_path, 'w', encoding='utf-8') as f:
                json.dump(truth_data, f, ensure_ascii=False, indent=2)
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –º–∞–ª–µ–Ω—å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞
            agent = WorksToPackagesAssigner(batch_size=6)  # –ë–∞—Ç—á–∏ –ø–æ 6 —Ä–∞–±–æ—Ç
            
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º...")
            result = await agent.process(project_path)
            
            if result.get('success'):
                expected_batches = 22 // 6 + (1 if 22 % 6 > 0 else 0)  # 4 –±–∞—Ç—á–∞
                actual_batches = result.get('batches_processed', 0)
                
                print(f"üì¶ –û–∂–∏–¥–∞–µ–º–æ –±–∞—Ç—á–µ–π: {expected_batches}")
                print(f"üì¶ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–∞—Ç—á–µ–π: {actual_batches}")
                
                assert actual_batches == expected_batches, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                with open(truth_path, 'r', encoding='utf-8') as f:
                    updated_truth = json.load(f)
                
                works_with_packages = [w for w in updated_truth['source_work_items'] if w.get('package_id')]
                assert len(works_with_packages) == 22, "–ù–µ –≤—Å–µ —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ –±–∞—Ç—á–∞—Ö"
                
                print("‚úÖ –ë–∞—Ç—á–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ –±–∞—Ç—á–∏–Ω–≥–∞: {result.get('error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç—á–∏–Ω–≥–∞: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        
        print("üß™ === –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===")
        
        project_path = self.setup_test_project()
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç —á—Ç–æ–±—ã —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
            truth_path = os.path.join(project_path, "true.json")
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –û—á–∏—â–∞–µ–º –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç
            truth_data['results']['work_packages'] = []
            
            with open(truth_path, 'w', encoding='utf-8') as f:
                json.dump(truth_data, f, ensure_ascii=False, indent=2)
            
            agent = WorksToPackagesAssigner()
            
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –±–µ–∑ –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç...")
            result = await agent.process(project_path)
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
            if not result.get('success'):
                print(f"‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result.get('error')}")
                assert "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç" in result.get('error', ''), "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
                return True
            else:
                print("‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                return False
                
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ works_to_packages.py")
    print("=" * 50)
    
    tester = TestWorksToPackages()
    
    tests = [
        ("–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", tester.test_works_to_packages_full),
        ("–ë–∞—Ç—á–∏–Ω–≥ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤", tester.test_batch_processing),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", tester.test_error_handling)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        
        try:
            success = await test_func()
            results.append((test_name, success))
            
            if success:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã!")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_all_tests())
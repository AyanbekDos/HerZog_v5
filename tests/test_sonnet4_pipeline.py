#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å Sonnet 4 –∏ –≤—Å–µ–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
"""

import os
import sys
import json
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.abspath('.'))

from src.shared.claude_client import claude_client
from src.ai_agents.work_packager import run_work_packager
from src.ai_agents.works_to_packages import run_works_to_packages
from src.ai_agents.counter import run_counter
from src.ai_agents.scheduler_and_staffer import run_scheduler_and_staffer

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_claude_client():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã Claude –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Claude –∫–ª–∏–µ–Ω—Ç...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info(f"üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {claude_client.test_mode}")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {claude_client.model_name}")

    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
    test_prompt = """–í–µ—Ä–Ω–∏ JSON: {"test": "success", "message": "Sonnet 4 —Ä–∞–±–æ—Ç–∞–µ—Ç!"}"""

    result = await claude_client.generate_response(
        prompt=test_prompt,
        agent_name="test",
        system_instruction="–¢—ã —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON."
    )

    if result.get('success'):
        logger.info(f"‚úÖ Claude API —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.get('response', {}).get('message', 'OK')}")
        return True
    else:
        logger.error(f"‚ùå Claude API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.get('error')}")
        return False

async def test_project_agents(project_path: str):
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ"""
    if not os.path.exists(project_path):
        logger.error(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
        return False

    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∞–≥–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ: {project_path}")

    try:
        # 1. Work Packager
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ work_packager...")
        result1 = await run_work_packager(project_path)
        if not result1.get('success', False):
            logger.error(f"‚ùå work_packager failed: {result1.get('error')}")
            return False
        logger.info(f"‚úÖ work_packager: {result1.get('packages_created', 0)} –ø–∞–∫–µ—Ç–æ–≤")

        # 2. Works to Packages
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ works_to_packages...")
        result2 = await run_works_to_packages(project_path)
        if not result2.get('success', False):
            logger.error(f"‚ùå works_to_packages failed: {result2.get('error')}")
            return False
        logger.info(f"‚úÖ works_to_packages: {result2.get('works_processed', 0)} —Ä–∞–±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

        # 3. Counter
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ counter...")
        result3 = await run_counter(project_path)
        if not result3.get('success', False):
            logger.error(f"‚ùå counter failed: {result3.get('error')}")
            return False
        logger.info(f"‚úÖ counter: {result3.get('packages_processed', 0)} –ø–∞–∫–µ—Ç–æ–≤ –ø–æ—Å—á–∏—Ç–∞–Ω–æ")

        # 4. Scheduler and Staffer
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ scheduler_and_staffer...")
        result4 = await run_scheduler_and_staffer(project_path)
        if not result4.get('success', False):
            logger.error(f"‚ùå scheduler_and_staffer failed: {result4.get('error')}")
            return False
        logger.info(f"‚úÖ scheduler_and_staffer: {result4.get('packages_scheduled', 0)} –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

def test_true_json_enrichment(project_path: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ true.json –æ–±–æ–≥–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
    truth_path = os.path.join(project_path, "true.json")

    if not os.path.exists(truth_path):
        logger.error(f"‚ùå true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
        return False

    with open(truth_path, 'r', encoding='utf-8') as f:
        truth_data = json.load(f)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º project_name –∏ source_file_name
    metadata = truth_data.get('metadata', {})
    project_name = metadata.get('project_name', '')
    source_file_name = metadata.get('source_file_name', '')

    logger.info(f"üìÑ –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞: '{project_name}'")
    logger.info(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: '{source_file_name}'")

    if project_name == "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç":
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –≤—Å—ë –µ—â—ë –±–µ–∑—ã–º—è–Ω–Ω—ã–π")
    if source_file_name == "estimate.xlsx":
        logger.warning("‚ö†Ô∏è –ò–º—è —Ñ–∞–π–ª–∞ –≤—Å—ë –µ—â—ë –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    work_packages = truth_data.get('results', {}).get('work_packages', [])
    reasoning_count = 0

    for package in work_packages:
        if 'scheduling_reasoning' in package:
            reasoning_count += 1
            reasoning = package['scheduling_reasoning']
            logger.info(f"üìã –ü–∞–∫–µ—Ç {package.get('package_id')}: {len(reasoning)} –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–π")

    if reasoning_count == 0:
        logger.error("‚ùå –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ true.json")
        return False
    else:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {reasoning_count} –ø–∞–∫–µ—Ç–æ–≤ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Sonnet 4 –ø–∞–π–ø–ª–∞–π–Ω–∞")
    logger.info(f"üìÖ –í—Ä–µ–º—è: {datetime.now()}")

    # 1. –¢–µ—Å—Ç Claude –∫–ª–∏–µ–Ω—Ç–∞
    if not await test_claude_client():
        logger.error("‚ùå Claude –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–µ—Å—Ç—ã")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    projects_dir = "projects"
    if not os.path.exists(projects_dir):
        logger.error("‚ùå –ü–∞–ø–∫–∞ projects –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç
    test_project = None
    for user_dir in os.listdir(projects_dir):
        user_path = os.path.join(projects_dir, user_dir)
        if os.path.isdir(user_path):
            for project_dir in os.listdir(user_path):
                project_path = os.path.join(user_path, project_dir)
                if os.path.isdir(project_path) and os.path.exists(os.path.join(project_path, "true.json")):
                    test_project = project_path

    if not test_project:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç —Å true.json –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    logger.info(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {test_project}")

    # 3. –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–æ–≤
    if await test_project_agents(test_project):
        logger.info("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è true.json
        if test_true_json_enrichment(test_project):
            logger.info("‚úÖ true.json –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–æ–≥–∞—â–∞–µ—Ç—Å—è")
        else:
            logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º true.json")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≥–µ–Ω—Ç–∞–º–∏")

    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    stats = claude_client.get_usage_stats()
    logger.info(f"üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Claude:")
    logger.info(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    logger.info(f"   –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_input_tokens']}")
    logger.info(f"   –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_output_tokens']}")
    logger.info(f"   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats['estimated_cost']:.4f}")

    logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
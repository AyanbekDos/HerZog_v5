#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ preparer.py –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã classifier.py –∏ timeline_blocks.py
"""

import json
import tempfile
import os
import sys
sys.path.append('/home/imort/Herzog_v3')

from src.data_processing.preparer import prepare_project_data

def test_preparer_orchestrator():
    """–¢–µ—Å—Ç —á—Ç–æ preparer –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ raw_estimates.json (–∫–∞–∫ –ø–æ—Å–ª–µ extractor)
    test_raw_estimates = [
        {
            'internal_id': 'work-1',
            'source_file': 'test.xlsx',
            'position_num': '1',
            'code': '–ì–≠–°–ù46-02-009-02',
            'name': '–û—Ç–±–∏–≤–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏',
            'unit': '100 –º2',
            'quantity': '7.77'
        },
        {
            'internal_id': 'material-1',
            'source_file': 'test.xlsx',
            'position_num': '2',
            'code': '–§–°–ë–¶-14.4.01.02-0012',
            'name': '–°–º–µ—Å—å —Å—É—Ö–∞—è —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è',
            'unit': '–∫–≥',
            'quantity': '1000'
        },
        {
            'internal_id': 'work-2',
            'source_file': 'test.xlsx', 
            'position_num': '3',
            'code': '–ì–≠–°–ù46-01-001-01',
            'name': '–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫',
            'unit': '100 –º2',
            'quantity': '5.5'
        }
    ]
    
    test_directives = {
        'target_work_count': 10,
        'project_timeline': {
            'start_date': '01.02.2024',
            'end_date': '29.02.2024'  # –û–¥–∏–Ω –º–µ—Å—è—Ü = 4 –Ω–µ–¥–µ–ª–∏
        },
        'workforce_range': {'min': 5, 'max': 15},
        'directives': {
            'conceptualizer': '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—á–Ω–æ',
            'strategist': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ'
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as f1:
        json.dump(test_raw_estimates, f1, ensure_ascii=False, indent=2)
        raw_estimates_file = f1.name
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as f2:
        json.dump(test_directives, f2, ensure_ascii=False, indent=2)
        directives_file = f2.name
    
    try:
        print("üé≠ –¢–µ—Å—Ç–∏—Ä—É—é preparer –∫–∞–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä...")
        print(f"üìÑ Raw estimates: {len(test_raw_estimates)} –ø–æ–∑–∏—Ü–∏–π")
        print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω: 01.02.2024 - 29.02.2024")
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        result = prepare_project_data(raw_estimates_file, directives_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏:")
        print(f"   Work items: {len(result.get('work_items', []))}")
        print(f"   Timeline blocks: {len(result.get('timeline_blocks', []))}")
        print(f"   Meta total_work_items: {result.get('meta', {}).get('total_work_items', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ classifier —Å—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        work_items = result.get('work_items', [])
        for i, item in enumerate(work_items):
            original = item.get('original_data', {})
            classification = original.get('classification')
            name = original.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"   {i+1}. {name} - {classification}")
            
            if classification != '–†–∞–±–æ—Ç–∞':
                print(f"‚ùå –û–®–ò–ë–ö–ê: classifier –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª - –ø–æ–∑–∏—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞!")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ timeline_blocks —Å—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        timeline_blocks = result.get('timeline_blocks', [])
        if len(timeline_blocks) != 4:  # –§–µ–≤—Ä–∞–ª—å 2024 = 4 –Ω–µ–¥–µ–ª–∏
            print(f"‚ùå –û–®–ò–ë–ö–ê: timeline_blocks –≤–µ—Ä–Ω—É–ª {len(timeline_blocks)} –Ω–µ–¥–µ–ª—å, –æ–∂–∏–¥–∞–ª–∏ 4")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É project_data
        required_keys = ['meta', 'directives', 'timeline_blocks', 'work_items', 'processing_status', 'groups_data']
        for key in required_keys:
            if key not in result:
                print(f"‚ùå –û–®–ò–ë–ö–ê: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ project_data")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç –∏–º–µ–Ω–Ω–æ 2 (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
        expected_works = 2
        actual_works = len(work_items)
        
        if actual_works == expected_works:
            print(f"‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            print(f"   - –í—ã–∑–≤–∞–ª classifier.py ‚úì")
            print(f"   - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã ({actual_works} –∏–∑ {len(test_raw_estimates)}) ‚úì")
            print(f"   - –í—ã–∑–≤–∞–ª timeline_blocks.py ({len(timeline_blocks)} –Ω–µ–¥–µ–ª—å) ‚úì")
            print(f"   - –°–æ–±—Ä–∞–ª project_data.json —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π ‚úì")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç: –æ–∂–∏–¥–∞–ª–∏ {expected_works}, –ø–æ–ª—É—á–∏–ª–∏ {actual_works}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.unlink(raw_estimates_file)
            os.unlink(directives_file)
        except:
            pass

if __name__ == "__main__":
    success = test_preparer_orchestrator()
    if success:
        print("\nüéâ PREPARER-–û–†–ö–ï–°–¢–†–ê–¢–û–† —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print("\nüí• –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        sys.exit(1)
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ group_creator –∏ group_assigner
"""

import sys
import os
import json
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/home/imort/Herzog_v3')

from src.ai_agents.agent_runner import run_agent, run_pipeline

def create_test_project_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π project_data.json –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ß–∏—Ç–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    classified_file = "/home/imort/Herzog_v3/projects/34975055/d19120ef/2_classified/classified_estimates.json"
    with open(classified_file, 'r', encoding='utf-8') as f:
        classified_data = json.load(f)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¢–û–õ–¨–ö–û —Ä–∞–±–æ—Ç—ã –¥–ª—è project_data.json
    work_items_only = [item for item in classified_data if item.get('classification') == '–†–∞–±–æ—Ç–∞']
    print(f"üìã –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(work_items_only)} —Ä–∞–±–æ—Ç –∏–∑ {len(classified_data)} –ø–æ–∑–∏—Ü–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π project_data.json
    project_data = {
        "meta": {
            "user_id": "34975055",
            "project_id": "d19120ef", 
            "created_at": "2025-09-04",
            "source_files": ["–ö–† - –õ–°–† –ø–æ –ú–µ—Ç–æ–¥–∏–∫–µ 2020 (–†–ú)1.xlsx"]
        },
        "directives": {
            "target_work_count": 15,
            "project_timeline": {
                "start_date": "2024-01-01",
                "end_date": "2024-06-30"
            },
            "workforce_range": {"min": 10, "max": 20},
            "conceptualizer": "–≤—Å—é —ç–ª–µ–∫—Ç—Ä–∏–∫—É –≤ –æ–¥–∏–Ω –±–ª–æ–∫, –¥–µ–º–æ–Ω—Ç–∞–∂ –æ—Ç–¥–µ–ª—å–Ω–æ",
            "strategist": "—Ä–∞—Å—Ç—è–Ω–∏ –¥–µ–º–æ–Ω—Ç–∞–∂ –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü",
            "accountant": "–ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å—á–∏—Ç–∞–π —Ç–æ—á–Ω–æ",
            "foreman": "–Ω–∞ –æ—Ç–¥–µ–ª–∫—É –∫–∏–Ω—å –º–∞–∫—Å–∏–º—É–º –ª—é–¥–µ–π"
        },
        "timeline_blocks": [],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
        "work_items": work_items_only
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ (26 –Ω–µ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É–≥–æ–¥–∞)
    from datetime import datetime, timedelta
    start_date = datetime(2024, 1, 1)
    
    for week_num in range(1, 27):
        week_start = start_date + timedelta(weeks=week_num-1)
        week_end = week_start + timedelta(days=6)
        
        project_data["timeline_blocks"].append({
            "week_id": week_num,
            "start_date": week_start.strftime("%Y-%m-%d"),
            "end_date": week_end.strftime("%Y-%m-%d"),
            "calendar_week": week_start.isocalendar()[1]
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É 3_prepared
    prepared_dir = "/home/imort/Herzog_v3/projects/34975055/d19120ef/3_prepared"
    os.makedirs(prepared_dir, exist_ok=True)
    
    output_file = os.path.join(prepared_dir, "project_data.json")
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(project_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π project_data.json: {output_file}")
    return output_file

def test_group_creator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ group_creator"""
    project_dir = "/home/imort/Herzog_v3/projects/34975055/d19120ef"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ group_creator...")
    
    success = run_agent("group_creator", project_dir)
    
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_file = os.path.join(project_dir, "4.1_grouped", "project_data.json")
        if os.path.exists(result_file):
            with open(result_file, 'r', encoding='utf-8') as f:
                result_data = json.load(f)
            
            work_groups = result_data.get('work_groups', [])
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(work_groups)} –≥—Ä—É–ø–ø —Ä–∞–±–æ—Ç:")
            for group in work_groups:
                print(f"  - {group.get('name')} (UUID: {group.get('uuid', 'N/A')})")
        
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ group_creator")
        return False

def test_group_assigner():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ group_assigner"""
    project_dir = "/home/imort/Herzog_v3/projects/34975055/d19120ef"
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ group_assigner...")
    
    success = run_agent("group_assigner", project_dir)
    
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_file = os.path.join(project_dir, "4_conceptualized", "project_data.json")
        if os.path.exists(result_file):
            with open(result_file, 'r', encoding='utf-8') as f:
                result_data = json.load(f)
            
            work_items = result_data.get('work_items', [])
            assigned_works = [item for item in work_items 
                            if item.get('classification') == '–†–∞–±–æ—Ç–∞' and 'group_uuid' in item]
            
            print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω—ã –≥—Ä—É–ø–ø—ã –¥–ª—è {len(assigned_works)} —Ä–∞–±–æ—Ç")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ UUID –≥—Ä—É–ø–ø
            group_assignments = {}
            for work in assigned_works:
                group_uuid = work.get('group_uuid')
                if group_uuid not in group_assignments:
                    group_assignments[group_uuid] = []
                group_assignments[group_uuid].append(work.get('name', 'N/A'))
            
            print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º:")
            for group_uuid, works in group_assignments.items():
                print(f"  - {group_uuid[:8]}...: {len(works)} —Ä–∞–±–æ—Ç")
        
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ group_assigner")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        create_test_project_data()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        success1 = test_group_creator()
        
        if success1:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            success2 = test_group_assigner()
            
            if success2:
                print("\nüéâ –û–±–∞ –∞–≥–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —É—Å–ø–µ—à–Ω–æ!")
                return True
        
        print("\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Claude Sonnet 4 —á–µ—Ä–µ–∑ OpenRouter
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é Claude 4
"""

import asyncio
import logging
import os
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

async def test_claude_sonnet4():
    """–¢–µ—Å—Ç Claude Sonnet 4"""
    print("üß™ === –¢–ï–°–¢ CLAUDE SONNET 4 ===")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Claude 4
    os.environ['CLAUDE_TEST_MODE'] = 'false'

    try:
        from src.shared.claude_client import ClaudeClient
        client = ClaudeClient()

        print(f"‚úÖ ClaudeClient —Å–æ–∑–¥–∞–Ω")
        print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {client.test_mode}")
        print(f"üéØ –ú–æ–¥–µ–ª—å: {client.model_name}")

        # –¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏
        print("\n--- –¢–ï–°–¢: Claude Sonnet 4 –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å ---")
        simple_prompt = """
        –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {
            "model_test": "success",
            "model_name": "claude-sonnet-4"
        }
        """

        result = await client.generate_response(
            prompt=simple_prompt,
            agent_name="test_agent"
        )

        if result['success']:
            print("‚úÖ Claude Sonnet 4 –æ—Ç–≤–µ—á–∞–µ—Ç!")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result['model_used']}")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {result['usage_metadata']['total_token_count']}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('estimated_cost', 0):.4f}")
            print(f"üìù –û—Ç–≤–µ—Ç: {result['response']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = client.get_usage_stats()
            print(f"\nüìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
            print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_input_tokens']}")
            print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_output_tokens']}")
            print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${stats['estimated_cost']:.4f}")

            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return False

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    async def main():
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Claude Sonnet 4...")

        success = await test_claude_sonnet4()

        if success:
            print("\n‚úÖ CLAUDE SONNET 4 –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print("\n‚ùå CLAUDE SONNET 4 –ù–ï –î–û–°–¢–£–ü–ï–ù!")

    asyncio.run(main())
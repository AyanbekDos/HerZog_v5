#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ preparer.py
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ project_data.json –ø–æ–ø–∞–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã
"""

import json
import tempfile
import os
import sys
sys.path.append('/home/imort/Herzog_v3')

from src.data_processing.preparer import prepare_project_data

def test_preparer_filtering():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ project_data.json"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–∞–º–∏, –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ "–∏–Ω–æ–µ"
    test_classified_data = [
        {
            'internal_id': 'work-1',
            'classification': '–†–∞–±–æ—Ç–∞',
            'source_file': 'test.xlsx',
            'position_num': '1',
            'code': '–ì–≠–°–ù46-02-009-02',
            'name': '–û—Ç–±–∏–≤–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏',
            'unit': '100 –º2',
            'quantity': '7.77'
        },
        {
            'internal_id': 'material-1',
            'classification': '–ú–∞—Ç–µ—Ä–∏–∞–ª', 
            'source_file': 'test.xlsx',
            'position_num': '2',
            'code': '–§–°–ë–¶-14.4.01.02-0012',
            'name': '–°–º–µ—Å—å —Å—É—Ö–∞—è —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è',
            'unit': '–∫–≥',
            'quantity': '1000'
        },
        {
            'internal_id': 'work-2',
            'classification': '–†–∞–±–æ—Ç–∞',
            'source_file': 'test.xlsx', 
            'position_num': '3',
            'code': '–ì–≠–°–ù46-01-001-01',
            'name': '–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫',
            'unit': '100 –º2',
            'quantity': '5.5'
        },
        {
            'internal_id': 'other-1',
            'classification': '–ò–Ω–æ–µ',
            'source_file': 'test.xlsx',
            'position_num': '4', 
            'code': '–ù–†-001',
            'name': '–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
            'unit': '%',
            'quantity': '15'
        }
    ]
    
    test_directives = {
        'target_work_count': 15,
        'project_timeline': {
            'start_date': '01.01.2024',
            'end_date': '31.01.2024'
        },
        'workforce_range': {'min': 10, 'max': 20}
    }
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as f1:
        json.dump(test_classified_data, f1, ensure_ascii=False, indent=2)
        classified_file = f1.name
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as f2:
        json.dump(test_directives, f2, ensure_ascii=False, indent=2)
        directives_file = f2.name
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º preparer
        result = prepare_project_data(classified_file, directives_file)
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ–≥–æ: {len(test_classified_data)}")
        print(f"   - –†–∞–±–æ—Ç: {len([x for x in test_classified_data if x['classification'] == '–†–∞–±–æ—Ç–∞'])}")
        print(f"   - –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len([x for x in test_classified_data if x['classification'] == '–ú–∞—Ç–µ—Ä–∏–∞–ª'])}")
        print(f"   - –ò–Ω–æ–µ: {len([x for x in test_classified_data if x['classification'] == '–ò–Ω–æ–µ'])}")
        
        work_items = result.get('work_items', [])
        print(f"\nüéØ –í project_data.json –ø–æ–ø–∞–ª–æ –ø–æ–∑–∏—Ü–∏–π: {len(work_items)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ - —Ä–∞–±–æ—Ç—ã
        for i, item in enumerate(work_items):
            original = item.get('original_data', {})
            classification = original.get('classification')
            name = original.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"   {i+1}. {name} - {classification}")
            
            if classification != '–†–∞–±–æ—Ç–∞':
                print(f"‚ùå –û–®–ò–ë–ö–ê: –ø–æ–∑–∏—Ü–∏—è {i+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–π!")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
        meta = result.get('meta', {})
        total_work_items = meta.get('total_work_items', 0)
        
        print(f"\nüìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
        print(f"   total_work_items: {total_work_items}")
        print(f"   timeline_blocks: {meta.get('total_timeline_blocks', 0)}")
        
        if total_work_items == 2:  # –û–∂–∏–¥–∞–µ–º 2 —Ä–∞–±–æ—Ç—ã
            print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: –æ–∂–∏–¥–∞–ª–∏ 2 —Ä–∞–±–æ—Ç—ã, –ø–æ–ª—É—á–∏–ª–∏ {total_work_items}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
        
    finally:
        # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.unlink(classified_file)
            os.unlink(directives_file)
        except:
            pass

if __name__ == "__main__":
    success = test_preparer_filtering()
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("\nüí• –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π!")
        sys.exit(1)
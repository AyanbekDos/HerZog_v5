#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ work_packager –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Herzog
sys.path.append('/home/imort/Herzog_v3')

from src.ai_agents.work_packager import run_work_packager

async def test_fixed_work_packager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π work_packager"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ work_packager...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç 
    project_path = "/home/imort/Herzog_v3/projects/34975055/d490876a"
    
    if not os.path.exists(project_path):
        print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
        return False
    
    try:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ work_packager –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
        
        result = await run_work_packager(project_path)
        
        if result['success']:
            packages_created = result.get('packages_created', 0)
            print(f"‚úÖ Work_packager –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {packages_created}")
            
            # –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π true.json —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–∞–∫–µ—Ç—ã
            import json
            truth_path = os.path.join(project_path, "true.json")
            if os.path.exists(truth_path):
                with open(truth_path, 'r', encoding='utf-8') as f:
                    truth_data = json.load(f)
                
                work_packages = truth_data.get('results', {}).get('work_packages', [])
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ true.json: {len(work_packages)}")
                
                for pkg in work_packages[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   - {pkg.get('package_id')}: {pkg.get('name')}")
            
            return True
            
        else:
            print(f"‚ùå Work_packager –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_fixed_work_packager())
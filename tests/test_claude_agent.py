#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞ —Å Claude –≤–º–µ—Å—Ç–æ Gemini
–ë–µ—Ä–µ–º work_packager –∫–∞–∫ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –¥–ª—è –Ω–∞—á–∞–ª–∞
"""

import asyncio
import json
import logging
import os
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –Ω–∞–±–æ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
MINIMAL_TEST_DATA = {
    "meta": {
        "user_id": "test_user",
        "project_id": "test_project",
        "current_stage": "3_prepared"
    },
    "directives": {
        "target_package_count": 3,  # –û—á–µ–Ω—å –º–∞–ª–æ –ø–∞–∫–µ—Ç–æ–≤
        "project_timeline": {
            "start_date": "2024-01-01",
            "end_date": "2024-02-01",
            "total_weeks": 4
        },
        "workforce": {"min": 5, "max": 10, "average": 8},
        "special_instructions": {
            "work_packager": "–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ—Ö–æ–∂–∏–µ —Ä–∞–±–æ—Ç—ã"
        }
    },
    "work_items": [
        {
            "id": "work_001",
            "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 10.5,
            "unit_cost": 500.0,
            "total_cost": 5250.0,
            "category": "demolition"
        },
        {
            "id": "work_002",
            "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 25.0,
            "unit_cost": 800.0,
            "total_cost": 20000.0,
            "category": "finishing"
        },
        {
            "id": "work_003",
            "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 25.0,
            "unit_cost": 300.0,
            "total_cost": 7500.0,
            "category": "finishing"
        }
    ]
}

async def test_work_packager_with_claude():
    """–¢–µ—Å—Ç work_packager –∞–≥–µ–Ω—Ç–∞ —Å Claude API"""
    print("üß™ === –¢–ï–°–¢ WORK PACKAGER –° CLAUDE ===")

    # –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
    os.environ['CLAUDE_TEST_MODE'] = 'true'

    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π work_packager, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Claude
        from src.shared.claude_client import ClaudeClient

        # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è work_packager
        prompt_path = "src/prompts/work_packager_prompt.txt"
        if not os.path.exists(prompt_path):
            print(f"‚ùå –ü—Ä–æ–º—Ç —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}")
            return False

        with open(prompt_path, 'r', encoding='utf-8') as f:
            system_instruction = f.read()

        print(f"‚úÖ –ü—Ä–æ–º—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        client = ClaudeClient()
        test_data_json = json.dumps(MINIMAL_TEST_DATA, ensure_ascii=False, indent=2)

        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {len(test_data_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìä –†–∞–±–æ—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {len(MINIMAL_TEST_DATA['work_items'])}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        user_prompt = f"""
–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç –≤ –ø–∞–∫–µ—Ç—ã:

{test_data_json}

–°–≥—Ä—É–ø–ø–∏—Ä—É–π —Ä–∞–±–æ—Ç—ã –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
"""

        print(f"\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude...")
        print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {client.test_mode}")
        print(f"üéØ –ú–æ–¥–µ–ª—å: {client.model_name}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await client.generate_response(
            prompt=user_prompt,
            agent_name="work_packager",
            system_instruction=system_instruction,
            max_retries=3
        )

        if result['success']:
            print("\n‚úÖ Work Packager —Å Claude —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result['model_used']}")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {result['usage_metadata']['total_token_count']}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('estimated_cost', 0):.4f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            response = result['response']
            if isinstance(response, dict) and 'packages' in response:
                packages = response['packages']
                print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {len(packages)}")

                for i, pkg in enumerate(packages[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    print(f"   {i}. {pkg.get('name', 'Unnamed')} ({pkg.get('category', 'No category')})")

                print(f"\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
                print(json.dumps(response, ensure_ascii=False, indent=2)[:500] + "...")

            else:
                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {type(response)}")
                print(f"üìã –û—Ç–≤–µ—Ç: {str(response)[:200]}...")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = client.get_usage_stats()
            print(f"\nüìà === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
            print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_input_tokens']}")
            print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_output_tokens']}")
            print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${stats['estimated_cost']:.4f}")

            return True

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ work_packager: {result['error']}")
            if 'raw_text' in result and result['raw_text']:
                print(f"üìã –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {result['raw_text'][:300]}...")
            return False

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def compare_with_gemini():
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏–º —Å Gemini –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã"""
    print("\nüîÑ === –°–†–ê–í–ù–ï–ù–ò–ï –° GEMINI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===")

    try:
        from src.ai_agents.work_packager import run_work_packager
        import tempfile
        import os

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
            json.dump(MINIMAL_TEST_DATA, f, ensure_ascii=False, indent=2)
            temp_file = f.name

        print(f"üìÑ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏: {temp_file}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π work_packager —Å Gemini
        print("üîÑ –ó–∞–ø—É—Å–∫ Gemini work_packager...")
        gemini_result = await run_work_packager(temp_file)

        if gemini_result and gemini_result.get('success'):
            print("‚úÖ Gemini work_packager —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {len(gemini_result.get('result', {}).get('packages', []))}")
        else:
            print("‚ùå Gemini work_packager –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏")
            if gemini_result:
                print(f"–û—à–∏–±–∫–∞: {gemini_result.get('error', 'Unknown')}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file)

    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Å Gemini: {e}")

if __name__ == "__main__":
    async def main():
        print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∞–≥–µ–Ω—Ç —Å Claude...")

        success = await test_work_packager_with_claude()

        if success:
            print("\n‚úÖ –ê–ì–ï–ù–¢ –° CLAUDE –†–ê–ë–û–¢–ê–ï–¢!")
            # await compare_with_gemini()  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        else:
            print("\n‚ùå –ê–ì–ï–ù–¢ –° CLAUDE –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")

        print(f"\nüí° –ì–æ—Ç–æ–≤–æ! –ê–≥–µ–Ω—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

    asyncio.run(main())
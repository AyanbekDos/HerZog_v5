#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 4 AI –∞–≥–µ–Ω—Ç–æ–≤ —Å Claude API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import json
import logging
import os
import tempfile
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_DATA = {
    "meta": {
        "user_id": "test_user",
        "project_id": "test_claude_agents",
        "current_stage": "3_prepared"
    },
    "directives": {
        "target_package_count": 3,
        "project_timeline": {
            "start_date": "2024-01-01",
            "end_date": "2024-02-01",
            "total_weeks": 4
        },
        "workforce": {"min": 5, "max": 10, "average": 8},
        "special_instructions": {
            "work_packager": "—Å–æ–∑–¥–∞–π 3 –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç",
            "counter": "—Å—á–∏—Ç–∞–π –æ–±—ä–µ–º—ã —Ç–æ—á–Ω–æ",
            "scheduler": "—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –ø–æ –Ω–µ–¥–µ–ª—è–º"
        }
    },
    "timeline_blocks": [
        {"week_id": 1, "start_date": "2024-01-01", "end_date": "2024-01-07", "days_count": 7},
        {"week_id": 2, "start_date": "2024-01-08", "end_date": "2024-01-14", "days_count": 7},
        {"week_id": 3, "start_date": "2024-01-15", "end_date": "2024-01-21", "days_count": 7},
        {"week_id": 4, "start_date": "2024-01-22", "end_date": "2024-01-28", "days_count": 7}
    ],
    "work_items": [
        {
            "id": "work_001",
            "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 20.0,
            "unit_cost": 500.0,
            "total_cost": 10000.0,
            "category": "demolition"
        },
        {
            "id": "work_002",
            "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 40.0,
            "unit_cost": 800.0,
            "total_cost": 32000.0,
            "category": "finishing"
        },
        {
            "id": "work_003",
            "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 40.0,
            "unit_cost": 300.0,
            "total_cost": 12000.0,
            "category": "finishing"
        }
    ]
}

async def test_agent(agent_name, agent_function, input_file, test_number):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    print(f"\nüéØ === –¢–ï–°–¢ {test_number}: {agent_name.upper()} ===")

    try:
        start_time = asyncio.get_event_loop().time()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
        result = await agent_function(input_file)

        end_time = asyncio.get_event_loop().time()
        duration = end_time - start_time

        if result and result.get('success'):
            print(f"‚úÖ {agent_name} —É—Å–ø–µ—à–µ–Ω!")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if 'result' in result and result['result']:
                data = result['result']
                if isinstance(data, dict):
                    if 'packages' in data:
                        print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {len(data['packages'])}")
                    if 'work_items' in data:
                        print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–±–æ—Ç: {len(data['work_items'])}")
                    if 'timeline_blocks' in data:
                        print(f"üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {len(data['timeline_blocks'])}")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Claude
            try:
                from src.shared.claude_client import claude_client
                stats = claude_client.get_usage_stats()
                print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å Claude: ~${stats['estimated_cost']:.4f}")
                print(f"üìä –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_input_tokens'] + stats['total_output_tokens']}")
            except:
                pass

            return True, result.get('result')

        else:
            error = result.get('error', 'Unknown error') if result else 'No result'
            print(f"‚ùå {agent_name} –æ—à–∏–±–∫–∞: {error}")
            return False, None

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {agent_name}: {e}")
        import traceback
        traceback.print_exc()
        return False, None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∞–≥–µ–Ω—Ç—ã"""
    print("üöÄ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• CLAUDE –ê–ì–ï–ù–¢–û–í ===")
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {os.getenv('CLAUDE_TEST_MODE', 'true')}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Claude
    try:
        from src.shared.claude_client import claude_client
        claude_client.reset_usage_stats()
    except:
        pass

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    temp_dir = tempfile.mkdtemp(prefix="claude_test_")
    temp_file = os.path.join(temp_dir, "truth.json")

    try:
        with open(temp_file, 'w', encoding='utf-8') as f:
            json.dump(TEST_DATA, f, ensure_ascii=False, indent=2)

        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {temp_file}")

        # –¢–µ—Å—Ç 1: Work Packager
        try:
            from src.ai_agents.work_packager import run_work_packager
            success1, result1 = await test_agent("work_packager", run_work_packager, temp_file, 1)
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å work_packager: {e}")
            success1 = False

        if not success1:
            print("\n‚ùå –¢–ï–°–¢–´ –û–°–¢–ê–ù–û–í–õ–ï–ù–´ –ù–ê WORK PACKAGER")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        stage4_file = os.path.join(temp_dir, "stage4_packaged.json")
        with open(stage4_file, 'w', encoding='utf-8') as f:
            json.dump(result1, f, ensure_ascii=False, indent=2)

        # –¢–µ—Å—Ç 2: Works to Packages
        try:
            from src.ai_agents.works_to_packages import run_works_to_packages
            success2, result2 = await test_agent("works_to_packages", run_works_to_packages, stage4_file, 2)
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å works_to_packages: {e}")
            success2 = False

        if not success2:
            print("\n‚ùå –¢–ï–°–¢–´ –û–°–¢–ê–ù–û–í–õ–ï–ù–´ –ù–ê WORKS TO PACKAGES")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        stage5_file = os.path.join(temp_dir, "stage5_works2packages.json")
        with open(stage5_file, 'w', encoding='utf-8') as f:
            json.dump(result2, f, ensure_ascii=False, indent=2)

        # –¢–µ—Å—Ç 3: Counter
        try:
            from src.ai_agents.counter import run_counter
            success3, result3 = await test_agent("counter", run_counter, stage5_file, 3)
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å counter: {e}")
            success3 = False

        if not success3:
            print("\n‚ùå –¢–ï–°–¢–´ –û–°–¢–ê–ù–û–í–õ–ï–ù–´ –ù–ê COUNTER")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        stage6_file = os.path.join(temp_dir, "stage6_counted.json")
        with open(stage6_file, 'w', encoding='utf-8') as f:
            json.dump(result3, f, ensure_ascii=False, indent=2)

        # –¢–µ—Å—Ç 4: Scheduler and Staffer
        try:
            from src.ai_agents.scheduler_and_staffer import run_scheduler_and_staffer
            success4, result4 = await test_agent("scheduler_and_staffer", run_scheduler_and_staffer, stage6_file, 4)
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å scheduler_and_staffer: {e}")
            success4 = False

        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüéØ === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")

        total_tests = 4
        passed_tests = sum([success1, success2, success3, success4])

        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")

        if passed_tests == total_tests:
            print("üéâ –í–°–ï –ê–ì–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –° CLAUDE!")
        else:
            print("‚ö†Ô∏è  –ù–ï –í–°–ï –ê–ì–ï–ù–¢–´ –ü–†–û–®–õ–ò –¢–ï–°–¢")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Claude
        try:
            from src.shared.claude_client import claude_client
            stats = claude_client.get_usage_stats()
            print(f"\nüí∞ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê CLAUDE ===")
            print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
            print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_input_tokens']}")
            print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_output_tokens']}")
            print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${stats['estimated_cost']:.4f}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Claude: {e}")

        if success4 and result4:
            print(f"\nüìã === –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
            final_file = os.path.join(temp_dir, "final_result.json")
            with open(final_file, 'w', encoding='utf-8') as f:
                json.dump(result4, f, ensure_ascii=False, indent=2)
            print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {final_file}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä
            if isinstance(result4, dict):
                if 'packages' in result4:
                    packages = result4['packages']
                    print(f"üì¶ –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {len(packages)}")
                    if packages:
                        print(f"üìã –ü–µ—Ä–≤—ã–π –ø–∞–∫–µ—Ç: {packages[0].get('name', 'Unnamed')}")

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        import shutil
        try:
            shutil.rmtree(temp_dir)
            print(f"\nüßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: {temp_dir}")
        except:
            print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å: {temp_dir}")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    os.environ['CLAUDE_TEST_MODE'] = 'true'

    asyncio.run(main())
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ counter.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç
"""

import json
import os
import sys
import asyncio
import tempfile
import shutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.ai_agents.counter import WorkVolumeCalculator
from tests.mock_gemini_client import mock_gemini_client

# –ü–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π gemini_client –Ω–∞ –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import src.ai_agents.counter
src.ai_agents.counter.gemini_client = mock_gemini_client

class TestCounter:
    
    def __init__(self):
        self.test_project_path = None
    
    def setup_test_project(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å mock –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_project_path = tempfile.mkdtemp(prefix='test_herzog_')
        
        # –°–æ–∑–¥–∞–µ–º mock true.json —Å –ø–∞–∫–µ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
        mock_truth_data = {
            "metadata": {
                "project_id": "test_project",
                "project_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
                "pipeline_status": [
                    {"agent_name": "work_packager", "status": "completed"},
                    {"agent_name": "works_to_packages", "status": "completed"},
                    {"agent_name": "counter", "status": "pending"}
                ]
            },
            "project_inputs": {
                "target_work_package_count": 6,
                "agent_directives": {
                    "accountant": "–ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª–æ–≤ —Å—á–∏—Ç–∞–π —Ç–æ–ª—å–∫–æ –ø–ª–æ—â–∞–¥—å"
                }
            },
            "source_work_items": [
                {
                    "id": "work_001",
                    "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫ –∫–∏—Ä–ø–∏—á–Ω—ã—Ö",
                    "code": "08.01.001",
                    "unit": "–º¬≤",
                    "quantity": 80.5,
                    "package_id": "pkg_001"
                },
                {
                    "id": "work_002",
                    "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ–ª–∞ –ª–∏–Ω–æ–ª–µ—É–º",
                    "code": "08.02.015",
                    "unit": "–º¬≤",
                    "quantity": 120.0,
                    "package_id": "pkg_001"
                },
                {
                    "id": "work_003",
                    "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è –í–í–ì 3—Ö2.5",
                    "code": "19.03.012",
                    "unit": "–º",
                    "quantity": 250.0,
                    "package_id": "pkg_002"
                },
                {
                    "id": "work_004",
                    "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö",
                    "code": "19.05.001",
                    "unit": "—à—Ç",
                    "quantity": 12.0,
                    "package_id": "pkg_002"
                },
                {
                    "id": "work_005",
                    "name": "–ú–æ–Ω—Ç–∞–∂ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π",
                    "code": "19.05.003",
                    "unit": "—à—Ç",
                    "quantity": 8.0,
                    "package_id": "pkg_002"
                },
                {
                    "id": "work_006",
                    "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω —Ü–µ–º–µ–Ω—Ç–Ω—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º",
                    "code": "15.01.001",
                    "unit": "–º¬≤",
                    "quantity": 180.0,
                    "package_id": "pkg_003"
                },
                {
                    "id": "work_007",
                    "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–æ–π –∫—Ä–∞—Å–∫–æ–π",
                    "code": "15.06.001",
                    "unit": "–º¬≤",
                    "quantity": 175.0,
                    "package_id": "pkg_003"
                },
                {
                    "id": "work_008",
                    "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ç—è–∂–∫–∏ —Ü–µ–º–µ–Ω—Ç–Ω–æ–π",
                    "code": "11.01.001",
                    "unit": "–º¬≤",
                    "quantity": 95.0,
                    "package_id": "pkg_004"
                },
                {
                    "id": "work_009",
                    "name": "–£–∫–ª–∞–¥–∫–∞ –ª–∞–º–∏–Ω–∞—Ç–∞",
                    "code": "11.04.001",
                    "unit": "–º¬≤",
                    "quantity": 90.0,
                    "package_id": "pkg_004"
                }
            ],
            "results": {
                "work_packages": [
                    {
                        "package_id": "pkg_001",
                        "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                        "description": "–°–Ω–æ—Å –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫, –¥–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏–π –ø–æ–ª–∞ –∏ –ø–æ—Ç–æ–ª–∫–∞"
                    },
                    {
                        "package_id": "pkg_002",
                        "name": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                        "description": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ –∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π"
                    },
                    {
                        "package_id": "pkg_003",
                        "name": "–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å—Ç–µ–Ω",
                        "description": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ –∏ –ø–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –ø–æ–º–µ—â–µ–Ω–∏–π"
                    },
                    {
                        "package_id": "pkg_004",
                        "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª–æ–≤",
                        "description": "–°—Ç—è–∂–∫–∞ –∏ —É–∫–ª–∞–¥–∫–∞ –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π"
                    }
                ]
            }
        }
        
        truth_path = os.path.join(self.test_project_path, "true.json")
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(mock_truth_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
        return self.test_project_path
    
    async def test_counter_full_process(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤"""
        
        print("üß™ === –¢–ï–°–¢ COUNTER –ü–û–õ–ù–´–ô –ü–†–û–¶–ï–°–° ===")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project_path = self.setup_test_project()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = WorkVolumeCalculator()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ counter...")
            result = await agent.process(project_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                print("‚úÖ –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {result.get('packages_calculated', 0)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π true.json
                truth_path = os.path.join(project_path, "true.json")
                with open(truth_path, 'r', encoding='utf-8') as f:
                    updated_truth = json.load(f)
                
                work_packages = updated_truth.get('results', {}).get('work_packages', [])
                
                print(f"üìã –†–∞—Å—á–µ—Ç—ã –æ–±—ä–µ–º–æ–≤ –ø–æ –ø–∞–∫–µ—Ç–∞–º:")
                for pkg in work_packages:
                    calculations = pkg.get('calculations', {})
                    unit = calculations.get('unit', '–Ω/–¥')
                    quantity = calculations.get('quantity', 0)
                    logic = calculations.get('calculation_logic', '–Ω/–¥')
                    
                    print(f"  {pkg['package_id']}: {pkg['name']}")
                    print(f"    –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–º: {quantity} {unit}")
                    print(f"    –õ–æ–≥–∏–∫–∞: {logic[:60]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∞–≥–µ–Ω—Ç–∞
                agent_folder = os.path.join(project_path, "6_counter")
                if os.path.exists(agent_folder):
                    files = os.listdir(agent_folder)
                    pkg_files = [f for f in files if f.startswith('pkg_')]
                    print(f"üìÅ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –ø–∞–∫–µ—Ç–æ–≤: {len(pkg_files)} —Ñ–∞–π–ª–æ–≤")
                
                # –ë–∞–∑–æ–≤—ã–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                assert len(work_packages) == 4, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
                
                for pkg in work_packages:
                    assert 'calculations' in pkg, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—á–µ—Ç–æ–≤"
                    calc = pkg['calculations']
                    assert 'unit' in calc, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –Ω–µ –∏–º–µ–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"
                    assert 'quantity' in calc, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
                    assert calc['quantity'] > 0, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                volume_stats = updated_truth.get('results', {}).get('volume_calculations', {})
                assert 'packages_calculated' in volume_stats, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤"
                
                print("‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
                return True
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {result.get('error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
        
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
                print(f"üßπ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
    
    async def test_data_grouping(self):
        """–¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç –ø–æ –ø–∞–∫–µ—Ç–∞–º"""
        
        print("üß™ === –¢–ï–°–¢ –ì–†–£–ü–ü–ò–†–û–í–ö–ò –î–ê–ù–ù–´–• ===")
        
        project_path = self.setup_test_project()
        
        try:
            agent = WorkVolumeCalculator()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º true.json
            truth_path = os.path.join(project_path, "true.json")
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            work_packages = truth_data.get('results', {}).get('work_packages', [])
            source_work_items = truth_data.get('source_work_items', [])
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
            packages_with_works = agent._group_works_by_packages(work_packages, source_work_items)
            
            print("üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç –ø–æ –ø–∞–∫–µ—Ç–∞–º:")
            for pkg_data in packages_with_works:
                pkg = pkg_data['package']
                works = pkg_data['works']
                print(f"  {pkg['package_id']}: {len(works)} —Ä–∞–±–æ—Ç")
                for work in works:
                    print(f"    - {work['name'][:40]}... ({work['quantity']} {work['unit']})")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏–∏
            assert len(packages_with_works) == 4, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã
            total_works = sum(len(pkg_data['works']) for pkg_data in packages_with_works)
            assert total_works == 9, "–ù–µ –≤—Å–µ —Ä–∞–±–æ—Ç—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç—ã –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            for pkg_data in packages_with_works:
                for work in pkg_data['works']:
                    assert 'id' in work, "–†–∞–±–æ—Ç–∞ –Ω–µ –∏–º–µ–µ—Ç id"
                    assert 'unit' in work, "–†–∞–±–æ—Ç–∞ –Ω–µ –∏–º–µ–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"
                    assert 'quantity' in work, "–†–∞–±–æ—Ç–∞ –Ω–µ –∏–º–µ–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
            
            print("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
    
    async def test_fallback_calculation(self):
        """–¢–µ—Å—Ç fallback —Ä–∞—Å—á–µ—Ç–æ–≤"""
        
        print("üß™ === –¢–ï–°–¢ FALLBACK –†–ê–°–ß–ï–¢–û–í ===")
        
        project_path = self.setup_test_project()
        
        try:
            agent = WorkVolumeCalculator()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback —Ä–∞—Å—á–µ—Ç
            test_package = {
                "package_id": "pkg_test",
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç"
            }
            
            test_works = [
                {"name": "–†–∞–±–æ—Ç–∞ 1", "unit": "–º¬≤", "quantity": 100.0},
                {"name": "–†–∞–±–æ—Ç–∞ 2", "unit": "–º¬≤", "quantity": 150.0},
                {"name": "–†–∞–±–æ—Ç–∞ 3", "unit": "—à—Ç", "quantity": 5.0}
            ]
            
            result = agent._create_fallback_calculation(test_package, test_works)
            
            print(f"üìä Fallback —Ä–∞—Å—á–µ—Ç:")
            calc = result.get('calculations', {})
            print(f"  –ï–¥–∏–Ω–∏—Ü–∞: {calc.get('unit')}")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {calc.get('quantity')}")
            print(f"  –õ–æ–≥–∏–∫–∞: {calc.get('calculation_logic')}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏–∏
            assert 'calculations' in result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—á–µ—Ç—ã"
            assert calc.get('unit') == '–º¬≤', "–ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ fallback"
            assert calc.get('quantity') == 150.0, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ fallback (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º)"
            
            print("‚úÖ Fallback —Ä–∞—Å—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        
        print("üß™ === –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===")
        
        project_path = self.setup_test_project()
        
        try:
            # –£–¥–∞–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ —É —Ä–∞–±–æ—Ç
            truth_path = os.path.join(project_path, "true.json")
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –£–±–∏—Ä–∞–µ–º package_id —É –≤—Å–µ—Ö —Ä–∞–±–æ—Ç
            for work in truth_data['source_work_items']:
                if 'package_id' in work:
                    del work['package_id']
            
            with open(truth_path, 'w', encoding='utf-8') as f:
                json.dump(truth_data, f, ensure_ascii=False, indent=2)
            
            agent = WorkVolumeCalculator()
            
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –∫ –ø–∞–∫–µ—Ç–∞–º...")
            result = await agent.process(project_path)
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
            if not result.get('success'):
                print(f"‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result.get('error')}")
                assert "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫ –ø–∞–∫–µ—Ç–∞–º" in result.get('error', ''), "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
                return True
            else:
                print("‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                return False
                
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ counter.py")
    print("=" * 50)
    
    tester = TestCounter()
    
    tests = [
        ("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–∞–∫–µ—Ç–∞–º", tester.test_data_grouping),
        ("Fallback —Ä–∞—Å—á–µ—Ç—ã", tester.test_fallback_calculation),
        ("–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤", tester.test_counter_full_process),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", tester.test_error_handling)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        
        try:
            success = await test_func()
            results.append((test_name, success))
            
            if success:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã!")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_all_tests())
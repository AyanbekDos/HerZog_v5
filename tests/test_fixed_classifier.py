#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Gemini
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/home/imort/Herzog_v3')

from src.data_processing.classifier import classify_estimates

def test_classifier():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏  
    input_file = "/home/imort/Herzog_v3/projects/34975055/d19120ef/1_extracted/raw_estimates.json"
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    
    try:
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        classified_data = classify_estimates(input_file)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        classifications = [item['classification'] for item in classified_data]
        work_count = classifications.count('–†–∞–±–æ—Ç–∞')
        material_count = classifications.count('–ú–∞—Ç–µ—Ä–∏–∞–ª')
        other_count = classifications.count('–ò–Ω–æ–µ')
        unknown_count = classifications.count('–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ')
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(f"  –†–∞–±–æ—Ç: {work_count}")
        print(f"  –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {material_count}")
        print(f"  –ò–Ω–æ–µ: {other_count}")
        print(f"  –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö: {unknown_count}")
        print(f"  –í—Å–µ–≥–æ: {len(classified_data)}")
        
        if unknown_count == 0:
            print("‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {unknown_count} –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ llm —Ñ–∞–π–ª—ã
        project_dir = "/home/imort/Herzog_v3/projects/34975055/d19120ef"
        llm_input_path = f"{project_dir}/2_classified/llm_input.json"
        llm_response_path = f"{project_dir}/2_classified/llm_response.json"
        
        if os.path.exists(llm_input_path):
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω llm_input.json")
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω llm_input.json")
            
        if os.path.exists(llm_response_path):
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω llm_response.json")
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω llm_response.json")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_classifier()
    sys.exit(0 if success else 1)
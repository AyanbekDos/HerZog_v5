#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Herzog
sys.path.append('/home/imort/Herzog_v3')

from src.shared.gemini_client import gemini_client

async def test_multi_model_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Gemini...")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤:")
    for agent, model in gemini_client.agent_models.items():
        print(f"   {agent}: {model}")
    
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç
    test_prompt = '''
{
    "test": "multi_model",
    "agent": "current_agent",
    "message": "–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
}
'''

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    agents_to_test = ['work_packager', 'works_to_packages', 'counter', 'scheduler_and_staffer']
    
    for agent_name in agents_to_test:
        try:
            print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞: {agent_name}")
            
            result = await gemini_client.generate_response(
                test_prompt, 
                agent_name=agent_name
            )
            
            if result['success']:
                model_used = result.get('model_used', 'unknown')
                tokens = result['usage_metadata']['total_token_count']
                attempt = result.get('attempt', 1)
                
                print(f"   ‚úÖ –£—Å–ø–µ—Ö: {model_used} | –¢–æ–∫–µ–Ω–æ–≤: {tokens} | –ü–æ–ø—ã—Ç–∫–∞: {attempt}")
                
                if result['json_parse_success']:
                    response = result['response']
                    print(f"   üí¨ –û—Ç–≤–µ—Ç: {response.get('message', '–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                else:
                    print(f"   ‚ö†Ô∏è  JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {result['raw_text'][:100]}...")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∞–≥–µ–Ω—Ç–∞)
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞)...")
    try:
        result = await gemini_client.generate_response(test_prompt)
        
        if result['success']:
            model_used = result.get('model_used', 'unknown')
            tokens = result['usage_metadata']['total_token_count']
            
            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {model_used} | –¢–æ–∫–µ–Ω–æ–≤: {tokens}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            
    except Exception as e:
        print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_multi_model_system())
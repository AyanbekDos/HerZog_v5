#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π GeminiClient
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
1. –û–±—Ä–∞–±–æ—Ç–∫–∞ JSONDecodeError –∫–∞–∫ retry
2. –§—É–Ω–∫—Ü–∏—è _add_salt_to_prompt
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç API
"""

import asyncio
import json
import logging

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
import sys
import os
sys.path.insert(0, '/home/imort/Herzog_v3')

from src.shared.gemini_client import GeminiClient

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_salt_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–ª–∏ –∫ –ø—Ä–æ–º–ø—Ç—É"""
    print("\nüß™ –¢–ï–°–¢ 1: –§—É–Ω–∫—Ü–∏—è _add_salt_to_prompt")

    client = GeminiClient()

    original_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"

    # –ü–æ–ø—ã—Ç–∫–∞ 1 - –±–µ–∑ —Å–æ–ª–∏
    salted_1 = client._add_salt_to_prompt(original_prompt, 1)
    assert salted_1 == original_prompt, "–ù–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–æ–ª—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è"
    print("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ 1: —Å–æ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")

    # –ü–æ–ø—ã—Ç–∫–∞ 2 - —Å —Å–æ–ª—å—é
    salted_2 = client._add_salt_to_prompt(original_prompt, 2)
    assert "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞:" in salted_2, "–ù–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–ª—å"
    assert "HRZ-" in salted_2, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞"
    assert original_prompt in salted_2, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
    print("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ 2: —Å–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    print(f"üìè –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(original_prompt)} ‚Üí {len(salted_2)} (+{len(salted_2) - len(original_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")

async def test_json_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π JSON –∑–∞–ø—Ä–æ—Å"""
    print("\nüß™ –¢–ï–°–¢ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –æ—Ç–≤–µ—Ç–∞")

    client = GeminiClient()

    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å —á–µ—Ç–∫–∏–º JSON
    prompt = """
–î–∞–π –º–Ω–µ –ø—Ä–æ—Å—Ç–æ–π JSON –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–æ–π–∫–µ:

{
    "project": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–π–∫–∞",
    "status": "active",
    "days": 30
}

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û —ç—Ç–∏–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""

    try:
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini...")
        response = await client.generate_response(prompt, max_retries=3)

        if response.get('success'):
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {response.get('model_used')}")
            print(f"üî¢ –ü–æ–ø—ã—Ç–æ–∫: {response.get('attempt')}")
            print(f"üìä –¢–æ–∫–µ–Ω–æ–≤: {response.get('usage_metadata', {}).get('total_token_count', 0)}")

            if response.get('json_parse_success'):
                print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                parsed_json = response.get('response')
                print(f"üìã –û—Ç–≤–µ—Ç: {json.dumps(parsed_json, ensure_ascii=False, indent=2)}")
            else:
                print("‚ùå JSON –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å")
                print(f"üóíÔ∏è –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç: {response.get('raw_text', '')[:200]}...")
        else:
            print(f"‚ùå –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {response.get('error')}")

    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô GEMINI CLIENT")
    print("=" * 50)

    try:
        await test_salt_function()
        await test_json_validation()

        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")

    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
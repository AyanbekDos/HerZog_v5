#!/usr/bin/env python3
"""
–†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –∞–≥–µ–Ω—Ç–∞ work_packager.py —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ Gemini API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç
"""

import json
import os
import sys
import asyncio
import tempfile
import shutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from src.ai_agents.work_packager import WorkPackager

class TestRealWorkPackager:
    
    def __init__(self):
        self.test_project_path = None
    
    def setup_real_test_project(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_project_path = tempfile.mkdtemp(prefix='test_real_herzog_')
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏–∑ —Å–º–µ—Ç—ã
        real_work_items = [
            # –î–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            {"id": "work_001", "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫ –∏–∑ –∫–∏—Ä–ø–∏—á–∞", "code": "08.01.001"},
            {"id": "work_002", "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ–ª–∞ –ª–∏–Ω–æ–ª–µ—É–º", "code": "08.02.015"}, 
            {"id": "work_003", "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–¥–≤–µ—Å–Ω–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞ –ê—Ä–º—Å—Ç—Ä–æ–Ω–≥", "code": "08.03.001"},
            {"id": "work_004", "name": "–û—á–∏—Å—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –æ—Ç –æ–±–æ–µ–≤", "code": "08.04.001"},
            {"id": "work_005", "name": "–í—ã–≤–æ–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞", "code": "08.99.001"},
            
            # –≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            {"id": "work_006", "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è –í–í–ì 3—Ö2.5 —Å–∫—Ä—ã—Ç–æ", "code": "19.03.012"},
            {"id": "work_007", "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ —Å–∫—Ä—ã—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "code": "19.05.001"},
            {"id": "work_008", "name": "–ú–æ–Ω—Ç–∞–∂ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–∫–ª–∞–≤–∏—à–Ω—ã—Ö", "code": "19.05.003"},
            {"id": "work_009", "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –ø–æ—Ç–æ–ª–æ—á–Ω—ã—Ö", "code": "19.06.001"},
            {"id": "work_010", "name": "–ú–æ–Ω—Ç–∞–∂ —ç–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–∫–∞ –Ω–∞ 12 –º–æ–¥—É–ª–µ–π", "code": "19.07.001"},
            {"id": "work_011", "name": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—É—Å–∫–æ–Ω–∞–ª–∞–¥–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "code": "19.08.001"},
            
            # –°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã  
            {"id": "work_012", "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Ç—Ä—É–± –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞ –ü–ù–î 25–º–º", "code": "18.01.001"},
            {"id": "work_013", "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Ç—Ä—É–± –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ü–í–• 110–º–º", "code": "18.02.001"},
            {"id": "work_014", "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—Å–∏—Ç–µ–ª—è –¥–ª—è —Ä–∞–∫–æ–≤–∏–Ω—ã", "code": "18.03.001"},
            {"id": "work_015", "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏—Ç–∞–∑–∞ –Ω–∞–ø–æ–ª—å–Ω–æ–≥–æ", "code": "18.04.001"},
            {"id": "work_016", "name": "–ú–æ–Ω—Ç–∞–∂ —Ä–∞–∫–æ–≤–∏–Ω—ã —Å –ø—å–µ–¥–µ—Å—Ç–∞–ª–æ–º", "code": "18.05.001"},
            
            # –û–±—â–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            {"id": "work_017", "name": "–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫ –∏–∑ –ø–µ–Ω–æ–±–ª–æ–∫–æ–≤", "code": "07.01.001"},
            {"id": "work_018", "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–≤–µ—Ä–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤", "code": "07.02.001"},
            {"id": "work_019", "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–µ—Ä–Ω—ã—Ö –±–ª–æ–∫–æ–≤", "code": "10.01.001"},
            {"id": "work_020", "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤", "code": "10.02.001"},
            
            # –û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            {"id": "work_021", "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω —Ü–µ–º–µ–Ω—Ç–Ω–æ-–ø–µ—Å—á–∞–Ω—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º", "code": "15.01.001"},
            {"id": "work_022", "name": "–®–ø–∞–∫–ª–µ–≤–∫–∞ —Å—Ç–µ–Ω —Ñ–∏–Ω–∏—à–Ω–∞—è", "code": "15.02.001"},
            {"id": "work_023", "name": "–ì—Ä—É–Ω—Ç–æ–≤–∫–∞ —Å—Ç–µ–Ω –≥–ª—É–±–æ–∫–æ–≥–æ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è", "code": "15.03.001"},
            {"id": "work_024", "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–æ–π –∫—Ä–∞—Å–∫–æ–π", "code": "15.06.001"},
            {"id": "work_025", "name": "–ü–æ–∫–ª–µ–π–∫–∞ –æ–±–æ–µ–≤ –≤–∏–Ω–∏–ª–æ–≤—ã—Ö", "code": "15.05.001"},
            
            # –†–∞–±–æ—Ç—ã –ø–æ –ø–æ–ª–∞–º
            {"id": "work_026", "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ç—è–∂–∫–∏ –ø–æ–ª–∞ —Ü–µ–º–µ–Ω—Ç–Ω–æ–π", "code": "11.01.001"},
            {"id": "work_027", "name": "–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è –ø–æ–ª–∞ —Ä—É–ª–æ–Ω–Ω–∞—è", "code": "11.02.001"},
            {"id": "work_028", "name": "–£–∫–ª–∞–¥–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–π –ø–ª–∏—Ç–∫–∏ –Ω–∞ –ø–æ–ª", "code": "11.03.001"},
            {"id": "work_029", "name": "–£–∫–ª–∞–¥–∫–∞ –ª–∞–º–∏–Ω–∞—Ç–∞ 32 –∫–ª–∞—Å—Å", "code": "11.04.001"},
            {"id": "work_030", "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∏–Ω—Ç—É—Å–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–≥–æ", "code": "11.05.001"},
            
            # –†–∞–±–æ—Ç—ã –ø–æ –ø–æ—Ç–æ–ª–∫–∞–º
            {"id": "work_031", "name": "–ú–æ–Ω—Ç–∞–∂ –∫–∞—Ä–∫–∞—Å–∞ –ø–æ–¥–≤–µ—Å–Ω–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞", "code": "15.07.001"},
            {"id": "work_032", "name": "–û–±—à–∏–≤–∫–∞ –ø–æ—Ç–æ–ª–∫–∞ –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–æ–º", "code": "15.07.002"},
            {"id": "work_033", "name": "–ó–∞–¥–µ–ª–∫–∞ —à–≤–æ–≤ –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–∞", "code": "15.07.003"},
            {"id": "work_034", "name": "–®–ø–∞–∫–ª–µ–≤–∫–∞ –ø–æ—Ç–æ–ª–∫–∞", "code": "15.07.004"},
            {"id": "work_035", "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ –ø–æ—Ç–æ–ª–∫–∞", "code": "15.07.005"},
            
            # –ü—Ä–æ—á–∏–µ —Ä–∞–±–æ—Ç—ã
            {"id": "work_036", "name": "–ú–∞–ª—è—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º", "code": "16.01.001"},
            {"id": "work_037", "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–º–æ—Å—Ç–∫–∏", "code": "05.01.001"},
            {"id": "work_038", "name": "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", "code": "05.02.001"},
            {"id": "work_039", "name": "–£–±–æ—Ä–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞", "code": "99.01.001"},
            {"id": "work_040", "name": "–ü—Ä–∏–µ–º–æ-—Å–¥–∞—Ç–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "code": "99.02.001"}
        ]
        
        # –°–æ–∑–¥–∞–µ–º mock true.json —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        real_truth_data = {
            "metadata": {
                "project_id": "real_test_project",
                "project_name": "–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –æ—Ñ–∏—Å–∞ 120 –º¬≤",
                "pipeline_status": [
                    {"agent_name": "work_packager", "status": "pending"}
                ]
            },
            "project_inputs": {
                "target_work_package_count": 10,
                "agent_directives": {
                    "conceptualizer": "–≤—Å—é —ç–ª–µ–∫—Ç—Ä–∏–∫—É –∏ —Å–ª–∞–±–æ—Ç–æ—á–∫—É –≤ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ, –¥–µ–º–æ–Ω—Ç–∞–∂ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –º–æ–Ω—Ç–∞–∂–∞"
                },
                "external_context": {
                    "object_characteristics": {
                        "project_type": "–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –æ—Ñ–∏—Å–∞",
                        "building_type": "–û—Ñ–∏—Å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ",
                        "area": "120 –º¬≤"
                    },
                    "site_conditions": {
                        "location_type": "–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä",
                        "work_time_restrictions": ["–†–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ 9:00-18:00"]
                    }
                }
            },
            "source_work_items": real_work_items,
            "results": {
                "work_packages": []
            }
        }
        
        truth_path = os.path.join(self.test_project_path, "true.json")
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(real_truth_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(real_work_items)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç")
        return self.test_project_path
    
    async def test_real_work_packager(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º Gemini API"""
        
        print("ü§ñ === –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ WORK_PACKAGER –° GEMINI API ===")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not os.getenv('GEMINI_API_KEY'):
            print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á: export GEMINI_API_KEY='your_key'")
            return False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project_path = self.setup_real_test_project()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ (–ë–ï–ó –ø–æ–¥–º–µ–Ω—ã –Ω–∞ –º–æ–∫!)
            agent = WorkPackager()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º AI
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º Gemini API...")
            print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –≤ Google AI...")
            
            start_time = datetime.now()
            result = await agent.process(project_path)
            end_time = datetime.now()
            
            processing_time = (end_time - start_time).total_seconds()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                print(f"‚úÖ –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {processing_time:.1f} —Å–µ–∫—É–Ω–¥")
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {result.get('work_packages_created', 0)}")
                
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                truth_path = os.path.join(project_path, "true.json")
                with open(truth_path, 'r', encoding='utf-8') as f:
                    updated_truth = json.load(f)
                
                work_packages = updated_truth.get('results', {}).get('work_packages', [])
                
                print(f"\nüèóÔ∏è –ü–ê–ö–ï–¢–´ –†–ê–ë–û–¢, –°–û–ó–î–ê–ù–ù–´–ï –†–ï–ê–õ–¨–ù–´–ú –ò–ò:")
                print("=" * 60)
                
                for i, pkg in enumerate(work_packages, 1):
                    print(f"{i}. üì¶ {pkg.get('package_id')}: {pkg.get('name')}")
                    print(f"   üìã {pkg.get('description', '')}")
                    print()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã LLM
                agent_folder = os.path.join(project_path, "4_work_packager")
                if os.path.exists(agent_folder):
                    
                    # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
                    llm_input_path = os.path.join(agent_folder, "llm_input.json")
                    if os.path.exists(llm_input_path):
                        with open(llm_input_path, 'r', encoding='utf-8') as f:
                            llm_input = json.load(f)
                        print(f"üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI: {len(llm_input.get('source_work_items', []))} —Ä–∞–±–æ—Ç")
                    
                    # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
                    llm_response_path = os.path.join(agent_folder, "llm_response.json")
                    if os.path.exists(llm_response_path):
                        with open(llm_response_path, 'r', encoding='utf-8') as f:
                            llm_response = json.load(f)
                        
                        usage = llm_response.get('usage_metadata', {})
                        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –≤—ã–∑–æ–≤–∞:")
                        print(f"   üî§ –¢–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ: {usage.get('prompt_token_count', 0)}")
                        print(f"   üí¨ –¢–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {usage.get('candidates_token_count', 0)}")
                        print(f"   üìà –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_token_count', 0)}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç AI (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π)
                        raw_response = llm_response.get('raw_text', '')[:500]
                        print(f"\nü§ñ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç AI (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
                        print("-" * 40)
                        print(raw_response)
                        if len(llm_response.get('raw_text', '')) > 500:
                            print("... (–æ–±—Ä–µ–∑–∞–Ω–æ)")
                        print("-" * 40)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                errors = []
                
                if len(work_packages) == 0:
                    errors.append("–ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç")
                elif len(work_packages) > 15:
                    errors.append(f"–°–æ–∑–¥–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {len(work_packages)}")
                
                for pkg in work_packages:
                    if not pkg.get('package_id', '').startswith('pkg_'):
                        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–∞–∫–µ—Ç–∞: {pkg.get('package_id')}")
                    if len(pkg.get('name', '')) < 5:
                        errors.append(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞: {pkg.get('name')}")
                    if len(pkg.get('description', '')) < 10:
                        errors.append(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞: {pkg.get('description')}")
                
                if errors:
                    print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –ö–ê–ß–ï–°–¢–í–ê:")
                    for error in errors:
                        print(f"  - {error}")
                    print(f"\nüí° –ò–ò —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
                    return True  # –í—Å–µ-—Ç–∞–∫–∏ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç.–∫. API —Å—Ä–∞–±–æ—Ç–∞–ª
                else:
                    print(f"\nüéâ –†–ï–ê–õ–¨–ù–´–ô –ò–ò –°–û–ó–î–ê–õ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ü–ê–ö–ï–¢–´ –†–ê–ë–û–¢!")
                    print(f"‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã")
                    return True
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {result.get('error')}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {processing_time:.1f} —Å–µ–∫—É–Ω–¥")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
                if "API" in str(result.get('error', '')):
                    print("üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º –∏–ª–∏ –ª–∏–º–∏—Ç–∞–º–∏")
                elif "JSON" in str(result.get('error', '')):
                    print("üí° –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –æ—Ç–≤–µ—Ç–∞ AI")
                
                return False
                
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
            return False
        
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            if self.test_project_path and os.path.exists(self.test_project_path):
                backup_path = f"/tmp/herzog_real_test_backup_{int(datetime.now().timestamp())}"
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤: {backup_path}")
                shutil.copytree(self.test_project_path, backup_path)
                
                # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
                shutil.rmtree(self.test_project_path)
                print(f"üßπ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")

async def run_real_api_test():
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API —Ç–µ—Å—Ç–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û API –¢–ï–°–¢–ê WORK_PACKAGER")
    print("=" * 60)
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–ª–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –≤—ã–∑–æ–≤—ã –∫ Gemini API")
    print("üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –º–æ–∂–µ—Ç —Ç–∞—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    print("üîë –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ GEMINI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–µ—Å—Ç—É
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export GEMINI_API_KEY='your_actual_key'")
        return False
    
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API? (y/N): ", end='')
    
    # –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤–≤–æ–¥–∞
    confirmation = 'y'  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ input() –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    if confirmation.lower() != 'y':
        print("üö´ –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    
    print("\nüéØ –ù–ê–ß–ò–ù–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢...")
    
    tester = TestRealWorkPackager()
    
    try:
        success = await tester.test_real_work_packager()
        
        if success:
            print("\n" + "=" * 60)
            print("üéâ –†–ï–ê–õ–¨–ù–´–ô API –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ê–≥–µ–Ω—Ç work_packager —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º Gemini AI")
            print("üèóÔ∏è –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            return True
        else:
            print("\n" + "=" * 60)
            print("‚ùå –†–ï–ê–õ–¨–ù–´–ô API –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º AI")
            return False
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –¢–ï–°–¢–ï: {e}")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API —Ç–µ—Å—Ç–∞
    asyncio.run(run_real_api_test())
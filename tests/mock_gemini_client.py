"""
–ú–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ Gemini API
"""

import json
import logging
from typing import Dict, Any

logger = logging.getLogger(__name__)

class MockGeminiClient:
    """
    –ú–æ–∫-–∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã Gemini API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self):
        self.call_count = 0
        
    async def generate_response(self, prompt: str) -> Dict[str, Any]:
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç Gemini API —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        self.call_count += 1
        
        logger.info(f"ü§ñ MockGemini –≤—ã–∑–æ–≤ #{self.call_count}, –ø—Ä–æ–º—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if "work_packages" in prompt and "package_id" in prompt:
            # –≠—Ç–æ work_packager
            mock_response = {
                "work_packages": [
                    {
                        "package_id": "pkg_001",
                        "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                        "description": "–°–Ω–æ—Å –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫, –¥–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏–π –ø–æ–ª–∞ –∏ –ø–æ—Ç–æ–ª–∫–∞"
                    },
                    {
                        "package_id": "pkg_002", 
                        "name": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                        "description": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ –∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π"
                    },
                    {
                        "package_id": "pkg_003",
                        "name": "–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å—Ç–µ–Ω",
                        "description": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ –∏ –ø–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –ø–æ–º–µ—â–µ–Ω–∏–π"
                    },
                    {
                        "package_id": "pkg_004",
                        "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª–æ–≤",
                        "description": "–°—Ç—è–∂–∫–∞ –∏ —É–∫–ª–∞–¥–∫–∞ –Ω–∞–ø–æ–ª—å–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π"
                    },
                    {
                        "package_id": "pkg_005",
                        "name": "–†–∞–±–æ—Ç—ã –ø–æ –ø–æ—Ç–æ–ª–∫–∞–º",
                        "description": "–ú–æ–Ω—Ç–∞–∂ –ø–æ–¥–≤–µ—Å–Ω—ã—Ö –∏ –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–æ–≤"
                    },
                    {
                        "package_id": "pkg_006",
                        "name": "–°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã",
                        "description": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Ç—Ä—É–± –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏"
                    }
                ]
            }
            
        elif "assignments" in prompt and "work_id" in prompt:
            # –≠—Ç–æ works_to_packages
            mock_response = {
                "assignments": [
                    {"work_id": "work_001", "package_id": "pkg_001"},
                    {"work_id": "work_002", "package_id": "pkg_001"}, 
                    {"work_id": "work_003", "package_id": "pkg_002"},
                    {"work_id": "work_004", "package_id": "pkg_002"},
                    {"work_id": "work_005", "package_id": "pkg_002"},
                    {"work_id": "work_006", "package_id": "pkg_003"},
                    {"work_id": "work_007", "package_id": "pkg_003"},
                    {"work_id": "work_008", "package_id": "pkg_004"},
                    {"work_id": "work_009", "package_id": "pkg_004"},
                    {"work_id": "work_010", "package_id": "pkg_005"},
                    {"work_id": "work_011", "package_id": "pkg_006"},
                    {"work_id": "work_012", "package_id": "pkg_006"}
                ]
            }
            
        elif "calculation" in prompt and "final_unit" in prompt:
            # –≠—Ç–æ counter  
            mock_response = {
                "calculation": {
                    "final_unit": "–º¬≤",
                    "final_quantity": 120.0,
                    "calculation_logic": "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –º–∞–∫—Å–∏–º—É–º–∞ –¥–ª—è –ø–ª–æ—â–∞–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                    "component_analysis": [
                        {
                            "work_name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫",
                            "unit": "–º¬≤", 
                            "quantity": 80.0,
                            "included": "full",
                            "role": "base_surface"
                        }
                    ]
                }
            }
            
        elif "scheduled_packages" in prompt and "schedule_blocks" in prompt:
            # –≠—Ç–æ scheduler_and_staffer
            mock_response = {
                "scheduled_packages": [
                    {
                        "package_id": "pkg_001",
                        "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                        "calculations": {"unit": "–º¬≤", "quantity": 100.0},
                        "schedule_blocks": [1, 2],
                        "progress_per_block": {"1": 60, "2": 40},
                        "staffing_per_block": {"1": 8, "2": 6}
                    },
                    {
                        "package_id": "pkg_002",
                        "name": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", 
                        "calculations": {"unit": "–º", "quantity": 200.0},
                        "schedule_blocks": [3, 4],
                        "progress_per_block": {"3": 70, "4": 30},
                        "staffing_per_block": {"3": 4, "4": 3}
                    }
                ]
            }
            
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            mock_response = {
                "result": "mock_response",
                "message": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç MockGemini"
            }
        
        return {
            'success': True,
            'response': mock_response,
            'json_parse_success': True,
            'raw_text': json.dumps(mock_response, ensure_ascii=False),
            'prompt_feedback': None,
            'usage_metadata': {
                'prompt_token_count': len(prompt) // 4,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                'candidates_token_count': 100,
                'total_token_count': len(prompt) // 4 + 100
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–∫-—ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
mock_gemini_client = MockGeminiClient()
#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /test —Å —ç—Ç–∞–ø–∞ 6 (counter)
"""

import os
import sys
import shutil
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Herzog
sys.path.append('/home/imort/Herzog_v3')

from src.telegram_bot.handlers import _copy_project_files_up_to_stage

def simulate_test_stage_6():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —ç—Ç–∞–ø–∞ 6"""
    
    source_project = "/home/imort/Herzog_v3/projects/34975055/da1ac471"
    
    print("üß™ –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /test —Å —ç—Ç–∞–ø–æ–º 6 (counter)...")
    print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {source_project}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Å–æ–∑–¥–∞–ª questionnaire.create_project_structure
    with tempfile.TemporaryDirectory() as temp_dir:
        target_project = os.path.join(temp_dir, "test_project")
        os.makedirs(target_project, exist_ok=True)
        
        print(f"üìÅ –¶–µ–ª—å: {target_project}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–æ —ç—Ç–∞–ø–∞ 6 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        print("üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
        success = _copy_project_files_up_to_stage(source_project, target_project, "6")
        
        if success:
            print("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–æ—Å—å
            copied_folders = []
            for item in os.listdir(target_project):
                if os.path.isdir(os.path.join(target_project, item)):
                    copied_folders.append(item)
                    
            copied_folders.sort()
            print(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {copied_folders}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º true.json
            truth_file = os.path.join(target_project, "true.json")
            if os.path.exists(truth_file):
                file_size = os.path.getsize(truth_file)
                print(f"üìÑ true.json: {file_size} –±–∞–π—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤ —É–∂–µ –∏–º–µ—é—Ç volume_data
                import json
                with open(truth_file, 'r', encoding='utf-8') as f:
                    truth_data = json.load(f)
                
                work_packages = truth_data.get('results', {}).get('work_packages', [])
                packages_with_volume = [pkg for pkg in work_packages if 'volume_data' in pkg]
                
                print(f"üìä –ü–∞–∫–µ—Ç–æ–≤ –≤—Å–µ–≥–æ: {len(work_packages)}")
                print(f"‚úÖ –° volume_data: {len(packages_with_volume)}")
                print(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {len(work_packages) - len(packages_with_volume)}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–∞–ø–∫—É 6_counter
                counter_folder = os.path.join(target_project, "6_counter")
                if os.path.exists(counter_folder):
                    counter_files = os.listdir(counter_folder)
                    response_files = [f for f in counter_files if f.endswith('_response.json')]
                    print(f"üìÅ –§–∞–π–ª–æ–≤ –≤ 6_counter: {len(counter_files)}")
                    print(f"üìã Response —Ñ–∞–π–ª–æ–≤: {len(response_files)}")
                    
                    # –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏ –ø–µ—Ä–≤—ã–π —Å –æ—à–∏–±–∫–æ–π
                    success_responses = []
                    error_responses = []
                    
                    for resp_file in response_files:
                        resp_path = os.path.join(counter_folder, resp_file)
                        try:
                            with open(resp_path, 'r', encoding='utf-8') as f:
                                resp_data = json.load(f)
                                if resp_data.get('success'):
                                    success_responses.append(resp_file)
                                else:
                                    error_responses.append(resp_file)
                        except:
                            pass
                    
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(success_responses)}")
                    print(f"‚ùå –û—à–∏–±–æ–∫: {len(error_responses)}")
                    
                    if error_responses:
                        print(f"üö® –ü–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞ –≤: {sorted(error_responses)[0]}")
            
            print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            print(f"   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å pipeline —Å —ç—Ç–∞–ø–∞ 7 (scheduler_and_staffer)")
            print(f"   Counter —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–∞–∫–µ—Ç—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")

if __name__ == "__main__":
    simulate_test_stage_6()
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ scheduler_and_staffer.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
"""

import json
import os
import sys
import asyncio
import tempfile
import shutil
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.ai_agents.scheduler_and_staffer import SchedulerAndStaffer
from tests.mock_gemini_client import mock_gemini_client

# –ü–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π gemini_client –Ω–∞ –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import src.ai_agents.scheduler_and_staffer
src.ai_agents.scheduler_and_staffer.gemini_client = mock_gemini_client

class TestSchedulerAndStaffer:
    
    def __init__(self):
        self.test_project_path = None
    
    def setup_test_project(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å mock –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_project_path = tempfile.mkdtemp(prefix='test_herzog_')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (4 –Ω–µ–¥–µ–ª–∏)
        start_date = datetime(2024, 1, 1)
        timeline_blocks = []
        
        for week in range(1, 5):
            week_start = start_date + timedelta(weeks=week-1)
            week_end = week_start + timedelta(days=6)
            
            timeline_blocks.append({
                "week_id": week,
                "start_date": week_start.strftime("%Y-%m-%d"),
                "end_date": week_end.strftime("%Y-%m-%d")
            })
        
        # –°–æ–∑–¥–∞–µ–º mock true.json —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        mock_truth_data = {
            "metadata": {
                "project_id": "test_project",
                "project_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
                "pipeline_status": [
                    {"agent_name": "work_packager", "status": "completed"},
                    {"agent_name": "works_to_packages", "status": "completed"},
                    {"agent_name": "counter", "status": "completed"},
                    {"agent_name": "scheduler_and_staffer", "status": "pending"}
                ]
            },
            "project_inputs": {
                "target_work_package_count": 4,
                "workforce_range": {
                    "min": 5,
                    "max": 15
                },
                "agent_directives": {
                    "strategist": "—Ä–∞—Å—Ç—è–Ω–∏ –¥–µ–º–æ–Ω—Ç–∞–∂ –Ω–∞ –ø–µ—Ä–≤—ã–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏",
                    "foreman": "–Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫—É –≤—ã–¥–µ–ª–∏ –º–∞–∫—Å–∏–º—É–º 4 —á–µ–ª–æ–≤–µ–∫–∞"
                }
            },
            "timeline_blocks": timeline_blocks,
            "source_work_items": [
                {
                    "id": "work_001",
                    "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫ –∫–∏—Ä–ø–∏—á–Ω—ã—Ö",
                    "code": "08.01.001",
                    "package_id": "pkg_001"
                },
                {
                    "id": "work_002",
                    "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è –í–í–ì 3—Ö2.5",
                    "code": "19.03.012",
                    "package_id": "pkg_002"
                }
            ],
            "results": {
                "work_packages": [
                    {
                        "package_id": "pkg_001",
                        "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                        "description": "–°–Ω–æ—Å –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫, –¥–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏–π –ø–æ–ª–∞ –∏ –ø–æ—Ç–æ–ª–∫–∞",
                        "calculations": {
                            "unit": "–º¬≤",
                            "quantity": 120.0,
                            "calculation_logic": "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –º–∞–∫—Å–∏–º—É–º–∞",
                            "source_works_count": 2
                        }
                    },
                    {
                        "package_id": "pkg_002",
                        "name": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                        "description": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª–µ–π, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ –∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π",
                        "calculations": {
                            "unit": "–º",
                            "quantity": 250.0,
                            "calculation_logic": "–°—É–º–º–∞ –≤—Å–µ—Ö –∫–∞–±–µ–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π",
                            "source_works_count": 3
                        }
                    }
                ]
            }
        }
        
        truth_path = os.path.join(self.test_project_path, "true.json")
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(mock_truth_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
        return self.test_project_path
    
    async def test_scheduler_full_process(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        print("üß™ === –¢–ï–°–¢ SCHEDULER_AND_STAFFER –ü–û–õ–ù–´–ô –ü–†–û–¶–ï–°–° ===")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project_path = self.setup_test_project()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = SchedulerAndStaffer()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ scheduler_and_staffer...")
            result = await agent.process(project_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                print("‚úÖ –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"üìä –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {result.get('packages_scheduled', 0)}")
                print(f"üë• –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {result.get('workforce_valid', False)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π true.json
                truth_path = os.path.join(project_path, "true.json")
                with open(truth_path, 'r', encoding='utf-8') as f:
                    updated_truth = json.load(f)
                
                work_packages = updated_truth.get('results', {}).get('work_packages', [])
                schedule_info = updated_truth.get('results', {}).get('schedule', {})
                staffing_info = updated_truth.get('results', {}).get('staffing', {})
                
                print(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ –ø–∞–∫–µ—Ç–∞–º:")
                for pkg in work_packages:
                    schedule_blocks = pkg.get('schedule_blocks', [])
                    progress_per_block = pkg.get('progress_per_block', {})
                    staffing_per_block = pkg.get('staffing_per_block', {})
                    
                    print(f"  {pkg['package_id']}: {pkg['name']}")
                    print(f"    –ù–µ–¥–µ–ª–∏: {schedule_blocks}")
                    print(f"    –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_per_block}")
                    print(f"    –ü–µ—Ä—Å–æ–Ω–∞–ª: {staffing_per_block}")
                
                print(f"üìä –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: {schedule_info.get('total_packages', 0)}")
                print(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {schedule_info.get('project_duration_weeks', 0)} –Ω–µ–¥–µ–ª—å")
                print(f"  –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {staffing_info.get('peak_workforce', 0)} —á–µ–ª–æ–≤–µ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∞–≥–µ–Ω—Ç–∞
                agent_folder = os.path.join(project_path, "7_scheduler_and_staffer")
                if os.path.exists(agent_folder):
                    files = os.listdir(agent_folder)
                    print(f"üìÅ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã: {files}")
                
                # –ë–∞–∑–æ–≤—ã–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                assert len(work_packages) == 2, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
                
                for pkg in work_packages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
                    assert 'schedule_blocks' in pkg, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –Ω–µ –∏–º–µ–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"
                    assert 'progress_per_block' in pkg, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
                    assert 'staffing_per_block' in pkg, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å—É–º–º–µ 100%
                    progress = pkg['progress_per_block']
                    total_progress = sum(int(v) for v in progress.values())
                    assert 90 <= total_progress <= 110, f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞–∫–µ—Ç–∞ {pkg['package_id']} –Ω–µ —Ä–∞–≤–µ–Ω ~100%: {total_progress}%"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª –Ω–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Ä–∞–±–æ—Ç
                    staffing = pkg['staffing_per_block']
                    for week in pkg['schedule_blocks']:
                        week_str = str(week)
                        assert week_str in staffing, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –Ω–µ –∏–º–µ–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é {week}"
                        assert staffing[week_str] > 0, f"–ü–∞–∫–µ—Ç {pkg['package_id']} –∏–º–µ–µ—Ç 0 –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é {week}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                assert 'schedule' in updated_truth['results'], "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º –ø–ª–∞–Ω–µ"
                assert 'staffing' in updated_truth['results'], "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–ª–µ"
                
                print("‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
                return True
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {result.get('error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
        
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
                print(f"üßπ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
    
    async def test_workforce_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É"""
        
        print("üß™ === –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ü–ï–†–°–û–ù–ê–õ–ê ===")
        
        project_path = self.setup_test_project()
        
        try:
            agent = SchedulerAndStaffer()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤
            test_packages = [
                {
                    "package_id": "pkg_001",
                    "name": "–ü–∞–∫–µ—Ç 1",
                    "schedule_blocks": [1, 2],
                    "staffing_per_block": {"1": 10, "2": 8}  # –í—Å–µ–≥–æ –≤ –Ω–µ–¥–µ–ª—é 1: 18 —á–µ–ª–æ–≤–µ–∫ (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ)
                },
                {
                    "package_id": "pkg_002", 
                    "name": "–ü–∞–∫–µ—Ç 2",
                    "schedule_blocks": [1, 3],
                    "staffing_per_block": {"1": 8, "3": 5}
                }
            ]
            
            timeline_blocks = [{"week_id": i} for i in range(1, 5)]
            workforce_range = {"min": 5, "max": 15}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            validation = agent._validate_workforce_constraints(test_packages, timeline_blocks, workforce_range)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            print(f"  –í–∞–ª–∏–¥–µ–Ω: {validation['valid']}")
            print(f"  –ù–∞—Ä—É—à–µ–Ω–∏—è: {validation['violations']}")
            print(f"  –ù–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏: {validation['weekly_totals']}")
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª–µ 1 (10+8=18 > 15)
            assert not validation['valid'], "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã—è–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ"
            assert len(validation['violations']) > 0, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"
            assert '18' in str(validation['violations']), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ 18 —á–µ–ª–æ–≤–µ–∫"
            
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
    
    async def test_schedule_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        
        print("üß™ === –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ö–ê–õ–ï–ù–î–ê–†–ù–û–ì–û –ü–õ–ê–ù–ê ===")
        
        project_path = self.setup_test_project()
        
        try:
            agent = SchedulerAndStaffer()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
            test_package = {
                "package_id": "pkg_001",
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç",
                "schedule_blocks": [1, 2, 5],  # –ù–µ–¥–µ–ª—è 5 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ç–æ–ª—å–∫–æ 4 –Ω–µ–¥–µ–ª–∏)
                "progress_per_block": {"1": 40, "2": 30, "5": 30},  # –ò—Ç–æ–≥–æ 100%
                "staffing_per_block": {"1": 8, "2": 6, "5": 4}
            }
            
            timeline_blocks = [{"week_id": i} for i in range(1, 5)]  # –ù–µ–¥–µ–ª–∏ 1-4
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç
            validated_package = agent._validate_and_fix_package_schedule(test_package, timeline_blocks)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞:")
            print(f"  –ò—Å—Ö–æ–¥–Ω—ã–µ –Ω–µ–¥–µ–ª–∏: {test_package['schedule_blocks']}")
            print(f"  –í–∞–ª–∏–¥–Ω—ã–µ –Ω–µ–¥–µ–ª–∏: {validated_package['schedule_blocks']}")
            print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {validated_package['progress_per_block']}")
            print(f"  –ü–µ—Ä—Å–æ–Ω–∞–ª: {validated_package['staffing_per_block']}")
            
            # –ù–µ–¥–µ–ª—è 5 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞
            assert 5 not in validated_package['schedule_blocks'], "–ù–µ–¥–µ–ª—è 5 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞"
            assert len(validated_package['schedule_blocks']) == 2, "–î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 2 –Ω–µ–¥–µ–ª–∏"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω
            total_progress = sum(validated_package['progress_per_block'].values())
            assert total_progress == 100, f"–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100%, –ø–æ–ª—É—á–µ–Ω–æ {total_progress}"
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –Ω–µ–¥–µ–ª—è–º
            for week in validated_package['schedule_blocks']:
                week_str = str(week)
                assert week_str in validated_package['staffing_per_block'], f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª –¥–ª—è –Ω–µ–¥–µ–ª–∏ {week}"
            
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        
        print("üß™ === –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===")
        
        project_path = self.setup_test_project()
        
        try:
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã —É –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç
            truth_path = os.path.join(project_path, "true.json")
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –£–±–∏—Ä–∞–µ–º calculations —É –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
            for pkg in truth_data['results']['work_packages']:
                if 'calculations' in pkg:
                    del pkg['calculations']
            
            with open(truth_path, 'w', encoding='utf-8') as f:
                json.dump(truth_data, f, ensure_ascii=False, indent=2)
            
            agent = SchedulerAndStaffer()
            
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –±–µ–∑ —Ä–∞—Å—á–µ—Ç–æ–≤ –æ–±—ä–µ–º–æ–≤...")
            result = await agent.process(project_path)
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
            if not result.get('success'):
                print(f"‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result.get('error')}")
                assert "–Ω–µ –∏–º–µ—é—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –æ–±—ä–µ–º–æ–≤" in result.get('error', ''), "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
                return True
            else:
                print("‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                return False
                
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ scheduler_and_staffer.py")
    print("=" * 50)
    
    tester = TestSchedulerAndStaffer()
    
    tests = [
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", tester.test_workforce_validation),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞", tester.test_schedule_validation),
        ("–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", tester.test_scheduler_full_process),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", tester.test_error_handling)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        
        try:
            success = await test_func()
            results.append((test_name, success))
            
            if success:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã!")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_all_tests())
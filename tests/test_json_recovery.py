#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º Herzog
sys.path.append('/home/imort/Herzog_v3')

from src.shared.gemini_client import gemini_client
from src.ai_agents.work_packager import WorkPackager

def test_json_recovery():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON...")
    
    # –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π)
    broken_json = """{
  "work_packages": [
    {
      "package_id": "pkg_001",
      "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –∫—Ä–æ–≤–ª–∏ –∏ —Å—Ç—Ä–æ–ø–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
      "description": "–†–∞–∑–±–æ—Ä–∫–∞ –∫—Ä–æ–≤–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –∏–∑ —Ö—Ä–∏–∑–æ—Ç–∏–ª—Ü–µ–º–µ–Ω—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤, –æ–±—Ä–µ—à–µ—Ç–∫–∏ –∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫—Ä—ã—à."
    },
    {
      "package_id": "pkg_002",
      "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
      "description": "–†–∞–∑–±–æ—Ä–∫–∞ –∫–∏—Ä–ø–∏—á–Ω—ã—Ö —Å—Ç–µ–Ω –∏ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏—è."
    },
    {
      "package_id": "pkg_003",
      "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–ª–æ–≤ –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏–π",
      "description": "–†–∞–∑–±–æ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏–π –ø–æ–ª–æ–≤ (–ø–ª–∏—Ç–∫–∞, —Ü–µ–º–µ–Ω—Ç, –ª–∏–Ω–æ–ª–µ—É–º, –¥–æ—Å–∫–∏), –æ—Å–Ω–æ–≤–∞–Ω–∏–π, –ª–∞–≥, —Å—Ç–æ–ª–±–∏–∫–æ–≤ –∏ –ø–ª–∏–Ω—Ç—É—Å–æ–≤."
    },
    {
      "package_id": "pkg_015",
      "name": "–û—Ç–¥–µ–ª–∫–∞ –ø–æ—Ç–æ–ª–∫–æ–≤",
      "description" """
    
    print("üîß –¢–µ—Å—Ç–∏—Ä—É—é _try_fix_broken_json...")
    
    try:
        fixed = gemini_client._try_fix_broken_json(broken_json)
        print(f"‚úÖ JSON –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ù–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {len(fixed.get('work_packages', []))}")
        
        for pkg in fixed.get('work_packages', [])[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {pkg.get('package_id')}: {pkg.get('name')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è JSON: {e}")
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É—é _extract_packages_from_raw_response...")
    
    try:
        packager = WorkPackager()
        packages = packager._extract_packages_from_raw_response(broken_json)
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {len(packages)}")
        
        for pkg in packages[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {pkg.get('package_id')}: {pkg.get('name')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤: {e}")
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ fallback –ø–∞–∫–µ—Ç–æ–≤...")
    
    try:
        packager = WorkPackager()
        fallback = packager._create_basic_fallback_packages()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ fallback –ø–∞–∫–µ—Ç–æ–≤: {len(fallback)}")
        
        for pkg in fallback:
            print(f"   - {pkg.get('package_id')}: {pkg.get('name')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback: {e}")

if __name__ == "__main__":
    test_json_recovery()
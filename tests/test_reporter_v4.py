"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ reporter_v4.py
—Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI/UX –∏ scheduling_reasoning –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append('/home/imort/Herzog_v3/src/data_processing')

from reporter_v4 import generate_professional_excel_report

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_professional_reporter():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ reporter_v4
    """
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û REPORTER V4")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—É—Ç–∏
    test_cases = [
        "/home/imort/Herzog_v3/projects/test/b4338a45/true.json",  # –° scheduling_reasoning
        "/home/imort/Herzog_v3/projects/test/d3f0a7a1/true.json",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
        "/home/imort/Herzog_v3/projects/test/9d778a7f/true.json"   # –†–µ–∑–µ—Ä–≤–Ω—ã–π
    ]
    
    output_dir = "/tmp"
    
    for i, test_input in enumerate(test_cases, 1):
        print(f"\nüìä –¢–ï–°–¢ {i}: {os.path.basename(os.path.dirname(test_input))}")
        print("-" * 40)
        
        if not os.path.exists(test_input):
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_input}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ scheduler –¥–∞–Ω–Ω—ã—Ö
        scheduler_path = os.path.join(os.path.dirname(test_input), '7_scheduler_and_staffer', 'llm_response.json')
        has_scheduler_data = os.path.exists(scheduler_path)
        print(f"üìÖ –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {'‚úÖ –ù–∞–π–¥–µ–Ω—ã' if has_scheduler_data else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}")
        
        if has_scheduler_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É scheduler –¥–∞–Ω–Ω—ã—Ö
            try:
                import json
                with open(scheduler_path, 'r', encoding='utf-8') as f:
                    scheduler_data = json.load(f)
                    
                success = scheduler_data.get('success', False)
                packages = scheduler_data.get('response', {}).get('scheduled_packages', [])
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
                print(f"üì¶ –ü–∞–∫–µ—Ç–æ–≤ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏: {len(packages)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reasoning
                reasoning_count = 0
                for pkg in packages:
                    if pkg.get('scheduling_reasoning'):
                        reasoning_count += 1
                
                print(f"üß† –ü–∞–∫–µ—Ç–æ–≤ —Å reasoning: {reasoning_count}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
        try:
            print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
            result_file = generate_professional_excel_report(test_input, output_dir)
            
            if os.path.exists(result_file):
                file_size = os.path.getsize(result_file) // 1024  # KB
                print(f"‚úÖ –£–°–ü–ï–•! –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {result_file}")
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} KB")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
                try:
                    from openpyxl import load_workbook
                    wb = load_workbook(result_file)
                    sheet_names = wb.sheetnames
                    
                    print(f"üìã –õ–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ ({len(sheet_names)}):")
                    for sheet in sheet_names:
                        ws = wb[sheet]
                        rows = ws.max_row
                        cols = ws.max_column
                        print(f"  ‚Ä¢ {sheet}: {rows} —Å—Ç—Ä–æ–∫, {cols} –∫–æ–ª–æ–Ω–æ–∫")
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ª–∏—Å—Ç–∞ "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è"
                        if "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in sheet and has_scheduler_data:
                            print(f"    üéØ –ù–æ–≤—ã–π –ª–∏—Å—Ç —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
                    
                    wb.close()
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞: {e}")
                
                print(f"üéâ –¢–ï–°–¢ {i} –ü–†–û–ô–î–ï–ù!")
                
            else:
                print(f"‚ùå –¢–ï–°–¢ {i} –ü–†–û–í–ê–õ–ï–ù: –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ {i} –ü–†–û–í–ê–õ–ï–ù: {e}")
            import traceback
            traceback.print_exc()
    
    print("\n" + "=" * 60)
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

def analyze_test_data():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    print("\nüîç –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–´–• –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    projects_dir = "/home/imort/Herzog_v3/projects"
    
    if not os.path.exists(projects_dir):
        print("‚ùå –ü–∞–ø–∫–∞ projects –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞–π–¥–µ–º –≤—Å–µ true.json —Ñ–∞–π–ª—ã
    true_json_files = []
    for root, dirs, files in os.walk(projects_dir):
        if 'true.json' in files:
            true_json_files.append(os.path.join(root, 'true.json'))
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ true.json: {len(true_json_files)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, filepath in enumerate(true_json_files[:5], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 5 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        project_id = os.path.basename(os.path.dirname(filepath))
        print(f"\nüìÅ –ü–†–û–ï–ö–¢ {i}: {project_id}")
        print("-" * 30)
        
        try:
            import json
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            meta = data.get('meta', {})
            results = data.get('results', {})
            work_packages = results.get('work_packages', [])
            timeline_blocks = data.get('timeline_blocks', [])
            
            print(f"üìä –ü–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç: {len(work_packages)}")
            print(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {len(timeline_blocks)}")
            print(f"üìÖ –í–µ—Ä—Å–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {meta.get('structure_version', '1.0')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º scheduler –¥–∞–Ω–Ω—ã–µ
            scheduler_path = os.path.join(os.path.dirname(filepath), '7_scheduler_and_staffer', 'llm_response.json')
            if os.path.exists(scheduler_path):
                with open(scheduler_path, 'r', encoding='utf-8') as f:
                    scheduler_data = json.load(f)
                
                success = scheduler_data.get('success', False)
                scheduled_packages = scheduler_data.get('response', {}).get('scheduled_packages', [])
                
                reasoning_count = sum(1 for pkg in scheduled_packages if pkg.get('scheduling_reasoning'))
                
                print(f"üß† –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –î–∞' if success else '‚ùå –ù–µ—Ç'}")
                print(f"üí≠ –° –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏: {reasoning_count}/{len(scheduled_packages)} –ø–∞–∫–µ—Ç–æ–≤")
                
                if reasoning_count > 0:
                    print(f"üéØ –ü–û–î–•–û–î–ò–¢ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!")
            else:
                print("üß† –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø REPORTER V4")
    print("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π Excel –æ—Ç—á–µ—Ç —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UI/UX")
    print("–í–∫–ª—é—á–∞–µ—Ç scheduling_reasoning –¥–∞–Ω–Ω—ã–µ –∏–∑ AI-–∞–≥–µ–Ω—Ç–∞")
    
    # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    analyze_test_data()
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_professional_reporter()
    
    print("\n‚ú® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ /tmp")
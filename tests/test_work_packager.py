#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ work_packager.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç
"""

import json
import os
import sys
import asyncio
import tempfile
import shutil
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.ai_agents.work_packager import WorkPackager
from tests.mock_gemini_client import mock_gemini_client

# –ü–æ–¥–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π gemini_client –Ω–∞ –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import src.ai_agents.work_packager
src.ai_agents.work_packager.gemini_client = mock_gemini_client

class TestWorkPackager:
    
    def __init__(self):
        self.test_project_path = None
    
    def setup_test_project(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å mock –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_project_path = tempfile.mkdtemp(prefix='test_herzog_')
        
        # –°–æ–∑–¥–∞–µ–º mock true.json
        mock_truth_data = {
            "metadata": {
                "project_id": "test_project",
                "project_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
                "pipeline_status": [
                    {"agent_name": "work_packager", "status": "pending"}
                ]
            },
            "project_inputs": {
                "target_work_package_count": 8,
                "agent_directives": {
                    "conceptualizer": "–≤—Å—é —ç–ª–µ–∫—Ç—Ä–∏–∫—É –æ–±—ä–µ–¥–∏–Ω–∏ –≤ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç"
                }
            },
            "source_work_items": [
                {
                    "id": "work_001",
                    "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫ –∫–∏—Ä–ø–∏—á–Ω—ã—Ö",
                    "code": "08.01.001"
                },
                {
                    "id": "work_002", 
                    "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ–ª–∞ –ª–∏–Ω–æ–ª–µ—É–º",
                    "code": "08.02.015"
                },
                {
                    "id": "work_003",
                    "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è –í–í–ì 3—Ö2.5",
                    "code": "19.03.012"
                },
                {
                    "id": "work_004",
                    "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö",
                    "code": "19.05.001"
                },
                {
                    "id": "work_005",
                    "name": "–ú–æ–Ω—Ç–∞–∂ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π",
                    "code": "19.05.003"
                },
                {
                    "id": "work_006",
                    "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω —Ü–µ–º–µ–Ω—Ç–Ω—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º",
                    "code": "15.01.001"
                },
                {
                    "id": "work_007",
                    "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–æ–π –∫—Ä–∞—Å–∫–æ–π",
                    "code": "15.06.001"
                },
                {
                    "id": "work_008",
                    "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ç—è–∂–∫–∏ —Ü–µ–º–µ–Ω—Ç–Ω–æ–π",
                    "code": "11.01.001"
                },
                {
                    "id": "work_009",
                    "name": "–£–∫–ª–∞–¥–∫–∞ –ª–∞–º–∏–Ω–∞—Ç–∞",
                    "code": "11.04.001"
                },
                {
                    "id": "work_010",
                    "name": "–ú–æ–Ω—Ç–∞–∂ –ø–æ–¥–≤–µ—Å–Ω–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞",
                    "code": "15.07.001"
                },
                {
                    "id": "work_011",
                    "name": "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Ç—Ä—É–± –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞",
                    "code": "18.01.001"  
                },
                {
                    "id": "work_012",
                    "name": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—Å–∏—Ç–µ–ª—è",
                    "code": "18.03.001"
                }
            ],
            "results": {
                "work_packages": []
            }
        }
        
        truth_path = os.path.join(self.test_project_path, "true.json")
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(mock_truth_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
        return self.test_project_path
    
    async def test_work_packager(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        
        print("üß™ === –¢–ï–°–¢ WORK_PACKAGER ===")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project_path = self.setup_test_project()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = WorkPackager()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ work_packager...")
            result = await agent.process(project_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                print("‚úÖ –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {result.get('work_packages_created', 0)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π true.json
                truth_path = os.path.join(project_path, "true.json")
                with open(truth_path, 'r', encoding='utf-8') as f:
                    updated_truth = json.load(f)
                
                work_packages = updated_truth.get('results', {}).get('work_packages', [])
                
                print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç:")
                for i, pkg in enumerate(work_packages, 1):
                    print(f"  {i}. {pkg.get('package_id')}: {pkg.get('name')}")
                    print(f"     {pkg.get('description', '')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∞–≥–µ–Ω—Ç–∞
                agent_folder = os.path.join(project_path, "4_work_packager")
                if os.path.exists(agent_folder):
                    files = os.listdir(agent_folder)
                    print(f"üìÅ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã: {files}")
                
                # –ë–∞–∑–æ–≤—ã–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                assert len(work_packages) > 0, "–ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç"
                assert len(work_packages) <= 10, "–°–æ–∑–¥–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–æ–≤"
                
                for pkg in work_packages:
                    assert 'package_id' in pkg, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç package_id"
                    assert 'name' in pkg, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç name"
                    assert 'description' in pkg, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç description"
                    assert pkg['package_id'].startswith('pkg_'), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç package_id"
                
                print("‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
                return True
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞: {result.get('error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
        
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
                print(f"üßπ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {self.test_project_path}")
    
    async def test_input_extraction(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        print("üß™ === –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===")
        
        project_path = self.setup_test_project()
        
        try:
            agent = WorkPackager()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º true.json
            truth_path = os.path.join(project_path, "true.json")
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            input_data = agent._extract_input_data(truth_data)
            
            print("üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"  - –†–∞–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(input_data['source_work_items'])}")
            print(f"  - –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: {input_data['target_work_package_count']}")
            print(f"  - –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{input_data['user_directive']}'")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏–∏
            assert len(input_data['source_work_items']) == 12, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç"
            assert input_data['target_work_package_count'] == 8, "–ù–µ–≤–µ—Ä–Ω–æ–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            assert '—ç–ª–µ–∫—Ç—Ä–∏–∫—É' in input_data['user_directive'], "–î–∏—Ä–µ–∫—Ç–∏–≤–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞"
            
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            return False
            
        finally:
            if self.test_project_path and os.path.exists(self.test_project_path):
                shutil.rmtree(self.test_project_path)
    
    async def test_prompt_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞"""
        
        print("üß™ === –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ü–†–û–ú–ü–¢–ê ===")
        
        try:
            agent = WorkPackager()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–º–ø—Ç–∞
            prompt = agent._load_prompt()
            
            print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–º–ø—Ç, –¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            assert '{source_work_items}' in prompt, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç placeholder –¥–ª—è —Ä–∞–±–æ—Ç"
            assert '{target_work_package_count}' in prompt, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç placeholder –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
            assert '{user_directive}' in prompt, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç placeholder –¥–ª—è –¥–∏—Ä–µ–∫—Ç–∏–≤—ã"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            mock_input = {
                'source_work_items': [{'id': '1', 'name': 'Test'}],
                'target_work_package_count': 5,
                'user_directive': 'test directive',
                'total_work_items': 1
            }
            
            formatted = agent._format_prompt(mock_input, prompt)
            
            assert 'test directive' in formatted, "–î–∏—Ä–µ–∫—Ç–∏–≤–∞ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞"
            assert '5' in formatted, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ"
            
            print("‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ work_packager.py")
    print("=" * 50)
    
    tester = TestWorkPackager()
    
    tests = [
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", tester.test_input_extraction),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", tester.test_prompt_loading),
        ("–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≥–µ–Ω—Ç–∞", tester.test_work_packager)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        
        try:
            success = await test_func()
            results.append((test_name, success))
            
            if success:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã!")
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(run_all_tests())
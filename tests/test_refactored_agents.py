#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã pattern "system_instruction + user_prompt"
"""

import asyncio
import json
import os
import sys
import logging
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/home/imort/Herzog_v3')

from src.ai_agents.counter import WorkVolumeCalculator
from src.ai_agents.works_to_packages import WorksToPackagesAssigner
from src.ai_agents.scheduler_and_staffer import SchedulerAndStaffer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_counter_format_prompt():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π _format_prompt –º–µ—Ç–æ–¥ –∞–≥–µ–Ω—Ç–∞ Counter"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Counter._format_prompt")

    agent = WorkVolumeCalculator()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    input_data = {
        'package': {
            'package_id': 'pkg_001',
            'name': '–î–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
        },
        'works': [
            {'id': 'work_001', 'name': '–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫', 'unit': '–º¬≤', 'quantity': 45.5}
        ],
        'user_directive': '—Å—á–∏—Ç–∞–π –ø–ª–æ—â–∞–¥–∏ —Ç–æ—á–Ω–æ'
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt_template = agent._load_prompt()

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ (–∫–æ—Ä—Ç–µ–∂)
        system_instruction, user_prompt = agent._format_prompt(input_data, prompt_template)

        print(f"‚úÖ System instruction –ø–æ–ª—É—á–µ–Ω–∞: {len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úÖ User prompt –ø–æ–ª—É—á–µ–Ω: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ user_prompt –≤–∞–ª–∏–¥–Ω—ã–π JSON
        user_data = json.loads(user_prompt)

        assert 'package' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'package' –≤ user_prompt"
        assert 'works' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'works' –≤ user_prompt"
        assert 'user_directive' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'user_directive' –≤ user_prompt"

        print("‚úÖ Counter._format_prompt —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Counter._format_prompt: {e}")
        return False

async def test_works_to_packages_format_prompt():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π _format_prompt –º–µ—Ç–æ–¥ –∞–≥–µ–Ω—Ç–∞ WorksToPackagesAssigner"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WorksToPackagesAssigner._format_prompt")

    agent = WorksToPackagesAssigner()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    input_data = {
        'work_packages': [
            {'package_id': 'pkg_001', 'name': '–î–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'}
        ],
        'batch_works': [
            {'id': 'work_001', 'name': '–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫', 'code': '01-01-001'}
        ],
        'batch_number': 1
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt_template = agent._load_prompt()

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ (–∫–æ—Ä—Ç–µ–∂)
        system_instruction, user_prompt = agent._format_prompt(input_data, prompt_template)

        print(f"‚úÖ System instruction –ø–æ–ª—É—á–µ–Ω–∞: {len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úÖ User prompt –ø–æ–ª—É—á–µ–Ω: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ user_prompt –≤–∞–ª–∏–¥–Ω—ã–π JSON
        user_data = json.loads(user_prompt)

        assert 'work_packages' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'work_packages' –≤ user_prompt"
        assert 'batch_works' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'batch_works' –≤ user_prompt"
        assert 'batch_number' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'batch_number' –≤ user_prompt"

        print("‚úÖ WorksToPackagesAssigner._format_prompt —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ WorksToPackagesAssigner._format_prompt: {e}")
        return False

async def test_scheduler_format_prompt():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π _format_prompt –º–µ—Ç–æ–¥ –∞–≥–µ–Ω—Ç–∞ SchedulerAndStaffer"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SchedulerAndStaffer._format_prompt")

    agent = SchedulerAndStaffer()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    input_data = {
        'work_packages': [
            {
                'package_id': 'pkg_001',
                'package_name': '–î–µ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
                'total_volume': {'quantity': 150.0, 'unit': '–º¬≤'}
            }
        ],
        'timeline_blocks': [
            {'week_id': 1, 'start_date': '2024-01-01', 'end_date': '2024-01-07'}
        ],
        'workforce_range': {'min': 10, 'max': 20},
        'user_directive': '–ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Ç–∞–∂'
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt_template = agent._load_prompt()

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ (–∫–æ—Ä—Ç–µ–∂)
        system_instruction, user_prompt = agent._format_prompt(input_data, prompt_template)

        print(f"‚úÖ System instruction –ø–æ–ª—É—á–µ–Ω–∞: {len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úÖ User prompt –ø–æ–ª—É—á–µ–Ω: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ user_prompt –≤–∞–ª–∏–¥–Ω—ã–π JSON
        user_data = json.loads(user_prompt)

        assert 'work_packages' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'work_packages' –≤ user_prompt"
        assert 'timeline_blocks' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'timeline_blocks' –≤ user_prompt"
        assert 'workforce_range' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'workforce_range' –≤ user_prompt"
        assert 'user_directive' in user_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'user_directive' –≤ user_prompt"

        print("‚úÖ SchedulerAndStaffer._format_prompt —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SchedulerAndStaffer._format_prompt: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")

    results = []

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç
    results.append(await test_counter_format_prompt())
    results.append(await test_works_to_packages_format_prompt())
    results.append(await test_scheduler_format_prompt())

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {sum(results)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}")

    if all(results):
        print("\nüéâ –í–°–ï –ê–ì–ï–ù–¢–´ –û–¢–†–ï–§–ê–ö–¢–û–†–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω 'system_instruction + user_prompt' –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º")
        print("‚úÖ –û—à–∏–±–∫–∏ RECITATION –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ï!")
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–≥–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

    return True

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import os
import json
import traceback
from typing import Dict, Any

def print_separator(title: str):
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print("\n" + "="*60)
    print(f" {title}")
    print("="*60)

def check_input_data_structure(agent_name: str, input_data: Dict):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã input_data –¥–ª—è {agent_name}:")

    if not input_data:
        print("‚ùå input_data –ø—É—Å—Ç–æ–π!")
        return False

    print(f"‚úÖ –ö–ª—é—á–∏ –≤ input_data: {list(input_data.keys())}")

    for key, value in input_data.items():
        if isinstance(value, list):
            print(f"  üìã {key}: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        elif isinstance(value, dict):
            print(f"  üìö {key}: —Å–ª–æ–≤–∞—Ä—å —Å {len(value)} –∫–ª—é—á–∞–º–∏")
        else:
            print(f"  üìù {key}: {type(value).__name__} = {value}")

    return True

async def test_work_packager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç work_packager –∞–≥–µ–Ω—Ç"""
    print_separator("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORK_PACKAGER")

    try:
        # –ò–º–ø–æ—Ä—Ç—ã
        from src.ai_agents.work_packager import WorkPackager

        # –ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        project_path = "/home/imort/Herzog_v3/projects/34975055/b41f5b27"
        truth_path = os.path.join(project_path, "true.json")

        if not os.path.exists(truth_path):
            print(f"‚ùå –§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º truth.json
        with open(truth_path, 'r', encoding='utf-8') as f:
            truth_data = json.load(f)

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω truth.json: {len(truth_data)} –∫–ª—é—á–µ–π")

        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        agent = WorkPackager()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º _extract_input_data
        input_data = agent._extract_input_data(truth_data)

        if not check_input_data_structure("work_packager", input_data):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏
        required_keys = ['source_work_items', 'target_work_package_count', 'user_directive']
        missing_keys = [key for key in required_keys if key not in input_data]

        if missing_keys:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing_keys}")
            return False

        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ debug_data
        try:
            debug_data = {
                "work_items": input_data['source_work_items'],
                "user_directive": input_data['user_directive'],
                "target_package_count": input_data['target_work_package_count'],
                "meta": {
                    "works_count": len(input_data['source_work_items']),
                    "target_packages": input_data['target_work_package_count']
                }
            }
            print("‚úÖ debug_data —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –†–∞–±–æ—Ç: {debug_data['meta']['works_count']}, —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: {debug_data['meta']['target_packages']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è debug_data: {e}")
            return False

        print("üéâ work_packager –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ work_packager: {e}")
        print(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False

async def test_counter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç counter –∞–≥–µ–Ω—Ç"""
    print_separator("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï COUNTER")

    try:
        from src.ai_agents.counter import WorkVolumeCalculator

        project_path = "/home/imort/Herzog_v3/projects/34975055/f77f33ea"  # –ü—Ä–æ–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ counter
        truth_path = os.path.join(project_path, "true.json")

        if not os.path.exists(truth_path):
            print(f"‚ùå –§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
            return False

        with open(truth_path, 'r', encoding='utf-8') as f:
            truth_data = json.load(f)

        work_packages = truth_data.get('results', {}).get('work_packages', [])
        source_work_items = truth_data.get('source_work_items', [])

        print(f"‚úÖ –ü–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç: {len(work_packages)}")
        print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç: {len(source_work_items)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç—ã –∏–º–µ—é—Ç package_id
        works_with_packages = [w for w in source_work_items if w.get('package_id')]
        print(f"‚úÖ –†–∞–±–æ—Ç —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏: {len(works_with_packages)}")

        if not works_with_packages:
            print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—Ç —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏!")
            return False

        print("üéâ counter –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!")
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ counter: {e}")
        print(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False

async def test_works_to_packages():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç works_to_packages –∞–≥–µ–Ω—Ç"""
    print_separator("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKS_TO_PACKAGES")

    try:
        from src.ai_agents.works_to_packages import WorksToPackagesAssigner

        project_path = "/home/imort/Herzog_v3/projects/34975055/b41f5b27"  # –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        truth_path = os.path.join(project_path, "true.json")

        if not os.path.exists(truth_path):
            print(f"‚ùå –§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
            return False

        with open(truth_path, 'r', encoding='utf-8') as f:
            truth_data = json.load(f)

        work_packages = truth_data.get('results', {}).get('work_packages', [])
        source_work_items = truth_data.get('source_work_items', [])

        print(f"‚úÖ –ü–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç: {len(work_packages)}")
        print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç: {len(source_work_items)}")

        if not work_packages:
            print("‚ùå –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç! –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å work_packager")
            return False

        print("üéâ works_to_packages –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!")
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ works_to_packages: {e}")
        print(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False

async def test_scheduler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç scheduler_and_staffer –∞–≥–µ–Ω—Ç"""
    print_separator("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SCHEDULER_AND_STAFFER")

    try:
        from src.ai_agents.scheduler_and_staffer import SchedulerAndStaffer

        project_path = "/home/imort/Herzog_v3/projects/34975055/f77f33ea"  # –ü—Ä–æ–µ–∫—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        truth_path = os.path.join(project_path, "true.json")

        if not os.path.exists(truth_path):
            print(f"‚ùå –§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
            return False

        with open(truth_path, 'r', encoding='utf-8') as f:
            truth_data = json.load(f)

        work_packages = truth_data.get('results', {}).get('work_packages', [])
        timeline_blocks = truth_data.get('timeline_blocks', [])

        print(f"‚úÖ –ü–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç: {len(work_packages)}")
        print(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {len(timeline_blocks)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–∫–µ—Ç—ã –∏–º–µ—é—Ç volume_data
        packages_with_calcs = [p for p in work_packages if 'volume_data' in p]
        print(f"‚úÖ –ü–∞–∫–µ—Ç–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏: {len(packages_with_calcs)}")

        if not packages_with_calcs:
            print("‚ùå –ü–∞–∫–µ—Ç—ã –Ω–µ –∏–º–µ—é—Ç volume_data! –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å counter")
            return False

        print("üéâ scheduler_and_staffer –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!")
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ scheduler: {e}")
        print(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print_separator("üöÄ –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ì–ï–ù–¢–û–í –°–ò–°–¢–ï–ú–´")

    results = {}

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç
    results['work_packager'] = await test_work_packager()
    results['counter'] = await test_counter()
    results['works_to_packages'] = await test_works_to_packages()
    results['scheduler'] = await test_scheduler()

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_separator("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")

    success_count = sum(results.values())
    total_count = len(results)

    for agent, success in results.items():
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{agent:20} {status}")

    print(f"\nüéØ –ò–¢–û–ì–û: {success_count}/{total_count} –∞–≥–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")

    if success_count == total_count:
        print("üéâ –í–°–ï –ê–ì–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –°–º–æ—Ç—Ä–∏ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    asyncio.run(main())
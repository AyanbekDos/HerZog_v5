#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Claude API —á–µ—Ä–µ–∑ OpenRouter
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
"""

import asyncio
import logging
import os
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

async def test_claude_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Claude API"""
    print("üß™ === –¢–ï–°–¢ CLAUDE API –ß–ï–†–ï–ó OPENROUTER ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False

    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        from src.shared.claude_client import ClaudeClient
        client = ClaudeClient()

        print(f"‚úÖ ClaudeClient —Å–æ–∑–¥–∞–Ω")
        print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {client.test_mode}")
        print(f"üéØ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {client.model_name}")

        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print("\n--- –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å ---")
        simple_prompt = """
        –û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {
            "status": "success",
            "message": "–ü—Ä–∏–≤–µ—Ç –æ—Ç Claude!",
            "test_number": 1
        }
        """

        result = await client.generate_response(
            prompt=simple_prompt,
            agent_name="test_agent"
        )

        if result['success']:
            print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {result['usage_metadata']['total_token_count']}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('estimated_cost', 0):.4f}")
            print(f"üìù –û—Ç–≤–µ—Ç: {result['response']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {result['error']}")
            return False

        # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        print("\n--- –¢–ï–°–¢ 2: –ó–∞–ø—Ä–æ—Å —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ---")
        system_instruction = """
        –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ —á–µ—Ç–æ–∫.
        """

        prompt_with_system = """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —ç—Ç—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        "–î–µ–º–æ–Ω—Ç–∞–∂ –∫–∏—Ä–ø–∏—á–Ω–æ–π —Å—Ç–µ–Ω—ã —Ç–æ–ª—â–∏–Ω–æ–π 120–º–º"

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        {
            "category": "demolition",
            "type": "wall",
            "material": "brick",
            "complexity": "medium"
        }
        """

        result2 = await client.generate_response(
            prompt=prompt_with_system,
            agent_name="classifier",
            system_instruction=system_instruction
        )

        if result2['success']:
            print("‚úÖ –ó–∞–ø—Ä–æ—Å —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –¢–æ–∫–µ–Ω—ã: {result2['usage_metadata']['total_token_count']}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result2.get('estimated_cost', 0):.4f}")
            print(f"üìù –û—Ç–≤–µ—Ç: {result2['response']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: {result2['error']}")
            return False

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = client.get_usage_stats()
        print(f"\nüìà === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í ===")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_input_tokens']}")
        print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_output_tokens']}")
        print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${stats['estimated_cost']:.4f}")

        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüß™ === –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===")

    try:
        from src.shared.claude_client import ClaudeClient
        client = ClaudeClient()

        # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON
        print("\n--- –¢–ï–°–¢: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –ø—Ä–æ–º—Ç ---")
        bad_json_prompt = """
        –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ JSON:
        –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –Ω–µ JSON –æ—Ç–≤–µ—Ç!
        """

        result = await client.generate_response(
            prompt=bad_json_prompt,
            agent_name="test_agent",
            max_retries=2  # –ú–µ–Ω—å—à–µ —Ä–µ—Ç—Ä–∞–µ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        )

        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON: {result['success']}")
        if not result['success']:
            print(f"–û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {result['error']}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")

if __name__ == "__main__":
    async def main():
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Claude API...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        os.environ['CLAUDE_TEST_MODE'] = 'true'

        success = await test_claude_basic()

        if success:
            print("\n‚úÖ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            await test_error_handling()
        else:
            print("\n‚ùå –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
            return

        print("\nüéØ –ì–æ—Ç–æ–≤–æ! Claude API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("üí° –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∞–≥–µ–Ω—Ç–æ–≤.")

    asyncio.run(main())
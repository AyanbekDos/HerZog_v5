#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ Claude Sonnet 4 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import aiohttp
import os
from dotenv import load_dotenv

load_dotenv()

async def test_real_claude_sonnet4():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è Claude Sonnet 4"""
    print("üîç === –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û CLAUDE SONNET 4 ===")

    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    model_variants = [
        'anthropic/claude-sonnet-4',
        'openrouter:anthropic/claude-sonnet-4',
        'anthropic/claude-sonnet-4-20250514',
        'anthropic/claude-4-sonnet'
    ]

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/imort/Herzog_v3",
        "X-Title": "Herzog Sonnet 4 Test"
    }

    base_url = "https://openrouter.ai/api/v1/chat/completions"

    for model in model_variants:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {model}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏
        payload = {
            "model": model,
            "messages": [
                {
                    "role": "user",
                    "content": "–û—Ç–≤–µ—Ç—å –¢–û–ß–ù–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: {'model_family': 'claude', 'version': '—Ç–≤–æ—è –≤–µ—Ä—Å–∏—è', 'capabilities': ['—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å'], 'is_sonnet_4': true/false}"
                }
            ],
            "max_tokens": 200,
            "temperature": 0.1
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(base_url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        content = data.get('choices', [{}])[0].get('message', {}).get('content', '')
                        usage = data.get('usage', {})

                        print(f"  ‚úÖ –†–ê–ë–û–¢–ê–ï–¢!")
                        print(f"  üìä –¢–æ–∫–µ–Ω—ã: –≤—Ö–æ–¥={usage.get('prompt_tokens', 'N/A')}, –≤—ã—Ö–æ–¥={usage.get('completion_tokens', 'N/A')}")
                        print(f"  üí∞ –û–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {usage.get('total_tokens', 'N/A')}")
                        print(f"  ü§ñ –û—Ç–≤–µ—Ç: {content.strip()[:200]}...")

                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –Ω–æ–≤—ã–º —Ü–µ–Ω–∞–º
                        input_tokens = usage.get('prompt_tokens', 0)
                        output_tokens = usage.get('completion_tokens', 0)

                        # –¶–µ–Ω—ã –∏–∑ –ø–æ–∏—Å–∫–∞: input=$0.000003, output=$0.000015
                        input_cost = input_tokens * 0.000003
                        output_cost = output_tokens * 0.000015
                        total_cost = input_cost + output_cost

                        print(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${total_cost:.6f} (–≤—Ö–æ–¥: ${input_cost:.6f}, –≤—ã—Ö–æ–¥: ${output_cost:.6f})")

                    elif response.status == 400:
                        data = await response.json()
                        error = data.get('error', {}).get('message', 'Unknown error')
                        print(f"  ‚ùå –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø: {error}")

                    elif response.status == 429:
                        print(f"  ‚è∞ RATE LIMIT")

                    else:
                        print(f"  ‚ùì HTTP {response.status}")

        except Exception as e:
            print(f"  üí• –û–®–ò–ë–ö–ê: {e}")

    print(f"\nüéØ === –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    print("–ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç - —ç—Ç–æ –∏ –µ—Å—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π Sonnet 4!")

async def test_with_real_task():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    print(f"\nüß† === –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –ú–û–î–ï–õ–ò ===")

    # –ë–µ—Ä–µ–º –ª—É—á—à—É—é —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
    model = 'anthropic/claude-sonnet-4'

    api_key = os.getenv('OPENROUTER_API_KEY')
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/imort/Herzog_v3",
        "X-Title": "Herzog Quality Test"
    }

    base_url = "https://openrouter.ai/api/v1/chat/completions"

    # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç
    complex_prompt = """
–°–≥—Ä—É–ø–ø–∏—Ä—É–π —ç—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã. –û—Ç–≤–µ—Ç—å –≤ JSON:

–†–∞–±–æ—Ç—ã:
1. –î–µ–º–æ–Ω—Ç–∞–∂ –∫–∏—Ä–ø–∏—á–Ω–æ–π –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏ 120–º–º - 45–º¬≤
2. –î–µ–º–æ–Ω—Ç–∞–∂ –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–Ω–æ–π –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏ - 30–º¬≤
3. –®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω —Ü–µ–º–µ–Ω—Ç–Ω–∞—è - 150–º¬≤
4. –®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω –≥–∏–ø—Å–æ–≤–∞—è - 80–º¬≤
5. –ì—Ä—É–Ω—Ç–æ–≤–∫–∞ —Å—Ç–µ–Ω - 230–º¬≤
6. –ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è - 230–º¬≤
7. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ç—è–∂–∫–∏ –ø–æ–ª–∞ - 200–º¬≤
8. –£–∫–ª–∞–¥–∫–∞ –∫–µ—Ä–∞–º–æ–≥—Ä–∞–Ω–∏—Ç–∞ - 200–º¬≤

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
  "packages": [
    {
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞",
      "category": "demolition/preparation/finishing/flooring",
      "works": ["—Å–ø–∏—Å–æ–∫ id —Ä–∞–±–æ—Ç"],
      "reasoning": "–ø–æ—á–µ–º—É —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –≤–º–µ—Å—Ç–µ"
    }
  ]
}
"""

    payload = {
        "model": model,
        "messages": [{"role": "user", "content": complex_prompt}],
        "max_tokens": 1000,
        "temperature": 0.3
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(base_url, json=payload, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    content = data.get('choices', [{}])[0].get('message', {}).get('content', '')
                    usage = data.get('usage', {})

                    print(f"‚úÖ –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                    print(f"üìä –¢–æ–∫–µ–Ω—ã: {usage.get('total_tokens', 'N/A')}")
                    print(f"üß† –û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
                    print(content[:500] + "...")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ JSON
                    try:
                        import json
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        if "{" in content and "}" in content:
                            start = content.find("{")
                            end = content.rfind("}") + 1
                            json_part = content[start:end]
                            parsed = json.loads(json_part)
                            print(f"‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π, –ø–∞–∫–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(parsed.get('packages', []))}")
                        else:
                            print(f"‚ö†Ô∏è  JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                    except Exception as e:
                        print(f"‚ùå JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: {e}")

                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: HTTP {response.status}")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    async def main():
        await test_real_claude_sonnet4()
        await test_with_real_task()

    asyncio.run(main())
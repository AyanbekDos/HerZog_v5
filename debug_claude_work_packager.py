#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ work_packager –∞–≥–µ–Ω—Ç–∞ —Å Claude
–°–º–æ—Ç—Ä–∏–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Claude
"""

import asyncio
import json
import logging
import os
import tempfile
from pathlib import Path
from dotenv import load_dotenv

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –¥–∞–Ω–Ω—ã–µ
MINIMAL_DATA = {
    "meta": {
        "user_id": "debug_user",
        "project_id": "debug_project",
        "current_stage": "3_prepared"
    },
    "directives": {
        "target_package_count": 2,
        "project_timeline": {"start_date": "2024-01-01", "end_date": "2024-01-14", "total_weeks": 2},
        "workforce": {"min": 3, "max": 6, "average": 4},
        "special_instructions": {"work_packager": "—Å–æ–∑–¥–∞–π 2 –ø–∞–∫–µ—Ç–∞"}
    },
    "timeline_blocks": [
        {"week_id": 1, "start_date": "2024-01-01", "end_date": "2024-01-07", "days_count": 7},
        {"week_id": 2, "start_date": "2024-01-08", "end_date": "2024-01-14", "days_count": 7}
    ],
    "packages": [],
    "work_items": [
        {
            "id": "work_001",
            "name": "–î–µ–º–æ–Ω—Ç–∞–∂",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 10.0,
            "unit_cost": 500.0,
            "total_cost": 5000.0,
            "category": "demolition"
        },
        {
            "id": "work_002",
            "name": "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞",
            "classification": "work",
            "unit": "–º¬≤",
            "quantity": 20.0,
            "unit_cost": 800.0,
            "total_cost": 16000.0,
            "category": "finishing"
        }
    ]
}

async def debug_work_packager():
    """–û—Ç–ª–∞–¥–∫–∞ work_packager —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ Claude"""
    print("üîç === –û–¢–õ–ê–î–ö–ê WORK PACKAGER ===")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    os.environ['CLAUDE_TEST_MODE'] = 'true'

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    temp_dir = tempfile.mkdtemp(prefix="debug_work_packager_")
    project_dir = Path(temp_dir) / "projects" / "debug_user" / "debug_project"
    project_dir.mkdir(parents=True, exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º true.json
    truth_file = project_dir / "true.json"
    with open(truth_file, 'w', encoding='utf-8') as f:
        json.dump(MINIMAL_DATA, f, ensure_ascii=False, indent=2)

    print(f"üìÑ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_dir}")
    print(f"üìÑ truth.json: {truth_file}")

    try:
        # –ù–∞–ø—Ä—è–º—É—é —Ç–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Claude –∫–ª–∏–µ–Ω—Ç
        from src.shared.claude_client import claude_client

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º—Ç work_packager
        prompt_path = "src/prompts/work_packager_prompt.txt"
        with open(prompt_path, 'r', encoding='utf-8') as f:
            system_prompt = f.read()

        print(f"‚úÖ –ü—Ä–æ–º—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –¥–µ–ª–∞–µ—Ç –∞–≥–µ–Ω—Ç
        data_for_prompt = json.dumps(MINIMAL_DATA, ensure_ascii=False, indent=2)
        user_prompt = f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç –≤ –ø–∞–∫–µ—Ç—ã:\n\n{data_for_prompt}"

        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å Claude –Ω–∞–ø—Ä—è–º—É—é...")
        print(f"üìù –ü—Ä–æ–º—Ç: {len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –í—ã–∑—ã–≤–∞–µ–º Claude
        result = await claude_client.generate_response(
            prompt=user_prompt,
            agent_name="work_packager",
            system_instruction=system_prompt,
            max_retries=3
        )

        print(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢ CLAUDE ===")
        print(f"–£—Å–ø–µ—Ö: {result['success']}")
        print(f"–¢–æ–∫–µ–Ω—ã: {result.get('usage_metadata', {}).get('total_token_count', 'N/A')}")
        print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ~${result.get('estimated_cost', 0):.4f}")

        if result['success']:
            response = result['response']
            print(f"\nüìã –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}")

            if isinstance(response, dict):
                print(f"üìã –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(response.keys())}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                print(f"\nüìÑ === –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ CLAUDE ===")
                print(json.dumps(response, ensure_ascii=False, indent=2))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
                expected_fields = ['results', 'metadata', 'packages', 'work_packages']
                for field in expected_fields:
                    if field in response:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ '{field}': {type(response[field])}")
                        if isinstance(response[field], list):
                            print(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(response[field])}")
                    else:
                        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")

            else:
                print(f"üìã –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è dict: {str(response)[:200]}...")

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Claude: {result.get('error', 'Unknown')}")

        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        print(f"\nüéØ === –¢–ï–°–¢ –ß–ï–†–ï–ó –ê–ì–ï–ù–¢ ===")

        from src.ai_agents.work_packager import run_work_packager

        agent_result = await run_work_packager(str(project_dir))

        print(f"–ê–≥–µ–Ω—Ç —É—Å–ø–µ—Ö: {agent_result.get('success', False) if agent_result else False}")
        if agent_result:
            print(f"–ê–≥–µ–Ω—Ç –æ—à–∏–±–∫–∞: {agent_result.get('error', 'No error')}")
            if 'result' in agent_result:
                print(f"–ê–≥–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∏–ø: {type(agent_result['result'])}")

    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import shutil
        try:
            shutil.rmtree(temp_dir)
            print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞: {temp_dir}")
        except:
            pass

if __name__ == "__main__":
    asyncio.run(debug_work_packager())
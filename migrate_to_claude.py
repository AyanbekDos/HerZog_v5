#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å Gemini –Ω–∞ Claude
–°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ –∑–∞–º–µ–Ω—è–µ—Ç import –≤ –∞–≥–µ–Ω—Ç–∞—Ö
"""

import os
import shutil
import logging
from typing import List
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
AGENT_FILES = [
    'src/ai_agents/work_packager.py',
    'src/ai_agents/works_to_packages.py',
    'src/ai_agents/counter.py',
    'src/ai_agents/scheduler_and_staffer.py',
    'src/data_processing/gemini_classifier.py'
]

# –ü–∞—Ç—Ç–µ—Ä–Ω –∑–∞–º–µ–Ω—ã
OLD_IMPORT = "from ..shared.gemini_client import gemini_client"
NEW_IMPORT = "from ..shared.claude_client import claude_client as gemini_client  # Migrated to Claude"

OLD_IMPORT_CLASSIFIER = "from ..shared.gemini_client import gemini_client"
NEW_IMPORT_CLASSIFIER = "from ..shared.claude_client import claude_client as gemini_client  # Migrated to Claude"

def create_backup(file_path: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_path = f"{file_path}.gemini_backup"

    if os.path.exists(backup_path):
        logger.info(f"üìã Backup —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {backup_path}")
        return backup_path

    shutil.copy2(file_path, backup_path)
    logger.info(f"üíæ –°–æ–∑–¥–∞–Ω backup: {backup_path}")
    return backup_path

def migrate_agent_file(file_path: str) -> bool:
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –∞–≥–µ–Ω—Ç–∞"""
    if not os.path.exists(file_path):
        logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False

    # –°–æ–∑–¥–∞—ë–º backup
    backup_path = create_backup(file_path)

    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º import
        old_content = content

        # –ó–∞–º–µ–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        if OLD_IMPORT in content:
            content = content.replace(OLD_IMPORT, NEW_IMPORT)
            logger.info(f"‚úÖ –ó–∞–º–µ–Ω—ë–Ω import –≤ {file_path}")

        # –ó–∞–º–µ–Ω–∞ –¥–ª—è classifier (–º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–π –ø—É—Ç—å)
        elif "from ..shared.gemini_client import gemini_client" in content:
            content = content.replace("from ..shared.gemini_client import gemini_client", NEW_IMPORT_CLASSIFIER)
            logger.info(f"‚úÖ –ó–∞–º–µ–Ω—ë–Ω import classifier –≤ {file_path}")

        elif "from src.shared.gemini_client import gemini_client" in content:
            content = content.replace("from src.shared.gemini_client import gemini_client",
                                     "from src.shared.claude_client import claude_client as gemini_client  # Migrated to Claude")
            logger.info(f"‚úÖ –ó–∞–º–µ–Ω—ë–Ω –∞–±—Å–æ–ª—é—Ç–Ω—ã–π import –≤ {file_path}")

        else:
            logger.info(f"‚ÑπÔ∏è  –ù–∏–∫–∞–∫–∏—Ö –∑–∞–º–µ–Ω –≤ {file_path} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return True

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
        if content != old_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            logger.info(f"üíæ –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {file_path}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {file_path}: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ backup
        if os.path.exists(backup_path):
            shutil.copy2(backup_path, file_path)
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ backup: {file_path}")
        return False

def update_env_file():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Claude –≤ .env –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    env_path = ".env"

    if not os.path.exists(env_path):
        logger.warning("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    with open(env_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if "CLAUDE_TEST_MODE" not in content:
        with open(env_path, 'a', encoding='utf-8') as f:
            f.write("\n# Claude API Settings\n")
            f.write("CLAUDE_TEST_MODE=true  # Set to 'false' for production (Sonnet 4)\n")
        logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Claude –≤ .env")
    else:
        logger.info("‚ÑπÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Claude —É–∂–µ –µ—Å—Ç—å –≤ .env")

def create_migration_report() -> str:
    """–°–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    report = []
    report.append("# –û—Ç—á—ë—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Claude API")
    report.append(f"–î–∞—Ç–∞: {os.popen('date').read().strip()}")
    report.append("")
    report.append("## –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")

    for file_path in AGENT_FILES:
        if os.path.exists(file_path):
            backup_path = f"{file_path}.gemini_backup"
            status = "‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω" if os.path.exists(backup_path) else "‚ùå –ù–ï –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω"
            report.append(f"- {file_path} - {status}")

    report.append("")
    report.append("## –ö–∞–∫ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    report.append("```bash")
    for file_path in AGENT_FILES:
        backup_path = f"{file_path}.gemini_backup"
        if os.path.exists(backup_path):
            report.append(f"cp {backup_path} {file_path}")
    report.append("```")

    report.append("")
    report.append("## –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    report.append("- CLAUDE_TEST_MODE=true (Claude 3.5 Sonnet, –¥–µ—à–µ–≤–ª–µ)")
    report.append("- CLAUDE_TEST_MODE=false (Claude Sonnet 4, –¥–æ—Ä–æ–∂–µ)")

    report_text = "\n".join(report)

    with open("claude_migration_report.md", 'w', encoding='utf-8') as f:
        f.write(report_text)

    return report_text

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ === –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê CLAUDE API ===")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–º–µ–Ω–∏—Ç Gemini –Ω–∞ Claude –≤–æ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–∞—Ö")
    print("")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    answer = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
    if answer not in ['y', 'yes', '–¥–∞']:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")

    # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    success_count = 0
    for file_path in AGENT_FILES:
        print(f"\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file_path}")
        if migrate_agent_file(file_path):
            success_count += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º .env
    print(f"\nüìù –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    update_env_file()

    # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
    print(f"\nüìä –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç...")
    report = create_migration_report()

    print(f"\nüéØ === –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{len(AGENT_FILES)} —Ñ–∞–π–ª–æ–≤")
    print(f"üìã –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: claude_migration_report.md")

    if success_count == len(AGENT_FILES):
        print("")
        print("üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("  python test_claude_agent.py")
        print("")
        print("üè≠ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("  CLAUDE_TEST_MODE=false –≤ .env")

    else:
        print("")
        print("‚ö†Ô∏è  –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

    print(f"\nüíæ Backup —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .gemini_backup")

if __name__ == "__main__":
    main()
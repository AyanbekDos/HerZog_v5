"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä AI –∞–≥–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã HerZog v3.0
–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –µ–¥–∏–Ω–æ–π —Å—Ö–µ–º–µ
"""

import json
import logging
import os
import requests
from typing import Dict, Any
from dotenv import load_dotenv

# –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É

load_dotenv()

def load_prompt_template(prompt_file: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        prompt_file: –ò–º—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–∞
        
    Returns:
        –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞
    """
    try:
        prompt_path = os.path.join(os.path.dirname(__file__), '../prompts', prompt_file)
        with open(prompt_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ {prompt_file}: {e}")
        raise

def call_gemini_api(prompt: str) -> str:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç Gemini API —Å –ø—Ä–æ–º–ø—Ç–æ–º
    
    Args:
        prompt: –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        
    Returns:
        –û—Ç–≤–µ—Ç –æ—Ç LLM
    """
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á GEMINI_API_KEY")
    
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key={api_key}"
    
    headers = {'Content-Type': 'application/json'}
    
    payload = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.1,
            "maxOutputTokens": 8192
        }
    }
    
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=120)
        
        if response.status_code == 200:
            data = response.json()
            return data['candidates'][0]['content']['parts'][0]['text']
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ API Gemini: {response.status_code} - {response.text}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {e}")
        raise

def run_agent(agent_name: str, project_dir: str) -> bool:
    """
    –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É true.json
    
    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏–∑ agent_config
        project_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        
    Returns:
        True –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
    """
    
    logging.warning(f"üîÑ DEPRECATED: –§—É–Ω–∫—Ü–∏—è run_agent —É—Å—Ç–∞—Ä–µ–ª–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ '{agent_name}'")
    logging.warning("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ main_pipeline.py –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False - –Ω–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ main_pipeline
    return False

def run_pipeline(project_dir: str, start_from: str = "work_packager") -> bool:
    """
    DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —á–µ—Ä–µ–∑ main_pipeline.py
    
    Args:
        project_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        start_from: –° –∫–∞–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    """
    
    logging.warning("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è run_pipeline. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main_pipeline.py")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
    from ..main_pipeline import run_pipeline as new_run_pipeline
    import asyncio
    
    try:
        result = asyncio.run(new_run_pipeline(project_dir))
        return result.get('success', False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        return False

if __name__ == "__main__":
    import sys
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    if len(sys.argv) == 3:
        # –ó–∞–ø—É—Å–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: agent_name project_dir
        agent_name = sys.argv[1]
        project_dir = sys.argv[2]
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ '{agent_name}' –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_dir}")
        success = run_agent(agent_name, project_dir)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    else:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ
        test_project_dir = "/home/imort/Herzog_v3/projects/34975055/d19120ef"
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ agent_runner...")
        
        if os.path.exists(test_project_dir):
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            success = run_agent("1.1_group_creator", test_project_dir)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_project_dir}")
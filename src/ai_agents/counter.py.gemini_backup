"""
–ê–≥–µ–Ω—Ç 3: "–°–º–µ—Ç—á–∏–∫" (counter.py)
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –æ–±—ä–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∫—Ä—É–ø–Ω–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç
"""

import json
import os
import asyncio
import logging
import uuid
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from collections import defaultdict

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
from ..shared.gemini_client import gemini_client
from ..shared.truth_initializer import update_pipeline_status

logger = logging.getLogger(__name__)

class WorkVolumeCalculator:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤ –ø–æ —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã–º –ø–∞–∫–µ—Ç–∞–º —Ä–∞–±–æ—Ç
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: —Å–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–æ—Ç–∏–ø–Ω–æ–≥–æ, –º–∞–∫—Å–∏–º—É–º –¥–ª—è –ø–ª–æ—â–∞–¥–µ–π "–ø–∏—Ä–æ–≥–∞"
    """
    
    def __init__(self):
        self.agent_name = "counter"

    
    async def process(self, project_path: str) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –æ–±—ä–µ–º–æ–≤
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º true.json
            truth_path = os.path.join(project_path, "true.json")
            if not os.path.exists(truth_path):
                raise FileNotFoundError(f"–§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
            
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
            update_pipeline_status(truth_path, self.agent_name, "in_progress")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
            agent_folder = os.path.join(project_path, "6_counter")
            os.makedirs(agent_folder, exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            work_packages = truth_data.get('results', {}).get('work_packages', [])
            source_work_items = truth_data.get('source_work_items', [])
            agent_directives = truth_data.get('project_inputs', {}).get('agent_directives', {})
            user_directive = agent_directives.get('counter') or agent_directives.get('accountant', '')
            
            if not work_packages:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω work_packager")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫ –ø–∞–∫–µ—Ç–∞–º
            works_with_packages = [w for w in source_work_items if w.get('package_id')]
            if not works_with_packages:
                raise Exception("–†–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫ –ø–∞–∫–µ—Ç–∞–º. –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω works_to_packages")
            
            logger.info(f"üìä –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤ –¥–ª—è {len(work_packages)} –ø–∞–∫–µ—Ç–æ–≤")
            logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(works_with_packages)} —Ä–∞–±–æ—Ç —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_template = self._load_prompt()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ –ø–∞–∫–µ—Ç–∞–º
            packages_with_works = self._group_works_by_packages(work_packages, works_with_packages)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
            calculated_packages = []
            for package_data in packages_with_works:
                logger.info(f"üî¢ –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–∞: {package_data['package']['name']}")
                
                calculated_package = await self._calculate_package_volumes(
                    package_data, user_directive, prompt_template, agent_folder
                )
                calculated_packages.append(calculated_package)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º true.json —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            self._update_truth_data(truth_data, calculated_packages, truth_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            update_pipeline_status(truth_path, self.agent_name, "completed")
            
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {self.agent_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(calculated_packages)} –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç")
            
            return {
                'success': True,
                'packages_calculated': len(calculated_packages),
                'agent': self.agent_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
            try:
                update_pipeline_status(truth_path, self.agent_name, "error")
            except:
                pass
            
            return {
                'success': False,
                'error': str(e),
                'agent': self.agent_name
            }
    
    def _group_works_by_packages(self, work_packages: List[Dict], 
                                source_work_items: List[Dict]) -> List[Dict]:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—ã –ø–æ –ø–∞–∫–µ—Ç–∞–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        packages_with_works = []
        
        for package in work_packages:
            package_id = package.get('package_id')
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            package_works = [
                work for work in source_work_items 
                if work.get('package_id') == package_id
            ]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
            works_for_ai = []
            for work in package_works:
                works_for_ai.append({
                    'id': work.get('id'),
                    'name': work.get('name', ''),
                    'code': work.get('code', ''),
                    'unit': work.get('unit', ''),
                    'quantity': work.get('quantity', 0.0)
                })
            
            packages_with_works.append({
                'package': package,
                'works': works_for_ai,
                'work_count': len(works_for_ai)
            })
        
        return packages_with_works
    
    async def _calculate_package_volumes(self, package_data: Dict, user_directive: str,
                                       prompt_template: str, agent_folder: str) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç
        """
        package = package_data['package']
        package_id = package.get('package_id')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI
        input_data = {
            'package': package,
            'works': package_data['works'],
            'user_directive': user_directive
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è LLM
        system_instruction, user_prompt = self._format_prompt(input_data, prompt_template)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–ª—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION
        salted_system_instruction = self._add_salt_to_prompt(system_instruction)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–∫–∞–∫ –≤ work_packager)
        debug_data = {
            "system_instruction": salted_system_instruction,
            "user_prompt": user_prompt
        }
        input_path = os.path.join(agent_folder, f"{package_id}_input.json")
        with open(input_path, 'w', encoding='utf-8') as f:
            json.dump(debug_data, f, ensure_ascii=False, indent=2)

        # –í—ã–∑—ã–≤–∞–µ–º Gemini API —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞–∫–µ—Ç–∞ {package_id} –≤ Gemini (counter -> gemini-2.5-flash-lite)")
        gemini_response = await gemini_client.generate_response(
            prompt=user_prompt,
            system_instruction=salted_system_instruction,
            agent_name="counter"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        response_path = os.path.join(agent_folder, f"{package_id}_response.json")
        with open(response_path, 'w', encoding='utf-8') as f:
            json.dump(gemini_response, f, ensure_ascii=False, indent=2)
        
        if not gemini_response.get('success', False):
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê Gemini API –¥–ª—è –ø–∞–∫–µ—Ç–∞ {package_id}: {gemini_response.get('error')}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini –¥–ª—è –ø–∞–∫–µ—Ç–∞ {package_id}: {gemini_response.get('error')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        calculation_result = self._process_calculation_response(
            gemini_response['response'], package, package_data['works']
        )
        
        return calculation_result
    
    def _load_prompt(self) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        """
        prompt_path = os.path.join(
            os.path.dirname(__file__), "..", "prompts", "counter_prompt.txt"
        )
        
        try:
            with open(prompt_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.warning(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
            return self._get_default_prompt()
    
    def _get_default_prompt(self) -> str:
        """
        –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-—Å–º–µ—Ç—á–∏–∫ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –æ–±—ä–µ–º—ã –¥–ª—è –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç.

–ü–ê–ö–ï–¢ –†–ê–ë–û–¢:
{package}

–í–•–û–î–Ø–©–ò–ï –†–ê–ë–û–¢–´:
{works}

–î–ò–†–ï–ö–¢–ò–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_directive}

–ü–†–ê–í–ò–õ–ê –†–ê–°–ß–ï–¢–ê –û–ë–™–ï–ú–û–í:
1. –°–õ–û–ñ–ï–ù–ò–ï: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (–º¬≤, –º¬≥, —à—Ç) - —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
2. –ú–ê–ö–°–ò–ú–£–ú: –î–ª—è "—Å–ª–æ–µ–Ω—ã—Ö" –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–ø–æ–ª, –ø–æ—Ç–æ–ª–æ–∫, —Å—Ç–µ–Ω—ã) - –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å
3. –õ–û–ì–ò–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–º—ã—Å–ª —Ä–∞–±–æ—Ç - —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞
4. –û–ö–†–£–ì–õ–ï–ù–ò–ï: –ò—Ç–æ–≥–æ–≤—ã–µ –æ–±—ä–µ–º—ã –æ–∫—Ä—É–≥–ª—è–π –¥–æ —Ä–∞–∑—É–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

–ü–†–ò–ú–ï–†–´:
- –î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–ª–∞ (3 –≤–∏–¥–∞) ‚Üí –º–∞–∫—Å. –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∞
- –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª–∞ (—Å—Ç—è–∂–∫–∞ + –ø–æ–∫—Ä—ã—Ç–∏–µ) ‚Üí –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è)  
- –ú–æ–Ω—Ç–∞–∂ —Ç—Ä—É–± ‚Üí —Å—É–º–º–∞ –¥–ª–∏–Ω –≤—Å–µ—Ö —Ç—Ä—É–±
- –û–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω (–≥—Ä—É–Ω—Ç + –∫—Ä–∞—Å–∫–∞) ‚Üí –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω (–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è)

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ß–ò–¢–´–í–ê–ô –î–ò–†–ï–ö–¢–ò–í–£: {user_directive}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{{
    "calculation": {{
        "unit": "–º¬≤",
        "quantity": 150.0,
        "calculation_logic": "–í–∑—è—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∞ –∏–∑ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –¥–µ–º–æ–Ω—Ç–∞–∂–∞",
        "component_analysis": [
            {{"work_name": "–î–µ–º–æ–Ω—Ç–∞–∂ –ª–∏–Ω–æ–ª–µ—É–º–∞", "unit": "–º¬≤", "quantity": 120.0}},
            {{"work_name": "–î–µ–º–æ–Ω—Ç–∞–∂ —Å—Ç—è–∂–∫–∏", "unit": "–º¬≤", "quantity": 150.0}}
        ]
    }}
}}

–í–ê–ñ–ù–û: 
- unit –∏ quantity - —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –ø–∞–∫–µ—Ç–∞
- calculation_logic - –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞
- –ï—Å–ª–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã–µ, –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
"""
    
    def _add_salt_to_prompt(self, prompt: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–æ–ª—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION."""
        unique_id = str(uuid.uuid4())[:8]
        prefix = f"# ID: {unique_id} | –†–µ–∂–∏–º: JSON_STRICT\n"
        suffix = f"\n# –ö–æ–Ω—Ç—Ä–æ–ª—å: {unique_id}"
        return prefix + prompt + suffix

    def _format_prompt(self, input_data: Dict, prompt_template: str) -> Tuple[str, str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ system_instruction –∏ user_prompt

        Returns:
            Tuple[str, str]: (system_instruction, user_prompt)
        """
        # System instruction - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        system_instruction = prompt_template

        # User prompt - JSON —Å –¥–∞–Ω–Ω—ã–º–∏
        user_prompt_data = {
            'package': input_data['package'],
            'works': input_data['works'],
            'user_directive': input_data['user_directive']
        }
        user_prompt = json.dumps(user_prompt_data, ensure_ascii=False, indent=2)

        return system_instruction, user_prompt

    def _clean_and_parse_json(self, response_text: str) -> Dict:
        """
        –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç markdown –∏ –ø–∞—Ä—Å–∏—Ç JSON
        """
        try:
            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫ ```json ... ```
            import re

            # –ò—â–µ–º JSON –±–ª–æ–∫ –≤ markdown
            json_pattern = r'```(?:json)?\s*\n?(.*?)\n?```'
            match = re.search(json_pattern, response_text, re.DOTALL | re.IGNORECASE)

            if match:
                json_content = match.group(1).strip()
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç markdown –±–ª–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
                json_content = response_text.strip()

            # –ü–∞—Ä—Å–∏–º JSON
            return json.loads(json_content)

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {e}")
            logger.error(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {response_text[:200]}...")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            raise
    
    def _process_calculation_response(self, llm_response: Any, package: Dict,
                                    works: List[Dict]) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏
        """
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ —Å—Ç—Ä–æ–∫–∞ —Å markdown
            if isinstance(llm_response, str):
                # –°—ã—Ä–∞—è —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Å markdown –±–ª–æ–∫–æ–º ```json
                response_data = self._clean_and_parse_json(llm_response)
            elif isinstance(llm_response, dict):
                # –£–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
                response_data = llm_response
            else:
                raise ValueError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(llm_response)}")

            calculation = response_data.get('calculation', {})
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            final_unit = calculation.get('unit', '—à—Ç')
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            raw_quantity = calculation.get('quantity', 0)
            try:
                if isinstance(raw_quantity, str):
                    final_quantity = float(raw_quantity)
                elif isinstance(raw_quantity, (int, float)):
                    final_quantity = float(raw_quantity)
                else:
                    final_quantity = 0.0
            except (ValueError, TypeError):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å quantity –∫ —á–∏—Å–ª—É: {raw_quantity}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0")
                final_quantity = 0.0
                
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            calculation_logic = calculation.get('calculation_logic', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç')
            applied_rule = calculation.get('applied_rule', '–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û')
            calculation_steps = calculation.get('calculation_steps', [])
            component_analysis = calculation.get('component_analysis', [])
            reasoning = calculation.get('reasoning', {})

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if applied_rule != '–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û' and calculation_steps:
                calculation_logic = f"{applied_rule}: {', '.join(calculation_steps[:2])}"  # –ü–µ—Ä–≤—ã–µ 2 —à–∞–≥–∞ –∫–∞–∫ –ª–æ–≥–∏–∫–∞

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = package.copy()
            result['calculations'] = {
                'unit': final_unit,
                'quantity': final_quantity,
                'calculation_logic': calculation_logic,
                'applied_rule': applied_rule,
                'calculation_steps': calculation_steps,
                'component_analysis': component_analysis,
                'reasoning': reasoning,
                'source_works_count': len(works),
                'calculated_at': datetime.now().isoformat()
            }
            
            return result
            
        except (json.JSONDecodeError, KeyError, AttributeError, ValueError) as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Ä–∞—Å—á–µ—Ç–æ–≤: {e}")
            logger.error(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {llm_response}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –æ—Ç Gemini: {e}")
    
    def _update_truth_data(self, truth_data: Dict, calculated_packages: List[Dict], truth_path: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç true.json —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ work_packages
        current_packages = truth_data.get('results', {}).get('work_packages', [])
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ package_id
        calculations_dict = {}
        for calc_package in calculated_packages:
            package_id = calc_package.get('package_id')
            calculations = calc_package.get('calculations', {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ü–¢–û
            calculations_dict[package_id] = {
                'unit': calculations.get('unit', '—à—Ç'),
                'quantity': calculations.get('quantity', 0),
                'calculation_logic': calculations.get('calculation_logic', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç'),
                'component_analysis': calculations.get('component_analysis', [])
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        for package in current_packages:
            package_id = package.get('package_id')
            if package_id in calculations_dict:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –Ω—É–∂–Ω–æ–µ
                package['volume_data'] = calculations_dict[package_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º work_packages –≤ true.json
        truth_data['results']['work_packages'] = current_packages
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        units_summary = defaultdict(float)
        for calc_data in calculations_dict.values():
            unit = calc_data['unit']
            quantity = calc_data['quantity']
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            try:
                if isinstance(quantity, str):
                    quantity = float(quantity)
                elif isinstance(quantity, (int, float)):
                    quantity = float(quantity)
                else:
                    quantity = 0.0
            except (ValueError, TypeError):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ —á–∏—Å–ª—É: {quantity}")
                quantity = 0.0
            
            if unit and quantity:
                units_summary[unit] += quantity
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        truth_data['results']['volume_summary'] = {
            'total_packages': len(calculated_packages),
            'units_breakdown': dict(units_summary),
            'calculated_at': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(truth_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω true.json —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è {len(calculated_packages)} –ø–∞–∫–µ—Ç–æ–≤")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π true.json –≤ –ø–∞–ø–∫—É –∞–≥–µ–Ω—Ç–∞
        agent_folder = os.path.join(os.path.dirname(truth_path), "6_counter")
        agent_truth_copy = os.path.join(agent_folder, "updated_true.json")
        
        with open(agent_truth_copy, 'w', encoding='utf-8') as f:
            json.dump(truth_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π true.json –≤ {agent_truth_copy}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞
async def run_counter(project_path: str) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ counter –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    
    Args:
        project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
    """
    agent = WorkVolumeCalculator()
    return await agent.process(project_path)

if __name__ == "__main__":
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        test_project_path = sys.argv[1]
    else:
        test_project_path = "/home/imort/Herzog_v3/projects/34975055/d490876a"
    
    if os.path.exists(test_project_path):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ counter")
        result = asyncio.run(run_counter(test_project_path))
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_project_path}")
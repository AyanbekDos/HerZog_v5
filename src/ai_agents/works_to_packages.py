"""
–ê–≥–µ–Ω—Ç 2: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å" (works_to_packages.py)  
–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –æ–¥–Ω–æ–º—É –∏–∑ —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–∞—Ç—á–∏–Ω–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import os
import asyncio
import logging
import math
import uuid
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
from ..shared.claude_client import claude_client as gemini_client  # Migrated to Claude
from ..shared.truth_initializer import update_pipeline_status

logger = logging.getLogger(__name__)

class WorksToPackagesAssigner:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —Ä–∞–±–æ—Ç –∫ —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã–º –ø–∞–∫–µ—Ç–∞–º
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã —Ä–∞–±–æ—Ç —á–µ—Ä–µ–∑ –±–∞—Ç—á–∏–Ω–≥
    """
    
    def __init__(self, batch_size: int = 50):
        self.agent_name = "works_to_packages"
        self.batch_size = batch_size

    
    async def process(self, project_path: str) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞—Ç—á–∏–Ω–≥–∞
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º true.json
            truth_path = os.path.join(project_path, "true.json")
            if not os.path.exists(truth_path):
                raise FileNotFoundError(f"–§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
            
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
            update_pipeline_status(truth_path, self.agent_name, "in_progress")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
            agent_folder = os.path.join(project_path, "5_works_to_packages")
            os.makedirs(agent_folder, exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            work_breakdown_structure = truth_data.get('results', {}).get('work_breakdown_structure', [])
            # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–æ–π
            if not work_breakdown_structure:
                work_breakdown_structure = truth_data.get('results', {}).get('work_packages', [])

            source_work_items = truth_data.get('source_work_items', [])

            if not work_breakdown_structure:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω work_packager")

            packages_count = len([item for item in work_breakdown_structure if item.get('type') == 'package'])
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(source_work_items)} —Ä–∞–±–æ—Ç –≤ {packages_count} –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_template = self._load_prompt()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ –±–∞—Ç—á–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            assigned_works = []
            total_batches = math.ceil(len(source_work_items) / self.batch_size)
            
            for batch_num in range(total_batches):
                start_idx = batch_num * self.batch_size
                end_idx = min((batch_num + 1) * self.batch_size, len(source_work_items))
                batch_works = source_work_items[start_idx:end_idx]
                
                logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num + 1}/{total_batches} ({len(batch_works)} —Ä–∞–±–æ—Ç)")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                batch_result = await self._process_batch(
                    batch_works, work_breakdown_structure, prompt_template,
                    batch_num, agent_folder
                )
                
                assigned_works.extend(batch_result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º true.json —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            self._update_truth_data(truth_data, assigned_works, truth_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            update_pipeline_status(truth_path, self.agent_name, "completed")
            
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {self.agent_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(assigned_works)} —Ä–∞–±–æ—Ç")
            
            return {
                'success': True,
                'works_processed': len(assigned_works),
                'batches_processed': total_batches,
                'agent': self.agent_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
            try:
                update_pipeline_status(truth_path, self.agent_name, "error")
            except:
                pass
            
            return {
                'success': False,
                'error': str(e),
                'agent': self.agent_name
            }
    
    async def _process_batch(self, batch_works: List[Dict], work_breakdown_structure: List[Dict],
                           prompt_template: str, batch_num: int, agent_folder: str) -> List[Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á —Ä–∞–±–æ—Ç —Å –Ω–æ–≤–æ–π –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        """
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á–∞
        input_data = {
            'works_to_assign': [
                {
                    'id': work.get('id'),
                    'name': work.get('name', ''),
                    'code': work.get('code', '')
                }
                for work in batch_works
            ],
            'work_breakdown_structure': work_breakdown_structure,
            'batch_number': batch_num + 1
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è LLM
        system_instruction, user_prompt = self._format_prompt(input_data, prompt_template)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–ª—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION
        salted_system_instruction = self._add_salt_to_prompt(system_instruction)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ï –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        debug_data = {
            "works_to_assign": input_data['works_to_assign'],              # –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç
            "work_breakdown_structure": input_data['work_breakdown_structure'], # –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            "system_instruction": salted_system_instruction,
            "user_prompt": user_prompt,
            "meta": {
                "batch_number": input_data['batch_number'],
                "works_count": len(input_data['works_to_assign']),
                "structure_items_count": len(input_data['work_breakdown_structure'])
            }
        }
        batch_input_path = os.path.join(agent_folder, f"batch_{batch_num+1:03d}_input.json")
        with open(batch_input_path, 'w', encoding='utf-8') as f:
            json.dump(debug_data, f, ensure_ascii=False, indent=2)

        # –í—ã–∑—ã–≤–∞–µ–º Gemini API —Å system_instruction –∏ user_prompt
        logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ {batch_num + 1} –≤ Claude (works_to_packages -> claude-3.5-sonnet)")
        gemini_response = await gemini_client.generate_response(
            prompt=user_prompt,
            system_instruction=salted_system_instruction,
            agent_name="works_to_packages"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        batch_response_path = os.path.join(agent_folder, f"batch_{batch_num+1:03d}_response.json")
        with open(batch_response_path, 'w', encoding='utf-8') as f:
            json.dump(gemini_response, f, ensure_ascii=False, indent=2)
        
        if not gemini_response.get('success', False):
            logger.error(f"–û—à–∏–±–∫–∞ Claude API –¥–ª—è –±–∞—Ç—á–∞ {batch_num + 1}: {gemini_response.get('error')}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—Ç—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤
            return batch_works
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        assignments = self._process_batch_response(gemini_response['response'], batch_works)
        
        return assignments
    
    def _load_prompt(self) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        """
        prompt_path = os.path.join(
            os.path.dirname(__file__), "..", "prompts", "works_to_packages_prompt.txt"
        )
        
        try:
            with open(prompt_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.warning(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
            return self._get_default_prompt()
    
    def _get_default_prompt(self) -> str:
        """
        –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return """
# –†–û–õ–¨
–¢—ã ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä.

# –ó–ê–î–ê–ß–ê
–î–ª—è –ö–ê–ñ–î–û–ô —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ `–†–ê–ë–û–¢–´ –î–õ–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø` –Ω–∞–∑–Ω–∞—á—å –û–î–ò–ù –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π `package_id` –∏–∑ `–î–û–°–¢–£–ü–ù–´–• –ü–ê–ö–ï–¢–û–í`.

# –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï
–í –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—ã –ø–æ–ª—É—á–∏—à—å JSON-–æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏:
- "work_packages": –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç
- "batch_works": —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –±–∞—Ç—á–µ
- "batch_number": –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê
1. **–ü–û–õ–ù–û–¢–ê –û–¢–í–ï–¢–ê:** –¢–≤–æ–π –æ—Ç–≤–µ—Ç –≤ –∫–ª—é—á–µ "assignments" –î–û–õ–ñ–ï–ù —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤, —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö "batch_works". –≠—Ç–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ.
2. **–í–ê–õ–ò–î–ù–û–°–¢–¨ ID:** –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ `work_id` –∏ `package_id` –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ.
3. **–õ–û–ì–ò–ö–ê:** –í—ã–±–∏—Ä–∞–π –ø–∞–∫–µ—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç—ã.

# –§–û–†–ú–ê–¢ –í–´–í–û–î–ê (–°–¢–†–û–ì–û JSON)
{
    "assignments": [
        { "work_id": "id_—Ä–∞–±–æ—Ç—ã_1", "package_id": "pkg_003" }
    ]
}
"""
    
    def _add_salt_to_prompt(self, prompt: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–æ–ª—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION."""
        unique_id = str(uuid.uuid4())[:8]
        prefix = f"# ID: {unique_id} | –†–µ–∂–∏–º: JSON_STRICT\n"
        suffix = f"\n# –ö–æ–Ω—Ç—Ä–æ–ª—å: {unique_id}"
        return prefix + prompt + suffix

    def _format_prompt(self, input_data: Dict, prompt_template: str) -> Tuple[str, str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ system_instruction –∏ user_prompt

        Returns:
            Tuple[str, str]: (system_instruction, user_prompt)
        """
        # System instruction - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        system_instruction = prompt_template

        # User prompt - —Ç–æ–ª—å–∫–æ JSON —Å —Ä–∞–±–æ—Ç–∞–º–∏
        user_prompt_data = {
            'work_breakdown_structure': input_data['work_breakdown_structure'],
            'works_to_assign': input_data['works_to_assign'],
            'batch_number': input_data['batch_number']
        }
        user_prompt = json.dumps(user_prompt_data, ensure_ascii=False, indent=2)

        return system_instruction, user_prompt
    
    def _process_batch_response(self, llm_response: Any, original_works: List[Dict]) -> List[Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –±–∞—Ç—á–∞
        """
        try:
            if isinstance(llm_response, str):
                response_data = json.loads(llm_response)
            else:
                response_data = llm_response
            
            assignments = response_data.get('assignments', [])
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            assignment_dict = {assign['work_id']: assign['package_id'] for assign in assignments}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            updated_works = []
            for work in original_works:
                work_copy = work.copy()
                work_id = work.get('id')
                
                if work_id in assignment_dict:
                    work_copy['package_id'] = assignment_dict[work_id]
                else:
                    # –ù–ò–ö–ê–ö–û–ì–û FALLBACK! –û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–æ–π!
                    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã {work_id}")
                    raise Exception(f"Claude –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª –ø–∞–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã {work_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–≤–µ—Ç LLM.")
                
                updated_works.append(work_copy)
            
            return updated_works
            
        except (json.JSONDecodeError, KeyError, AttributeError) as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ LLM –¥–ª—è –±–∞—Ç—á–∞: {e}")
            logger.error(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Claude: {llm_response}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Claude –¥–ª—è –±–∞—Ç—á–∞: {e}")
    
    def _update_truth_data(self, truth_data: Dict, assigned_works: List[Dict], truth_path: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç true.json —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º source_work_items —Å package_id
        truth_data['source_work_items'] = assigned_works
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ results
        if 'results' not in truth_data:
            truth_data['results'] = {}
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞–∫–µ—Ç–∞–º
        package_stats = {}
        for work in assigned_works:
            package_id = work.get('package_id')
            if package_id:
                if package_id not in package_stats:
                    package_stats[package_id] = 0
                package_stats[package_id] += 1
        
        truth_data['results']['package_assignments'] = {
            'total_works': len(assigned_works),
            'works_per_package': package_stats,
            'assigned_at': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(truth_data, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞
async def run_works_to_packages(project_path: str, batch_size: int = 50) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ works_to_packages –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    
    Args:
        project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
    """
    agent = WorksToPackagesAssigner(batch_size=batch_size)
    return await agent.process(project_path)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    test_project_path = "/home/imort/Herzog_v3/projects/34975055/d19120ef"
    
    if os.path.exists(test_project_path):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ works_to_packages")
        result = asyncio.run(run_works_to_packages(test_project_path))
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_project_path}")
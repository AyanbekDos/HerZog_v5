"""
–ê–≥–µ–Ω—Ç 1: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" (work_packager.py)
–°–æ–∑–¥–∞–µ—Ç —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
"""

import json
import os
import asyncio
import logging
import uuid
from typing import Dict, List, Any, Optional
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
from ..shared.gemini_client import gemini_client
from ..shared.truth_initializer import update_pipeline_status

logger = logging.getLogger(__name__)

class WorkPackager:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    """
    
    def __init__(self):
        self.agent_name = "work_packager"

    def _add_salt_to_prompt(self, prompt: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–æ–ª—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION."""
        unique_id = str(uuid.uuid4())[:8]
        prefix = f"# ID: {unique_id} | –†–µ–∂–∏–º: JSON_STRICT\n"
        suffix = f"\n# –ö–æ–Ω—Ç—Ä–æ–ª—å: {unique_id}"
        return prefix + prompt + suffix
    
    async def process(self, project_path: str) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º true.json
            truth_path = os.path.join(project_path, "true.json")
            if not os.path.exists(truth_path):
                raise FileNotFoundError(f"–§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
            
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
            update_pipeline_status(truth_path, self.agent_name, "in_progress")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            input_data = self._extract_input_data(truth_data)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∞–≥–µ–Ω—Ç–∞
            llm_input_path = os.path.join(project_path, "4_work_packager")
            os.makedirs(llm_input_path, exist_ok=True)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_template = self._load_prompt()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            system_instruction, user_prompt = self._format_prompt(input_data, prompt_template)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–ª—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION
            salted_system_instruction = self._add_salt_to_prompt(system_instruction)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            debug_data = {
                "system_instruction": salted_system_instruction,
                "user_prompt": user_prompt
            }
            with open(os.path.join(llm_input_path, "llm_input.json"), 'w', encoding='utf-8') as f:
                json.dump(debug_data, f, ensure_ascii=False, indent=2)

            # –í—ã–∑—ã–≤–∞–µ–º Gemini API —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
            logger.info("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (work_packager -> gemini-2.5-pro)")
            gemini_response = await gemini_client.generate_response(
                prompt=user_prompt,
                agent_name="work_packager",
                system_instruction=salted_system_instruction
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
            with open(os.path.join(llm_input_path, "llm_response.json"), 'w', encoding='utf-8') as f:
                json.dump(gemini_response, f, ensure_ascii=False, indent=2)
            
            if not gemini_response.get('success', False):
                raise Exception(f"–û—à–∏–±–∫–∞ Gemini API: {gemini_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            work_packages = self._process_llm_response(gemini_response['response'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º true.json
            truth_data['results']['work_packages'] = work_packages
            
            with open(truth_path, 'w', encoding='utf-8') as f:
                json.dump(truth_data, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            update_pipeline_status(truth_path, self.agent_name, "completed")
            
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {self.agent_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(work_packages)} –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç")
            
            return {
                'success': True,
                'work_packages_created': len(work_packages),
                'agent': self.agent_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
            try:
                update_pipeline_status(truth_path, self.agent_name, "error") 
            except:
                pass
            
            return {
                'success': False,
                'error': str(e),
                'agent': self.agent_name
            }
    
    def _extract_input_data(self, truth_data: Dict) -> Dict:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ true.json –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –∏—Ö id –∏ name)
        source_work_items = truth_data.get('source_work_items', [])
        work_items_for_llm = []
        
        for item in source_work_items:
            work_items_for_llm.append({
                'id': item.get('id'),
                'name': item.get('name', ''),
                'code': item.get('code', '')
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º)
        project_inputs = truth_data.get('project_inputs', {})
        target_count = project_inputs.get('target_work_package_count', 15)
        agent_directives = project_inputs.get('agent_directives', {})
        work_packager_directive = agent_directives.get('work_packager') or agent_directives.get('conceptualizer', '')
        
        return {
            'source_work_items': work_items_for_llm,
            'target_work_package_count': target_count,
            'user_directive': work_packager_directive,
            'total_work_items': len(work_items_for_llm)
        }
    
    def _load_prompt(self) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        """
        prompt_path = os.path.join(
            os.path.dirname(__file__), "..", "prompts", "work_packager_prompt.txt"
        )
        
        try:
            with open(prompt_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.warning(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
            return self._get_default_prompt()
    
    def _get_default_prompt(self) -> str:
        """
        –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return """
–¢—ã - –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏ —Å–æ–∑–¥–∞—Ç—å —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º.

–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
- –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç: {source_work_items}
- –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: {target_work_package_count}
- –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_directive}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π {target_work_package_count} —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–Ω—è—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —É–∫—Ä—É–ø–Ω–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –ø–æ—Ö–æ–∂–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã.

–ö–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å:
- package_id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä "pkg_001")  
- name: –∫—Ä–∞—Ç–∫–æ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–î–µ–º–æ–Ω—Ç–∞–∂ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫ –∏ –ø–æ–ª–æ–≤")
- description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –£—á–∏—Ç—ã–≤–∞–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç
2. –ì—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç (–¥–µ–º–æ–Ω—Ç–∞–∂, –º–æ–Ω—Ç–∞–∂, –æ—Ç–¥–µ–ª–∫–∞ –∏ —Ç.–¥.)
3. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –¥–∏—Ä–µ–∫—Ç–∏–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_directive}
4. –ù–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{{
    "work_packages": [
        {{
            "package_id": "pkg_001",
            "name": "–î–µ–º–æ–Ω—Ç–∞–∂ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", 
            "description": "–°–Ω–æ—Å –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫, –¥–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–∫—Ä—ã—Ç–∏–π –ø–æ–ª–∞ –∏ –ø–æ—Ç–æ–ª–∫–∞"
        }}
    ]
}}
"""
    
    def _format_prompt(self, input_data: Dict, prompt_template: str) -> tuple[str, str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç, —Ä–∞–∑–¥–µ–ª—è—è —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ

        Returns:
            tuple[str, str]: (system_instruction, user_prompt)
        """
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—à–∞–±–ª–æ–Ω + –¥–∏—Ä–µ–∫—Ç–∏–≤—ã)
        system_instruction = prompt_template.format(
            target_work_package_count=input_data['target_work_package_count'],
            user_directive=input_data['user_directive'],
            total_work_items=input_data['total_work_items']
        )

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (JSON)
        user_prompt = json.dumps(input_data['source_work_items'],
                                ensure_ascii=False, indent=2)

        return system_instruction, user_prompt
    
    def _process_llm_response(self, llm_response: Any) -> List[Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç
        """
        try:
            if isinstance(llm_response, str):
                response_data = json.loads(llm_response)
            else:
                response_data = llm_response
                
            work_packages = response_data.get('work_packages', [])
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            validated_packages = []
            for i, package in enumerate(work_packages):
                package_id = package.get('package_id', f'pkg_{i+1:03d}')
                name = package.get('name', f'–ü–∞–∫–µ—Ç —Ä–∞–±–æ—Ç {i+1}')
                description = package.get('description', '')
                
                validated_packages.append({
                    'package_id': package_id,
                    'name': name,
                    'description': description,
                    'created_at': datetime.now().isoformat()
                })
            
            return validated_packages
            
        except (json.JSONDecodeError, KeyError, AttributeError) as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
            logger.error(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {llm_response}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞
async def run_work_packager(project_path: str) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ work_packager –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    
    Args:
        project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
    """
    agent = WorkPackager()
    return await agent.process(project_path)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    test_project_path = "/home/imort/Herzog_v3/projects/34975055/d19120ef"
    
    if os.path.exists(test_project_path):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ work_packager")
        result = asyncio.run(run_work_packager(test_project_path))
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_project_path}")
"""
–ê–≥–µ–Ω—Ç 4: "–°—É–ø–µ—Ä-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫" (scheduler_and_staffer.py)
–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç: —Å—Ä–æ–∫–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—é–¥–µ–π
"""

import json
import os
import asyncio
import logging
import math
import uuid
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from collections import defaultdict

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
from ..shared.claude_client import claude_client as gemini_client  # Migrated to Claude
from ..shared.truth_initializer import update_pipeline_status

logger = logging.getLogger(__name__)

class SchedulerAndStaffer:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—á–∏—Ö
    """
    
    def __init__(self, batch_size: int = 12):
        self.agent_name = "scheduler_and_staffer"
        self.batch_size = batch_size

    
    async def process(self, project_path: str) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º true.json
            truth_path = os.path.join(project_path, "true.json")
            if not os.path.exists(truth_path):
                raise FileNotFoundError(f"–§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {truth_path}")
            
            with open(truth_path, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
            update_pipeline_status(truth_path, self.agent_name, "in_progress")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
            agent_folder = os.path.join(project_path, "7_scheduler_and_staffer")
            os.makedirs(agent_folder, exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –Ω–æ–≤—É—é –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ç–∞–∫ –∏ —Å—Ç–∞—Ä—É—é –ø–ª–æ—Å–∫—É—é
            work_breakdown_structure = truth_data.get('results', {}).get('work_breakdown_structure', [])
            work_packages = truth_data.get('results', {}).get('work_packages', [])  # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            volume_calculations = truth_data.get('results', {}).get('volume_calculations', [])
            timeline_blocks = truth_data.get('timeline_blocks', [])
            project_inputs = truth_data.get('project_inputs', {})

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–∫–µ—Ç—ã –∏–∑ –Ω–µ—ë
            if work_breakdown_structure:
                work_packages = [item for item in work_breakdown_structure if item.get('type') == 'package']
                logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –Ω–∞–π–¥–µ–Ω–æ {len(work_packages)} –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç")

                # –û–±–æ–≥–∞—â–∞–µ–º –ø–∞–∫–µ—Ç—ã –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –æ–±—ä–µ–º–æ–≤ –∏–∑ counter
                volume_by_id = {vol.get('package_id'): vol for vol in volume_calculations}
                for package in work_packages:
                    package_id = package.get('id')
                    if package_id in volume_by_id:
                        package['volume_data'] = volume_by_id[package_id]

            elif work_packages:
                logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –Ω–∞–π–¥–µ–Ω–æ {len(work_packages)} –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç")
            else:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω counter")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–∫–µ—Ç—ã –∏–º–µ—é—Ç volume_data
            packages_with_calcs = [p for p in work_packages if 'volume_data' in p]
            if not packages_with_calcs:
                raise Exception("–ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç –Ω–µ –∏–º–µ—é—Ç volume_data. –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω counter")
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è {len(packages_with_calcs)} –ø–∞–∫–µ—Ç–æ–≤")
            logger.info(f"üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏: {len(timeline_blocks)} –Ω–µ–¥–µ–ª—å")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            workforce_range = project_inputs.get('workforce_range', {'min': 10, 'max': 20})
            user_directives = project_inputs.get('agent_directives', {})
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã strategist + foreman –≤ –æ–¥–Ω—É
            scheduler_and_staffer_directive = (
                user_directives.get('scheduler_and_staffer') or
                f"{user_directives.get('strategist', '')} {user_directives.get('foreman', '')}".strip()
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt_template = self._load_prompt()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ—Ç–∞—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            compact_packages = self._prepare_compact_packages(packages_with_calcs, project_path)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –ø–∞–∫–µ—Ç—ã —Å—Ä–∞–∑—É - –Ω–∏–∫–∞–∫–∏—Ö –±–∞—Ç—á–µ–π!
            logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• {len(compact_packages)} –ø–∞–∫–µ—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑")

            scheduled_packages = await self._process_all_packages_at_once(
                compact_packages, timeline_blocks, workforce_range,
                scheduler_and_staffer_directive, prompt_template, agent_folder
            )

            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(scheduled_packages)} –ø–∞–∫–µ—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
            validation_result = self._validate_workforce_constraints(
                scheduled_packages, timeline_blocks, workforce_range
            )
            
            if not validation_result['valid']:
                logger.warning(f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É: {validation_result['violations']}")
                # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                scheduled_packages = self._fix_workforce_constraints(
                    scheduled_packages, timeline_blocks, workforce_range
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º true.json —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            self._update_truth_data(truth_data, scheduled_packages, truth_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            update_pipeline_status(truth_path, self.agent_name, "completed")
            
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {self.agent_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è {len(scheduled_packages)} –ø–∞–∫–µ—Ç–æ–≤")
            
            return {
                'success': True,
                'packages_scheduled': len(scheduled_packages),
                'workforce_valid': validation_result['valid'],
                'agent': self.agent_name
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
            try:
                update_pipeline_status(truth_path, self.agent_name, "error")
            except:
                pass
            
            return {
                'success': False,
                'error': str(e),
                'agent': self.agent_name
            }
    
    def _load_prompt(self) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        """
        prompt_path = os.path.join(
            os.path.dirname(__file__), "..", "prompts", "scheduler_and_staffer_prompt.txt"
        )
        
        try:
            with open(prompt_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.warning(f"–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
            return self._get_default_prompt()
    
    def _get_default_prompt(self) -> str:
        """
        –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return """
# –†–û–õ–¨
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.

# –ó–ê–î–ê–ß–ê
–°–æ–∑–¥–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–≤ –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –Ω–∞–∑–Ω–∞—á–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª.

# –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï
–í –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—ã –ø–æ–ª—É—á–∏—à—å JSON-–æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏:
- "work_packages": –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç —Å –∏—Ö —Å–æ—Å—Ç–∞–≤–æ–º
- "timeline_blocks": –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
- "workforce_range": –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
- "user_directive": –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
1. **–õ–∏–º–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (—Å—É–º–º–∞ –ø–æ –≤—Å–µ–º –ø–∞–∫–µ—Ç–∞–º –≤ –Ω–µ–¥–µ–ª—é):** –í –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ workforce_range.
2. **–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –î–µ–º–æ–Ω—Ç–∞–∂ -> –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ -> –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏ -> –û—Ç–¥–µ–ª–∫–∞.

# –§–û–†–ú–ê–¢ –í–´–í–û–î–ê (–°–¢–†–û–ì–û JSON)
{
    "scheduled_packages": [
        {
            "package_id": "pkg_001",
            "schedule_blocks": [1, 2],
            "progress_per_block": { "1": 60, "2": 40 },
            "staffing_per_block": { "1": 10, "2": 8 },
            "scheduling_reasoning": {
                "why_these_weeks": "–ö—Ä–∞—Ç–∫–æ.",
                "why_this_duration": "–ö—Ä–∞—Ç–∫–æ.",
                "why_this_sequence": "–ö—Ä–∞—Ç–∫–æ.",
                "why_this_staffing": "–ö—Ä–∞—Ç–∫–æ."
            }
        }
    ]
}

# –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–î –û–¢–í–ï–¢–û–ú
1. **–õ–∏–º–∏—Ç—ã:** –°—É–º–º–∞ `staffing_per_block` –¥–ª—è –ö–ê–ñ–î–û–ô –Ω–µ–¥–µ–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ workforce_range.
2. **100%:** –°—É–º–º–∞ `progress_per_block` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Ä–∞–≤–Ω–∞ 100.
3. **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** –ü–æ–ª—è `scheduling_reasoning` –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.
"""
    
    def _add_salt_to_prompt(self, prompt: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–æ–ª—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION."""
        unique_id = str(uuid.uuid4())[:8]
        session_id = str(uuid.uuid4())[:12]
        prefix = f"# TASK_ID: {unique_id} | SESSION: {session_id} | MODE: STRICT_JSON_OUTPUT\n"
        prefix += f"# ANTI_RECITATION_SALT: {session_id}{unique_id}\n"
        suffix = f"\n# END_TASK: {unique_id} | VERIFY: {session_id}"
        return prefix + prompt + suffix

    def _format_prompt(self, input_data: Dict, prompt_template: str) -> Tuple[str, str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ system_instruction –∏ user_prompt

        Returns:
            Tuple[str, str]: (system_instruction, user_prompt)
        """
        # System instruction - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        system_instruction = prompt_template

        # User prompt - JSON —Å –¥–∞–Ω–Ω—ã–º–∏ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ RECITATION
        anti_recitation_id = str(uuid.uuid4())[:10]
        user_prompt_data = {
            '_meta': {
                'task_type': 'schedule_planning',
                'session_id': anti_recitation_id,
                'timestamp': datetime.now().isoformat()
            },
            'work_packages': input_data['work_packages'],
            'timeline_blocks': input_data['timeline_blocks'],
            'workforce_range': input_data['workforce_range'],
            'user_directive': input_data['user_directive']
        }
        user_prompt = json.dumps(user_prompt_data, ensure_ascii=False, indent=2)

        return system_instruction, user_prompt

    async def _process_batch(self, batch_packages: List[Dict], timeline_blocks: List[Dict],
                           workforce_range: Dict, user_directive: str, prompt_template: str,
                           batch_num: int, agent_folder: str) -> List[Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á–∞
        input_data = {
            'work_packages': batch_packages,
            'timeline_blocks': timeline_blocks,
            'workforce_range': workforce_range,
            'user_directive': user_directive
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è LLM
        system_instruction, user_prompt = self._format_prompt(input_data, prompt_template)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–ª—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è RECITATION
        salted_system_instruction = self._add_salt_to_prompt(system_instruction)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ï –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        debug_data = {
            "batch_packages": batch_packages,    # –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–æ–≤ –±–∞—Ç—á–∞
            "timeline_blocks": timeline_blocks,  # –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª—å
            "workforce_range": workforce_range,
            "user_directive": user_directive,
            "system_instruction": salted_system_instruction,
            "user_prompt": user_prompt,
            "meta": {
                "batch_number": batch_num + 1,
                "packages_count": len(batch_packages),
                "timeline_blocks_count": len(timeline_blocks)
            }
        }
        batch_input_path = os.path.join(agent_folder, f"batch_{batch_num+1:03d}_input.json")
        with open(batch_input_path, 'w', encoding='utf-8') as f:
            json.dump(debug_data, f, ensure_ascii=False, indent=2)

        # –í—ã–∑—ã–≤–∞–µ–º Gemini API —Å system_instruction –∏ user_prompt
        logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ {batch_num + 1} –≤ Gemini (scheduler_and_staffer -> gemini-2.5-pro)")
        gemini_response = await gemini_client.generate_response(
            prompt=user_prompt,
            system_instruction=salted_system_instruction,
            agent_name="scheduler_and_staffer"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        batch_response_path = os.path.join(agent_folder, f"batch_{batch_num+1:03d}_response.json")
        with open(batch_response_path, 'w', encoding='utf-8') as f:
            json.dump(gemini_response, f, ensure_ascii=False, indent=2)


        if not gemini_response.get('success', False):
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê Gemini API –¥–ª—è –±–∞—Ç—á–∞ {batch_num + 1}: {gemini_response.get('error')}")
            raise Exception(f"Gemini API –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞—Ç—á {batch_num + 1}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        scheduled_batch = self._process_scheduling_response(
            gemini_response['response'], batch_packages, timeline_blocks, workforce_range
        )

        return scheduled_batch

    async def _process_all_packages_at_once(self, compact_packages: List[Dict], timeline_blocks: List[Dict],
                                          workforce_range: Dict, scheduler_directive: str, prompt_template: str,
                                          agent_folder: str) -> List[Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –ø–∞–∫–µ—Ç—ã –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å - –±–µ–∑ –±–∞—Ç—á–µ–π!
        """
        from ..shared.claude_client import claude_client

        # –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –ø—Ä–æ–º—Ç —Å –í–°–ï–ú–ò –ø–∞–∫–µ—Ç–∞–º–∏
        user_prompt = json.dumps({
            "work_packages": compact_packages,
            "timeline_blocks": timeline_blocks,
            "workforce_range": workforce_range,
            "user_directive": scheduler_directive
        }, ensure_ascii=False, indent=2)

        # –°–æ–ª–∏–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        salted_system_instruction = f"{prompt_template}\n\n# SALT: {uuid.uuid4()}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ï –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        input_data = {
            "work_packages": compact_packages,  # –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–æ–≤
            "timeline_blocks": timeline_blocks, # –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª—å
            "workforce_range": workforce_range,
            "user_directive": scheduler_directive,
            "meta": {
                "packages_count": len(compact_packages),
                "timeline_blocks_count": len(timeline_blocks),
                "timestamp": datetime.now().isoformat()
            }
        }

        input_path = os.path.join(agent_folder, "all_packages_input.json")
        with open(input_path, 'w', encoding='utf-8') as f:
            json.dump(input_data, f, ensure_ascii=False, indent=2)

        # –í—ã–∑—ã–≤–∞–µ–º Claude API —Å –í–°–ï–ú–ò –ø–∞–∫–µ—Ç–∞–º–∏
        logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –í–°–ï–• –ø–∞–∫–µ—Ç–æ–≤ –≤ Claude (scheduler_and_staffer)")
        claude_response = await claude_client.generate_response(
            prompt=user_prompt,
            system_instruction=salted_system_instruction,
            agent_name="scheduler_and_staffer"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Claude
        response_path = os.path.join(agent_folder, "all_packages_response.json")
        with open(response_path, 'w', encoding='utf-8') as f:
            json.dump(claude_response, f, ensure_ascii=False, indent=2)

        if not claude_response.get('success', False):
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê Claude API: {claude_response.get('error')}")
            raise Exception(f"Claude API –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –ø–∞–∫–µ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        scheduled_packages = self._process_scheduling_response(
            claude_response['response'], compact_packages, timeline_blocks, workforce_range
        )

        return scheduled_packages


    def _process_scheduling_response(self, llm_response: Any, original_packages: List[Dict],
                                   timeline_blocks: List[Dict], workforce_range: Dict) -> List[Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º –ø–ª–∞–Ω–æ–º
        """
        try:
            if isinstance(llm_response, str):
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø–∞—Ä—Å–∏—Ç—å
                response_data = json.loads(llm_response)
            else:
                response_data = llm_response
            
            scheduled_packages = response_data.get('scheduled_packages', [])
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
            validated_packages = []
            for pkg in scheduled_packages:
                validated_pkg = self._validate_and_fix_package_schedule(pkg, timeline_blocks)
                validated_packages.append(validated_pkg)
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(validated_packages)} –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM")
            return validated_packages
            
        except (json.JSONDecodeError, KeyError, AttributeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if isinstance(llm_response, str):
                response_length = len(llm_response)
                lines_count = llm_response.count('\n')
                logger.error(f"üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {response_length} —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç—Ä–æ–∫: {lines_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                tail = llm_response[-200:] if len(llm_response) > 200 else llm_response
                logger.error(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: ...{tail}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ—á–∏–Ω–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON
                fixed_response = self._try_fix_truncated_json(llm_response)
                if fixed_response:
                    try:
                        response_data = json.loads(fixed_response)
                        scheduled_packages = response_data.get('scheduled_packages', [])
                        
                        validated_packages = []
                        for pkg in scheduled_packages:
                            validated_pkg = self._validate_and_fix_package_schedule(pkg, timeline_blocks)
                            validated_packages.append(validated_pkg)
                        
                        logger.info(f"üîß –£—Å–ø–µ—à–Ω–æ –ø–æ—á–∏–Ω–∏–ª–∏ JSON –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ {len(validated_packages)} –ø–∞–∫–µ—Ç–æ–≤")
                        return validated_packages
                        
                    except Exception as fix_error:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—á–∏–Ω–∏—Ç—å JSON: {fix_error}")
            
            logger.warning(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ fallback –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {len(original_packages)} –ø–∞–∫–µ—Ç–æ–≤")
            return self._create_fallback_schedule(original_packages, timeline_blocks, workforce_range)
    
    def _try_fix_truncated_json(self, broken_json: str) -> Optional[str]:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ—á–∏–Ω–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç LLM
        """
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—á–∏–Ω–∫–∏:
            
            # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            lines = broken_json.split('\n')
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ñ–∏–≥—É—Ä–Ω–æ–π —Å–∫–æ–±–∫–æ–π –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–æ–π
            fixed_lines = []
            for i, line in enumerate(lines):
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–ª—é—á –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if '"unit":' in line and line.strip().endswith('"unit":'):
                    logger.info("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å 'unit:', –æ–±—Ä–µ–∑–∞–µ–º")
                    break
                    
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –∫–∞–≤—ã—á–∫–∞) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è  
                if line.strip() and not line.strip().endswith((',', '{', '}', '[', ']', '"')):
                    logger.info(f"üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: '{line.strip()}', –æ–±—Ä–µ–∑–∞–µ–º")
                    break
                    
                fixed_lines.append(line)
            
            # 2. –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è JSON
            fixed_content = '\n'.join(fixed_lines)
            
            # 3. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
            open_braces = fixed_content.count('{') - fixed_content.count('}')
            open_brackets = fixed_content.count('[') - fixed_content.count(']')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
            closing = ''
            for _ in range(open_brackets):
                closing += '\n    ]'
            for _ in range(open_braces):
                closing += '\n  }'
            
            fixed_json = fixed_content + closing
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–Ω—ã–π
            json.loads(fixed_json)  # –ï—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π - exception
            
            logger.info("üîß JSON —É—Å–ø–µ—à–Ω–æ –ø–æ—á–∏–Ω–µ–Ω")
            return fixed_json
            
        except Exception as e:
            logger.error(f"üîß –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—á–∏–Ω–∏—Ç—å JSON: {e}")
            return None
    
    def _validate_and_fix_package_schedule(self, package: Dict, timeline_blocks: List[Dict]) -> Dict:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–∞–∫–µ—Ç–∞
        """
        package_id = package.get('package_id', 'unknown')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è schedule_blocks
        schedule_blocks = package.get('schedule_blocks', [])
        max_week = len(timeline_blocks)
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è schedule_blocks
        valid_blocks = []
        for week in schedule_blocks:
            try:
                week_num = int(week) if isinstance(week, str) else week
                if 1 <= week_num <= max_week:
                    valid_blocks.append(week_num)
            except (ValueError, TypeError):
                continue
        schedule_blocks = valid_blocks
        
        if not schedule_blocks:
            schedule_blocks = [1]  # fallback
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è progress_per_block
        progress_per_block = package.get('progress_per_block', {})
        total_progress = 0
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –≤–∏–¥—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        normalized_progress = {}
        for week in schedule_blocks:
            week_str = str(week)
            progress = progress_per_block.get(week_str, progress_per_block.get(week, 0))
            normalized_progress[week_str] = max(0, min(100, progress))
            total_progress += normalized_progress[week_str]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ 100%
        if total_progress != 100 and total_progress > 0:
            scale_factor = 100.0 / total_progress
            for week_str in normalized_progress:
                normalized_progress[week_str] = round(normalized_progress[week_str] * scale_factor)
        elif total_progress == 0:
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            progress_per_week = round(100.0 / len(schedule_blocks))
            for week in schedule_blocks:
                normalized_progress[str(week)] = progress_per_week
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è staffing_per_block
        staffing_per_block = package.get('staffing_per_block', {})
        normalized_staffing = {}
        
        for week in schedule_blocks:
            week_str = str(week)
            staff = staffing_per_block.get(week_str, staffing_per_block.get(week, 1))
            normalized_staffing[week_str] = max(1, min(20, staff))  # –û—Ç 1 –¥–æ 20 —á–µ–ª–æ–≤–µ–∫
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scheduling_reasoning = package.get('scheduling_reasoning', {})
        if not scheduling_reasoning:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            scheduling_reasoning = {
                'why_these_weeks': f'–ü–∞–∫–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª–∏ {schedule_blocks} –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                'why_this_duration': f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {len(schedule_blocks)} –Ω–µ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–º—É —Ä–∞–±–æ—Ç',
                'why_this_sequence': '–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º',
                'why_this_staffing': f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –æ—Ç {min(normalized_staffing.values())} –¥–æ {max(normalized_staffing.values())} —á–µ–ª–æ–≤–µ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç'
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
        package['schedule_blocks'] = schedule_blocks
        package['progress_per_block'] = normalized_progress
        package['staffing_per_block'] = normalized_staffing
        package['scheduling_reasoning'] = scheduling_reasoning
        
        return package
    
    def _validate_workforce_constraints(self, packages: List[Dict], 
                                      timeline_blocks: List[Dict], workforce_range: Dict) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        """
        max_workers = workforce_range['max']
        violations = []
        weekly_totals = {}
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø–æ –Ω–µ–¥–µ–ª—è–º
        for week_num in range(1, len(timeline_blocks) + 1):
            week_str = str(week_num)
            total_workers = 0
            
            for package in packages:
                staffing = package.get('staffing_per_block', {})
                if week_str in staffing:
                    total_workers += staffing[week_str]
            
            weekly_totals[week_str] = total_workers
            
            if total_workers > max_workers:
                violations.append(f"–ù–µ–¥–µ–ª—è {week_num}: {total_workers} > {max_workers}")
        
        return {
            'valid': len(violations) == 0,
            'violations': violations,
            'weekly_totals': weekly_totals
        }
    
    def _fix_workforce_constraints(self, packages: List[Dict], 
                                 timeline_blocks: List[Dict], workforce_range: Dict) -> List[Dict]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        """
        max_workers = workforce_range['max']
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
        for week_num in range(1, len(timeline_blocks) + 1):
            week_str = str(week_num)
            
            # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ —ç—Ç—É –Ω–µ–¥–µ–ª—é
            current_workers = 0
            week_packages = []
            
            for package in packages:
                staffing = package.get('staffing_per_block', {})
                if week_str in staffing:
                    current_workers += staffing[week_str]
                    week_packages.append(package)
            
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º
            if current_workers > max_workers:
                scale_factor = max_workers / current_workers
                
                for package in week_packages:
                    original_staff = package['staffing_per_block'][week_str]
                    new_staff = max(1, round(original_staff * scale_factor))
                    package['staffing_per_block'][week_str] = new_staff
        
        return packages
    
    def _create_fallback_schedule(self, packages: List[Dict], timeline_blocks: List[Dict],
                                workforce_range: Dict) -> List[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω, –µ—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        """
        fallback_packages = []
        max_workers = workforce_range['max']
        workers_per_package = max(1, max_workers // len(packages))
        
        for i, package in enumerate(packages):
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            weeks_per_package = max(1, len(timeline_blocks) // len(packages))
            start_week = (i * weeks_per_package) + 1
            end_week = min(start_week + weeks_per_package - 1, len(timeline_blocks))
            
            schedule_blocks = list(range(start_week, end_week + 1))
            
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_per_week = round(100.0 / len(schedule_blocks))
            progress_per_block = {}
            staffing_per_block = {}
            
            for week in schedule_blocks:
                week_str = str(week)
                progress_per_block[week_str] = progress_per_week
                staffing_per_block[week_str] = workers_per_package
            
            fallback_package = package.copy()
            fallback_package['schedule_blocks'] = schedule_blocks
            fallback_package['progress_per_block'] = progress_per_block
            fallback_package['staffing_per_block'] = staffing_per_block
            
            fallback_packages.append(fallback_package)
        
        return fallback_packages
    
    def _update_truth_data(self, truth_data: Dict, scheduled_packages: List[Dict], truth_path: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç true.json —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º –ø–ª–∞–Ω–æ–º
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é, —Ç–∞–∫ –∏ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        """
        work_breakdown_structure = truth_data.get('results', {}).get('work_breakdown_structure', [])

        if work_breakdown_structure:
            # –ù–æ–≤–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            logger.info("üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å scheduled_packages –ø–æ package_id
            schedule_by_id = {}
            for scheduled_pkg in scheduled_packages:
                package_id = scheduled_pkg.get('package_id')
                schedule_by_id[package_id] = scheduled_pkg

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –≤ work_breakdown_structure
            for item in work_breakdown_structure:
                if item.get('type') == 'package':
                    package_id = item.get('id')
                    if package_id in schedule_by_id:
                        scheduled_data = schedule_by_id[package_id]

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –ø–∞–∫–µ—Ç—É
                        item.update({
                            'schedule_blocks': scheduled_data.get('schedule_blocks', []),
                            'progress_per_block': scheduled_data.get('progress_per_block', {}),
                            'staffing_per_block': scheduled_data.get('staffing_per_block', {}),
                            'scheduling_reasoning': scheduled_data.get('scheduling_reasoning', {})
                        })

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            truth_data['results']['work_breakdown_structure'] = work_breakdown_structure

            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ scheduled_packages –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            truth_data['results']['scheduled_packages'] = scheduled_packages

        else:
            # –°—Ç–∞—Ä–∞—è –ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Ä–∞–±–æ—Ç–∞–µ–º —Å work_packages
            logger.info("üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

            existing_packages = truth_data.get('results', {}).get('work_packages', [])
            existing_by_id = {pkg.get('package_id'): pkg for pkg in existing_packages}

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: –±–µ—Ä–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –∏–∑ scheduled_packages + volume_data –∏–∑ existing
            merged_packages = []
            for scheduled_pkg in scheduled_packages:
                package_id = scheduled_pkg.get('package_id')
                existing_pkg = existing_by_id.get(package_id, {})

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º: scheduled (–∫–∞–ª–µ–Ω–¥–∞—Ä—å) + existing (volume_data)
                merged_pkg = scheduled_pkg.copy()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º volume_data –æ—Ç Counter –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'volume_data' in existing_pkg:
                    merged_pkg['volume_data'] = existing_pkg['volume_data']

                # –°–û–•–†–ê–ù–Ø–ï–ú –ò–ú–Ø –ü–ê–ö–ï–¢–ê –æ—Ç work_packager, –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'name' in existing_pkg:
                    merged_pkg['name'] = existing_pkg['name']

                # –°–û–•–†–ê–ù–Ø–ï–ú –û–ü–ò–°–ê–ù–ò–ï –ü–ê–ö–ï–¢–ê –æ—Ç work_packager, –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'description' in existing_pkg:
                    merged_pkg['description'] = existing_pkg['description']

                merged_packages.append(merged_pkg)

            # –û–±–Ω–æ–≤–ª—è–µ–º work_packages –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            truth_data['results']['work_packages'] = merged_packages
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º –ø–ª–∞–Ω–µ
        schedule_summary = self._create_schedule_summary(scheduled_packages, truth_data.get('timeline_blocks', []))
        
        truth_data['results']['schedule'] = schedule_summary['schedule_info']
        truth_data['results']['staffing'] = schedule_summary['staffing_info']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        truth_data['metadata']['pipeline_completed'] = True
        truth_data['metadata']['final_updated_at'] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(truth_data, f, ensure_ascii=False, indent=2)
    
    def _create_schedule_summary(self, packages: List[Dict], timeline_blocks: List[Dict]) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º –ø–ª–∞–Ω–µ
        """
        weekly_workload = {}
        total_packages = len(packages)
        
        for week_num in range(1, len(timeline_blocks) + 1):
            week_str = str(week_num)
            active_packages = 0
            total_workers = 0
            
            for package in packages:
                if week_str in package.get('staffing_per_block', {}):
                    active_packages += 1
                    total_workers += package['staffing_per_block'][week_str]
            
            weekly_workload[week_str] = {
                'active_packages': active_packages,
                'total_workers': total_workers
            }
        
        return {
            'schedule_info': {
                'total_packages': total_packages,
                'project_duration_weeks': len(timeline_blocks),
                'weekly_workload': weekly_workload,
                'created_at': datetime.now().isoformat()
            },
            'staffing_info': {
                'peak_workforce': max([w['total_workers'] for w in weekly_workload.values()]) if weekly_workload else 0,
                'average_workforce': (sum([w['total_workers'] for w in weekly_workload.values()]) / len(weekly_workload)) if weekly_workload else 0,
                'workforce_utilization': weekly_workload
            }
        }
    
    def _prepare_compact_packages(self, packages_with_calcs: List[Dict], project_path: str) -> List[Dict]:
        """
        –ì–æ—Ç–æ–≤–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ—Ç–∞—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ volume_data, –≤–∫–ª—é—á–∞—è component_analysis
        """
        compact_packages = []

        for package in packages_with_calcs:
            package_id = package.get('package_id', 'unknown')
            package_name = package.get('name', package.get('package_name', f'–ü–∞–∫–µ—Ç {package_id}'))

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ volume_data –≤ true.json
            volume_data = package.get('volume_data', {})

            if not volume_data:
                logger.warning(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç {package_id} –Ω–µ –∏–º–µ–µ—Ç volume_data, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–º–∞
            final_quantity = volume_data.get('quantity', 0)
            final_unit = volume_data.get('unit', '—à—Ç')

            # –ò–∑–≤–ª–µ–∫–∞–µ–º component_analysis –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–∞–≤–µ
            component_analysis = volume_data.get('component_analysis', [])
            source_works_count = len(component_analysis)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç
            calculation_logic = volume_data.get('calculation_logic', '')
            complexity = self._determine_package_complexity(package_name, calculation_logic)

            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            compact_package = {
                'package_id': package_id,
                'package_name': package_name,
                'total_volume': {
                    'quantity': final_quantity,
                    'unit': final_unit
                },
                'source_works_count': source_works_count,
                'component_analysis': component_analysis,
                'complexity': complexity
            }

            compact_packages.append(compact_package)
            logger.info(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç: {package_name} ({final_quantity} {final_unit}, {source_works_count} —Ä–∞–±–æ—Ç, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity})")

        return compact_packages
    
    def _determine_package_complexity(self, package_name: str, logic: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        """
        name_lower = package_name.lower()
        logic_lower = logic.lower()
        
        # –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if any(keyword in name_lower for keyword in ['–¥–µ–º–æ–Ω—Ç–∞–∂', '—Ä–∞–∑–±–æ—Ä–∫–∞', '—Å–Ω–æ—Å']):
            return 'high'
        if any(keyword in logic_lower for keyword in ['–±–µ—Ç–æ–Ω', '–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏']):
            return 'high'
            
        # –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å  
        if any(keyword in name_lower for keyword in ['—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–º–æ–Ω—Ç–∞–∂', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ']):
            return 'medium'
        if any(keyword in logic_lower for keyword in ['—Å—Ç–µ–Ω', '–ø–µ—Ä–µ–∫—Ä—ã', '–æ—Å–Ω–æ–≤–∞–Ω–∏']):
            return 'medium'
            
        # –ù–∏–∑–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if any(keyword in name_lower for keyword in ['–æ—Ç–¥–µ–ª–∫', '–ø–æ–∫—Ä–∞—Å–∫', '—à—Ç—É–∫–∞—Ç—É—Ä–∫', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫']):
            return 'low'
        if any(keyword in logic_lower for keyword in ['–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç', '–∫—Ä–∞—Å–∫', '—à—Ç—É–∫–∞—Ç—É—Ä']):
            return 'low'
            
        return 'medium'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞
async def run_scheduler_and_staffer(project_path: str, batch_size: int = 12) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ scheduler_and_staffer –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

    Args:
        project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
    """
    agent = SchedulerAndStaffer(batch_size=batch_size)
    return await agent.process(project_path)

if __name__ == "__main__":
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        test_project_path = sys.argv[1]
    else:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        test_project_path = "/home/imort/Herzog_v3/projects/34975055/d490876a"
    
    if os.path.exists(test_project_path):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ scheduler_and_staffer")
        result = asyncio.run(run_scheduler_and_staffer(test_project_path))
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_project_path}")

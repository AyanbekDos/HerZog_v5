"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ true.json –¥–ª—è —Å–∏—Å—Ç–µ–º—ã HerZog v3.0
–°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
"""

import json
import uuid
import os
from typing import Dict, List
from datetime import datetime

def create_true_json(project_path: str) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª true.json –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
    
    Args:
        project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–Ω–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤—ã)
        project_data_path = os.path.join(project_path, "3_prepared", "project_data.json")
        if not os.path.exists(project_data_path):
            raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª project_data: {project_data_path}")
        
        with open(project_data_path, 'r', encoding='utf-8') as f:
            project_data = json.load(f)
        
        # –î–∏—Ä–µ–∫—Ç–∏–≤—ã —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ project_data
        directives_data = project_data.get("directives", {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º project_id –∏–∑ –ø—É—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        project_id = os.path.basename(project_path)
        
        # –°–æ–∑–¥–∞–µ–º true.json —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        truth_data = {
            "metadata": {
                "project_id": project_id,
                "project_name": directives_data.get("project_name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"),
                "source_file_name": directives_data.get("source_file_name", "estimate.xlsx"),
                "created_at": datetime.now().isoformat(),
                "pipeline_status": [
                    {"agent_name": "work_packager", "status": "pending"},
                    {"agent_name": "works_to_packages", "status": "pending"},
                    {"agent_name": "counter", "status": "pending"},
                    {"agent_name": "scheduler_and_staffer", "status": "pending"}
                ]
            },
            
            "project_inputs": {
                "target_work_package_count": directives_data.get("target_work_count", 15),
                "project_timeline": {
                    "start_date": directives_data.get("project_timeline", {}).get("start_date", "2025-09-01"),
                    "end_date": directives_data.get("project_timeline", {}).get("end_date", "2025-10-31")
                },
                "workforce_range": {
                    "min": directives_data.get("workforce_range", {}).get("min", 10),
                    "max": directives_data.get("workforce_range", {}).get("max", 20)
                },
                "agent_directives": directives_data.get("agent_directives", {
                    "work_packager": "",
                    "counter": "",
                    "scheduler_and_staffer": ""
                })
            },
            
            "timeline_blocks": project_data.get("timeline_blocks", []),
            
            "source_work_items": convert_work_items(project_data.get("work_items", [])),
            
            "results": {
                "work_packages": [],
                "schedule": {},
                "accounting": {},
                "staffing": {}
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º true.json –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        truth_path = os.path.join(project_path, "true.json")
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(truth_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω true.json: {truth_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è true.json: {e}")
        return False

def convert_work_items(old_work_items: List[Dict]) -> List[Dict]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç work_items –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è true.json
    
    Args:
        old_work_items: –ú–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
    Returns:
        –ú–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    converted_items = []
    
    for item in old_work_items:
        # –°–æ–∑–¥–∞–µ–º UUID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        item_id = item.get("id", str(uuid.uuid4()))
        
        converted_item = {
            "id": item_id,
            "source_file": item.get("source_file", "estimate.xlsx"),
            "code": item.get("code", ""),
            "name": item.get("name", ""),
            "unit": item.get("unit", ""),
            "quantity": item.get("quantity", 0.0)
        }
        
        converted_items.append(converted_item)
    
    return converted_items

def update_pipeline_status(truth_path: str, agent_name: str, new_status: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –≤ pipeline_status
    
    Args:
        truth_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É true.json
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (pending/in_progress/completed)
        
    Returns:
        True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π true.json
        with open(truth_path, 'r', encoding='utf-8') as f:
            truth_data = json.load(f)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
        updated = False
        for i, agent in enumerate(truth_data["metadata"]["pipeline_status"]):
            if agent["agent_name"] == agent_name:
                truth_data["metadata"]["pipeline_status"][i]["status"] = new_status
                
                if new_status == "in_progress":
                    truth_data["metadata"]["pipeline_status"][i]["started_at"] = datetime.now().isoformat()
                elif new_status == "completed":
                    truth_data["metadata"]["pipeline_status"][i]["completed_at"] = datetime.now().isoformat()
                    
                    # –°–ª–µ–¥—É—é—â–∏–π –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è pending - –µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç main_pipeline
                    # –ù–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                
                updated = True
                break
        
        if updated:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(truth_path, 'w', encoding='utf-8') as f:
                json.dump(truth_data, f, ensure_ascii=False, indent=2)
            return True
        else:
            print(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pipeline_status")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def get_current_agent(truth_path: str) -> str:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º in_progress –∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ pending)
    
    Args:
        truth_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É true.json
        
    Returns:
        –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    """
    try:
        with open(truth_path, 'r', encoding='utf-8') as f:
            truth_data = json.load(f)
        
        # –ò—â–µ–º –∞–≥–µ–Ω—Ç–∞ in_progress
        for agent in truth_data["metadata"]["pipeline_status"]:
            if agent["status"] == "in_progress":
                return agent["agent_name"]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç in_progress, –∏—â–µ–º –ø–µ—Ä–≤–æ–≥–æ pending
        for agent in truth_data["metadata"]["pipeline_status"]:
            if agent["status"] == "pending":
                return agent["agent_name"]
        
        # –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    test_project_path = "/home/imort/Herzog_v3/projects/34975055/d19120ef"
    
    if os.path.exists(test_project_path):
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è true.json –¥–ª—è {test_project_path}")
        success = create_true_json(test_project_path)
        
        if success:
            truth_path = os.path.join(test_project_path, "true.json")
            current_agent = get_current_agent(truth_path)
            print(f"üéØ –¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {current_agent}")
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_project_path}")
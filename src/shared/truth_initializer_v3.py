"""
–ù–û–í–´–ô Truth Initializer v3.0 –¥–ª—è HerZog v3.0
–°–æ–∑–¥–∞–µ—Ç –ß–ò–°–¢–£–Æ —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ legacy –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
"""

import json
import os
import uuid
from datetime import datetime
from typing import Dict, Any, List
import logging

logger = logging.getLogger(__name__)

class TruthManagerV3:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã true.json v3.0
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ß–ò–°–¢–£–Æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–µ–∑ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    """

    def __init__(self):
        self.template_path = os.path.join(
            os.path.dirname(__file__), "truth_template_v3.json"
        )

    def create_project(self, project_name: str, source_file: str, user_id: str,
                      project_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π v3.0

        Args:
            project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            source_file: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª (xlsx)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            project_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (timeline, workforce, targets, directives)

        Returns:
            –ß–∏—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ true.json v3.0
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        with open(self.template_path, 'r', encoding='utf-8') as f:
            truth_data = json.load(f)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        project_id = str(uuid.uuid4())[:8]
        now = datetime.now().isoformat()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        truth_data["project"] = {
            "id": project_id,
            "name": project_name,
            "source_file": source_file,
            "created_at": now,
            "updated_at": now,
            "user_id": user_id,
            "status": "created"
        }

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        truth_data["configuration"].update(project_config)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ audit log
        self._add_audit_log(truth_data, "system", "project_created", {
            "source_file": source_file,
            "project_id": project_id
        })

        logger.info(f"üÜï –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç v3.0: {project_name} (ID: {project_id})")
        return truth_data

    def update_agent_status(self, truth_data: Dict[str, Any], agent_name: str,
                           status: str, result_summary: Dict[str, Any] = None) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –≤ pipeline

        Args:
            truth_data: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ true.json
            agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            status: –°—Ç–∞—Ç—É—Å (pending, in_progress, completed, error)
            result_summary: –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        now = datetime.now().isoformat()

        agent_info = truth_data["pipeline"]["agents"].get(agent_name, {})

        if status == "in_progress":
            agent_info.update({
                "status": status,
                "started_at": now,
                "completed_at": None
            })
        elif status in ["completed", "error"]:
            agent_info.update({
                "status": status,
                "completed_at": now,
                "result_summary": result_summary or {}
            })
        else:
            agent_info["status"] = status

        truth_data["pipeline"]["agents"][agent_name] = agent_info
        truth_data["project"]["updated_at"] = now

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞
        if status == "completed":
            self._update_pipeline_stage(truth_data, agent_name)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ audit log
        self._add_audit_log(truth_data, agent_name, f"agent_{status}", {
            "agent": agent_name,
            "result_summary": result_summary
        })

        logger.info(f"üìä –ê–≥–µ–Ω—Ç {agent_name}: {status}")

    def add_source_work_items(self, truth_data: Dict[str, Any], work_items: List[Dict[str, Any]]) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ work_items –æ—Ç extractor
        """
        truth_data["source_data"]["work_items"] = work_items

        # –û–±–Ω–æ–≤–ª—è–µ–º summary
        truth_data["project_summary"]["totals"]["work_items"] = len(work_items)

        logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–æ {len(work_items)} –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç")

    def update_classifications(self, truth_data: Dict[str, Any], classification_stats: Dict[str, int]) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        totals = truth_data["project_summary"]["totals"]
        totals.update({
            "work_items": classification_stats.get("work_items", 0),
            "materials": classification_stats.get("materials", 0),
            "other_items": classification_stats.get("other_items", 0)
        })

        logger.info(f"üè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {classification_stats}")

    def set_project_hierarchy(self, truth_data: Dict[str, Any], hierarchy: List[Dict[str, Any]]) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        """
        truth_data["project_hierarchy"] = hierarchy

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–∞–∫–µ—Ç—ã
        categories = len([item for item in hierarchy if item.get("type") == "category"])
        packages = len([item for item in hierarchy if item.get("type") == "package"])

        truth_data["project_summary"]["totals"].update({
            "categories": categories,
            "packages": packages
        })

        logger.info(f"üèóÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è: {categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {packages} –ø–∞–∫–µ—Ç–æ–≤")

    def update_timeline_summary(self, truth_data: Dict[str, Any], timeline_summary: Dict[str, Any]) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º—É –ø–ª–∞–Ω—É
        """
        truth_data["project_summary"]["timeline_summary"].update(timeline_summary)

        logger.info(f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")

    def save_project(self, truth_data: Dict[str, Any], project_path: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ —Ñ–∞–π–ª true.json

        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        truth_path = os.path.join(project_path, "true.json")

        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
        truth_data["project"]["updated_at"] = datetime.now().isoformat()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(truth_data, f, ensure_ascii=False, indent=2)

        logger.info(f"üíæ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {truth_path}")
        return truth_path

    def copy_to_agent_folder(self, truth_data: Dict[str, Any], agent_folder: str,
                            filename: str = "updated_true.json") -> str:
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç true.json –≤ –ø–∞–ø–∫—É –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        """
        agent_truth_path = os.path.join(agent_folder, filename)

        with open(agent_truth_path, 'w', encoding='utf-8') as f:
            json.dump(truth_data, f, ensure_ascii=False, indent=2)

        logger.info(f"üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞–ø–∫—É –∞–≥–µ–Ω—Ç–∞: {agent_truth_path}")
        return agent_truth_path

    def _update_pipeline_stage(self, truth_data: Dict[str, Any], completed_agent: str) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        """
        stage_mapping = {
            "extractor": "extracted",
            "classifier": "classified",
            "preparer": "prepared",
            "work_packager": "packaged",
            "works_to_packages": "assigned",
            "counter": "calculated",
            "scheduler": "completed"
        }

        if completed_agent in stage_mapping:
            truth_data["pipeline"]["current_stage"] = stage_mapping[completed_agent]

        # –ï—Å–ª–∏ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø—Ä–æ–µ–∫—Ç completed
        agents = truth_data["pipeline"]["agents"]
        if all(agent.get("status") == "completed" for agent in agents.values()):
            truth_data["pipeline"]["current_stage"] = "completed"
            truth_data["project"]["status"] = "completed"

    def _add_audit_log(self, truth_data: Dict[str, Any], agent: str, action: str, details: Dict[str, Any]) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ audit log
        """
        truth_data["audit_log"].append({
            "timestamp": datetime.now().isoformat(),
            "agent": agent,
            "action": action,
            "details": details
        })

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
truth_manager = TruthManagerV3()

# –§—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def update_pipeline_status(truth_path: str, agent_name: str, status: str, result_summary: Dict[str, Any] = None):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞
    """
    try:
        with open(truth_path, 'r', encoding='utf-8') as f:
            truth_data = json.load(f)

        truth_manager.update_agent_status(truth_data, agent_name, status, result_summary)

        with open(truth_path, 'w', encoding='utf-8') as f:
            json.dump(truth_data, f, ensure_ascii=False, indent=2)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ {agent_name}: {e}")
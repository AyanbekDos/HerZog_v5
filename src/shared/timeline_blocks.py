"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º (–ë–õ–û–ö–ê–ú) —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –†–§
–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–µ–¥–µ–ª—å —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏
"""

import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import logging
import holidays

# –ü–æ–ª—É—á–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–§ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É holidays
def get_russian_holidays(year: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–§ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞"""
    return holidays.Russia(years=year)

class TimelineBlockGenerator:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._holidays_cache = {}  # –ö—ç—à –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –ø–æ –≥–æ–¥–∞–º
        
    def generate_weekly_blocks(
        self, 
        start_date: str, 
        end_date: str, 
        max_workers_per_week: int = 15
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (–Ω–µ–¥–µ–ª–∏) —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É
        
        Args:
            start_date: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date: –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            max_workers_per_week: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –≤ –Ω–µ–¥–µ–ª—é
            
        Returns:
            Dict —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–ø–∏—Å–∫–æ–º –±–ª–æ–∫–æ–≤
        """
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
        try:
            start_dt = datetime.strptime(start_date, "%d.%m.%Y").date()
        except ValueError:
            start_dt = datetime.strptime(start_date, "%Y-%m-%d").date()
            
        try:
            end_dt = datetime.strptime(end_date, "%d.%m.%Y").date()
        except ValueError:
            end_dt = datetime.strptime(end_date, "%Y-%m-%d").date()
        
        if start_dt > end_dt:
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")
            
        blocks = []
        block_id = 1
        current_date = start_dt
        
        while current_date <= end_dt:
            # –ù–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            monday = current_date - timedelta(days=current_date.weekday())
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫, –Ω–∞—á–∞—Ç—å —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            block_start = max(monday, start_dt)
            
            # –ù–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ (–ø—è—Ç–Ω–∏—Ü–∞)
            friday = monday + timedelta(days=4)  # –ø—è—Ç–Ω–∏—Ü–∞ = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ + 4 –¥–Ω—è
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫, –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
            block_end = min(friday, end_dt)
            
            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
            working_days, excluded_holidays = self._calculate_working_days(
                block_start, block_end
            )
            
            # –°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
            if working_days > 0:
                block = {
                    "block_id": block_id,
                    "start_date": block_start.strftime("%Y-%m-%d"),
                    "end_date": block_end.strftime("%Y-%m-%d"),
                    "working_days": working_days,
                    "excluded_holidays": excluded_holidays,
                    "calendar_days": (block_end - block_start).days + 1,
                    "is_partial_start": block_start > monday,
                    "is_partial_end": block_end < friday
                }
                blocks.append(block)
                block_id += 1
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
            current_date = friday + timedelta(days=3)  # —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            
        result = {
            "project_metadata": {
                "start_date": start_date,
                "end_date": end_date,
                "total_blocks": len(blocks),
                "max_workers_per_week": max_workers_per_week,
                "created_at": datetime.now().isoformat() + "Z"
            },
            "blocks": blocks
        }
        
        self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤ —Å {start_date} –ø–æ {end_date}")
        return result
    
    def _calculate_working_days(self, start_date, end_date) -> tuple[int, List[str]]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –∏—Å–∫–ª—é—á–∞—è –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        
        Returns:
            tuple: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–∞–±–æ—á–∏—Ö_–¥–Ω–µ–π, —Å–ø–∏—Å–æ–∫_–∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö_–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
        """
        working_days = 0
        excluded_holidays = []
        current = start_date
        
        while current <= end_date:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ª–∏ –¥–µ–Ω—å (—Å—É–±–±–æ—Ç–∞=5, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
            if current.weekday() < 5:  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0, –ø—è—Ç–Ω–∏—Ü–∞=4
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –ª–∏
                date_str = current.strftime("%Y-%m-%d")
                year = current.year
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –¥–ª—è –≥–æ–¥–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                if year not in self._holidays_cache:
                    self._holidays_cache[year] = get_russian_holidays(year)
                
                russian_holidays = self._holidays_cache[year]
                if current in russian_holidays:
                    excluded_holidays.append(date_str)
                else:
                    working_days += 1
            
            current += timedelta(days=1)
            
        return working_days, excluded_holidays
    
    def save_timeline_config(self, user_id: int, config: Dict[str, Any]) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            str: –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        sessions_dir = "/home/imort/Herzog_v2claude/data/sessions"
        os.makedirs(sessions_dir, exist_ok=True)
        
        filepath = f"{sessions_dir}/user_{user_id}_timeline.json"
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
            
        self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è timeline –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return filepath
    
    def load_timeline_config(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        
        Returns:
            Optional[Dict]: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        filepath = f"/home/imort/Herzog_v2claude/data/sessions/user_{user_id}_timeline.json"
        
        if not os.path.exists(filepath):
            return None
            
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                config = json.load(f)
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è timeline –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return config
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    def format_blocks_summary(self, timeline_config: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Returns:
            str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–ª–æ–∫–æ–≤
        """
        blocks = timeline_config["blocks"]
        metadata = timeline_config["project_metadata"]
        
        summary = f"üìÖ *–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞*\n"
        summary += f"–ü–µ—Ä–∏–æ–¥: {metadata['start_date']} ‚Äî {metadata['end_date']}\n"
        summary += f"–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: {metadata['total_blocks']}\n"
        summary += f"–ú–∞–∫—Å. —Ä–∞–±–æ—á–∏—Ö –≤ –Ω–µ–¥–µ–ª—é: {metadata['max_workers_per_week']}\n\n"
        
        for block in blocks:
            start_formatted = datetime.strptime(block['start_date'], "%Y-%m-%d").strftime("%d %b %y")
            end_formatted = datetime.strptime(block['end_date'], "%Y-%m-%d").strftime("%d %b %y")
            
            summary += f"*–ë–ª–æ–∫ {block['block_id']}*: "
            summary += f"{start_formatted} ‚Äî {end_formatted}, "
            summary += f"{block['working_days']} —Ä–∞–±–æ—á–∏—Ö –¥–Ω"
            
            if block['excluded_holidays']:
                summary += f" (–ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {', '.join([datetime.strptime(h, '%Y-%m-%d').strftime('%d.%m') for h in block['excluded_holidays']])})"
            
            summary += "\n"
        
        return summary

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è backward compatibility
def generate_weekly_blocks(start_date: str, end_date: str, max_workers_per_week: int = 15) -> Dict[str, Any]:
    """Wrapper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    generator = TimelineBlockGenerator()
    return generator.generate_weekly_blocks(start_date, end_date, max_workers_per_week)

def save_timeline_config(user_id: int, config: Dict[str, Any]) -> str:
    """Wrapper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    generator = TimelineBlockGenerator()
    return generator.save_timeline_config(user_id, config)

def load_timeline_config(user_id: int) -> Optional[Dict[str, Any]]:
    """Wrapper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""  
    generator = TimelineBlockGenerator()
    return generator.load_timeline_config(user_id)

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    generator = TimelineBlockGenerator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä: 2 —Å–µ–Ω—Ç—è–±—Ä—è 2025 - 9 –æ–∫—Ç—è–±—Ä—è 2025
    test_config = generator.generate_weekly_blocks(
        start_date="2025-09-02",
        end_date="2025-10-09", 
        max_workers_per_week=15
    )
    
    print("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤:")
    print(json.dumps(test_config, ensure_ascii=False, indent=2))
    
    print("\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥:")
    print(generator.format_blocks_summary(test_config))
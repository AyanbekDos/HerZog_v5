"""
–û–±—â–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API
"""

import os
import json
import logging
import asyncio
import time
import google.generativeai as genai
from typing import Dict, Any, Optional
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

class GeminiClient:
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        genai.configure(api_key=self.api_key)
        
        # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Ö –∑–∞–¥–∞—á –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        self.agent_models = {
            'work_packager': 'gemini-2.5-pro',        # –°–ª–æ–∂–Ω–æ–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç - –Ω—É–∂–Ω—ã –º–æ—â–Ω–æ—Å—Ç–∏
            'works_to_packages': 'gemini-2.5-flash-lite',  # –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ - —ç–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã
            'counter': 'gemini-2.5-flash-lite',       # –ü–æ–¥—Å—á–µ—Ç—ã - –±—ã—Å—Ç—Ä–æ –∏ –¥–µ—à–µ–≤–æ
            'scheduler_and_staffer': 'gemini-2.5-pro' # –°–ª–æ–∂–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω—É–∂–Ω—ã –º–æ—â–Ω–æ—Å—Ç–∏
        }
        
        # –ö—ç—à –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–π
        self._model_cache = {}
        
        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.model = self._get_model('gemini-2.5-pro')
    
    def _get_model(self, model_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
        if model_name not in self._model_cache:
            self._model_cache[model_name] = genai.GenerativeModel(model_name)
            logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        return self._model_cache[model_name]
    
    def get_model_for_agent(self, agent_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        model_name = self.agent_models.get(agent_name, 'gemini-2.5-pro')
        return self._get_model(model_name)
        
    async def generate_response(self, prompt: str, max_retries: int = 5, agent_name: str = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
        
        Args:
            prompt: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ
            agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        if agent_name and agent_name in self.agent_models:
            model = self.get_model_for_agent(agent_name)
            model_name = self.agent_models[agent_name]
        else:
            model = self.model
            model_name = 'gemini-2.5-pro'
        for attempt in range(max_retries):
            try:
                logger.info(f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {model_name} {f'({agent_name})' if agent_name else ''} (–ø—Ä–æ–º—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞
                if agent_name == 'work_packager':
                    max_tokens = 8000
                elif agent_name == 'counter':
                    max_tokens = 8000  # Counter –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –æ—Ç–≤–µ—Ç—ã
                else:
                    max_tokens = 4000
                    
                if attempt > 0:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
                    max_tokens = min(max_tokens * 2, 16000)
                
                # –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö –º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ RECITATION
                if attempt > 0:
                    temperature = 0.3 + (attempt * 0.1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                    top_p = 0.8 + (attempt * 0.02)       # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
                else:
                    temperature = 0.3
                    top_p = 0.8
                
                response = await model.generate_content_async(
                    prompt,
                    generation_config=genai.types.GenerationConfig(
                        temperature=min(temperature, 0.7),  # –ú–∞–∫—Å–∏–º—É–º 0.7
                        top_p=min(top_p, 0.9),             # –ú–∞–∫—Å–∏–º—É–º 0.9
                        max_output_tokens=max_tokens,
                        response_mime_type="application/json"
                    )
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º finish_reason –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –æ—à–∏–±–æ–∫
                finish_reason = getattr(response.candidates[0], 'finish_reason', None) if response.candidates else None
                
                if finish_reason == 2:  # RECITATION - –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                    logger.warning(f"‚ö†Ô∏è Gemini –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç (RECITATION). –ü—Ä–∏–º–µ–Ω—è—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ö–æ–¥–∞...")
                    if attempt < max_retries - 1:
                        # –ú–£–õ–¨–¢–ò–°–¢–†–ê–¢–ï–ì–ò–Ø –û–ë–•–û–î–ê RECITATION
                        import random, uuid, hashlib
                        
                        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –Ω–∞ flash-lite
                        if attempt == 0 and model_name == "gemini-2.5-pro":
                            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ gemini-2.5-flash-lite –¥–ª—è –æ–±—Ö–æ–¥–∞ RECITATION")
                            model = genai.GenerativeModel("gemini-2.5-flash-lite")
                            model_name = "gemini-2.5-flash-lite"
                        
                        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ï—Å–ª–∏ –∏ flash-lite –±–ª–æ–∫–∏—Ä—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ pro —Å —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                        elif attempt >= 1:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            session_id = hashlib.md5(f"{uuid.uuid4()}{random.randint(10000,99999)}".encode()).hexdigest()[:12]
                            random_words = random.choices(['–∞–ª—å—Ñ–∞', '–±–µ—Ç–∞', '–≥–∞–º–º–∞', '–¥–µ–ª—å—Ç–∞', '—ç–ø—Å–∏–ª–æ–Ω', '–∑–µ—Ç–∞', '—ç—Ç–∞', '—Ç–µ—Ç–∞'], k=3)
                            timestamp = f"{random.randint(2024,2025)}-{random.randint(1,12):02d}-{random.randint(1,28):02d}"
                            
                            # –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
                            prefix = f"""# –°–∏—Å—Ç–µ–º–∞ {session_id} | –ö–æ–¥—ã: {' '.join(random_words)} | {timestamp}
# HerZog.ai v{random.randint(30,99)}.{random.randint(10,99)} | Agent_{random.randint(100,999)} | Build_{uuid.uuid4().hex[:6]}

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï: –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
–ö–æ–Ω—Ç–µ–∫—Å—Ç: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.

"""
                            
                            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞
                            prompt_parts = prompt.split('\n')
                            for i in [len(prompt_parts)//4, len(prompt_parts)//2, 3*len(prompt_parts)//4]:
                                if i < len(prompt_parts):
                                    prompt_parts.insert(i, f"# Checkpoint_{uuid.uuid4().hex[:4]} | Attempt_{attempt}")
                            
                            suffix = f"""

# –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {session_id} | Handler: {model_name} | Mode: advanced
# –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
"""
                            prompt = prefix + '\n'.join(prompt_parts) + suffix
                        
                        await asyncio.sleep(3 + attempt)  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –ø–∞—É–∑–∞
                        continue
                    else:
                        raise Exception("–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Gemini –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫")
                
                if finish_reason == 3:  # SAFETY - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    logger.warning(f"‚ö†Ô∏è Gemini –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç (SAFETY). –ü–æ–≤—Ç–æ—Ä—è—é –ø–æ–ø—ã—Ç–∫—É...")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2)
                        continue
                    else:
                        raise Exception("–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Gemini –∏–∑-–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                try:
                    response_text = response.text
                except Exception as text_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å response.text: {text_error}")
                    if finish_reason == 4:  # MAX_TOKENS - –æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω
                        logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤. –£–≤–µ–ª–∏—á–∏–≤–∞—é –ª–∏–º–∏—Ç...")
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤
                        if attempt < max_retries - 1:
                            continue
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {text_error}")
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º markdown –æ–±–µ—Ä—Ç–∫–∏
                try:
                    cleaned_text = self._clean_json_from_markdown(response_text)
                    response_json = self._try_fix_broken_json(cleaned_text)
                    json_parse_success = True
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Gemini: {e}")
                    # –ï—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ response
                    response_json = response_text
                    json_parse_success = False
                
                result = {
                    'success': True,
                    'response': response_json,
                    'json_parse_success': json_parse_success,
                    'raw_text': response_text,
                    'model_used': model_name,
                    'agent_name': agent_name,
                    'prompt_feedback': str(response.prompt_feedback) if response.prompt_feedback else None,
                    'usage_metadata': {
                        'prompt_token_count': getattr(response.usage_metadata, 'prompt_token_count', 0),
                        'candidates_token_count': getattr(response.usage_metadata, 'candidates_token_count', 0),
                        'total_token_count': getattr(response.usage_metadata, 'total_token_count', 0)
                    },
                    'attempt': attempt + 1
                }
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {model_name} {f'({agent_name})' if agent_name else ''} –∑–∞ {attempt + 1} –ø–æ–ø—ã—Ç–∫—É, —Ç–æ–∫–µ–Ω–æ–≤: {result['usage_metadata']['total_token_count']}")
                return result
                
            except Exception as e:
                error_str = str(e)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 429 –æ—à–∏–±–∫—É (rate limiting)
                if "429" in error_str or "quota" in error_str.lower() or "rate" in error_str.lower():
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    retry_delay = self._extract_retry_delay(error_str)
                    if retry_delay is None:
                        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff: 2^attempt —Å–µ–∫—É–Ω–¥
                        retry_delay = 2 ** attempt
                    
                    if attempt < max_retries - 1:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        logger.warning(f"‚è∞ 429 Rate Limit! –ñ–¥–µ–º {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 2}...")
                        await asyncio.sleep(retry_delay)
                        continue
                    else:
                        logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}) –¥–ª—è rate limit")
                
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                
                if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    return {
                        'success': False,
                        'error': error_str,
                        'response': None,
                        'attempts': max_retries
                    }
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                await asyncio.sleep(1)
        
        # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–æ–π—Ç–∏ —Å—é–¥–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return {
            'success': False,
            'error': "Unexpected error: exhausted all retries",
            'response': None
        }
    
    def _extract_retry_delay(self, error_str: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ –æ—à–∏–±–∫–∏ 429"""
        import re
        
        # –ò—â–µ–º "retry_delay {\n  seconds: 44\n}"
        match = re.search(r'retry_delay\s*\{\s*seconds:\s*(\d+)', error_str)
        if match:
            return int(match.group(1))
        
        return None
    
    def _clean_json_from_markdown(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç JSON –æ—Ç markdown –æ–±–µ—Ä—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —á–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç Gemini
        
        Args:
            text: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π JSON —Ç–µ–∫—Å—Ç
        """
        import re
        
        # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ —Ç–∏–ø–∞ ```json ... ```
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: ```json –∏–ª–∏ ``` –≤ –Ω–∞—á–∞–ª–µ, –∑–∞—Ç–µ–º JSON, –∑–∞—Ç–µ–º ``` –≤ –∫–æ–Ω—Ü–µ
        markdown_pattern = r'^```(?:json)?\s*\n?(.*?)\n?```\s*$'
        match = re.search(markdown_pattern, text.strip(), re.DOTALL | re.IGNORECASE)
        
        if match:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É ```
            cleaned = match.group(1).strip()
            return cleaned
        
        # –ï—Å–ª–∏ markdown –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return text.strip()
    
    def _try_fix_broken_json(self, text: str):
        """
        –ü—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        
        Args:
            text: JSON —Ç–µ–∫—Å—Ç
            
        Returns:
            –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç JSON
        """
        return json.loads(text)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
gemini_client = GeminiClient()
"""
Claude API –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ OpenRouter –¥–ª—è —Å–∏—Å—Ç–µ–º—ã HerZog v3.0
–ó–∞–º–µ–Ω–∞ GeminiClient —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API
"""

import os
import json
import logging
import asyncio
import time
import uuid
import aiohttp
import ast
from typing import Dict, Any, Optional
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

class ClaudeClient:
    def __init__(self):
        self.api_key = os.getenv('OPENROUTER_API_KEY')
        if not self.api_key:
            raise ValueError("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        self.base_url = "https://openrouter.ai/api/v1/chat/completions"

        # –í–°–ï–ì–î–ê –ü–†–û–î–ê–ö–®–ï–ù –†–ï–ñ–ò–ú - —É–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        self.test_mode = False

        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: –ø—Ä–æ—Å—Ç—ã–µ –∞–≥–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ Claude 3.5, —Å–ª–æ–∂–Ω—ã–µ —á–µ—Ä–µ–∑ Sonnet 4
        sonnet_4 = 'anthropic/claude-sonnet-4'
        claude_35 = 'anthropic/claude-3.5-sonnet-20241022'

        self.agent_models = {
            'work_packager': sonnet_4,        # –°–ª–æ–∂–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ ‚Üí Sonnet 4
            'works_to_packages': claude_35,   # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ ‚Üí Claude 3.5
            'counter': claude_35,             # –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞—Å—á–µ—Ç—ã ‚Üí Claude 3.5
            'scheduler_and_staffer': sonnet_4, # –°–ª–æ–∂–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí Sonnet 4
            'classifier': claude_35           # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí Claude 3.5
        }
        default_model = sonnet_4  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Sonnet 4

        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.model_name = default_model

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.usage_stats = {
            'total_requests': 0,
            'total_input_tokens': 0,
            'total_output_tokens': 0,
            'estimated_cost': 0.0
        }

    def get_model_for_agent(self, agent_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        return self.agent_models.get(agent_name, self.model_name)

    async def generate_response(self, prompt: str, max_retries: int = 5, agent_name: str = None, system_instruction: Optional[str] = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Claude —á–µ—Ä–µ–∑ OpenRouter API

        Args:
            prompt: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç (–¥–∞–Ω–Ω—ã–µ)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            system_instruction: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —à–∞–±–ª–æ–Ω—ã)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å GeminiClient)
        """
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        model_name = self.get_model_for_agent(agent_name) if agent_name else self.model_name

        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
        max_tokens = 8000  # –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Claude API
        messages = []

        if system_instruction:
            messages.append({
                "role": "system",
                "content": system_instruction
            })

        messages.append({
            "role": "user",
            "content": prompt
        })

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è OpenRouter
        payload = {
            "model": model_name,
            "messages": messages,
            "temperature": 0.3,
            "top_p": 0.8,
            "max_tokens": max_tokens,
            "stream": False,
            "provider": {
                "allow_fallbacks": False  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            },
            "usage": {
                "include": True  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            }
        }

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/imort/Herzog_v3",  # –î–ª—è OpenRouter —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            "X-Title": "Herzog v3.0 AI Pipeline"
        }

        for attempt in range(max_retries):
            try:
                logger.info(f"üì° Claude –∑–∞–ø—Ä–æ—Å {attempt + 1}/{max_retries}: {model_name} {f'({agent_name})' if agent_name else ''} (–ø—Ä–æ–º—Ç: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤, –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {max_tokens})")

                async with aiohttp.ClientSession() as session:
                    async with session.post(self.base_url, json=payload, headers=headers) as response:
                        response_data = await response.json()

                        if response.status == 200:
                            # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                            choice = response_data.get('choices', [{}])[0]
                            message = choice.get('message', {})
                            content = message.get('content', '')

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            usage = response_data.get('usage', {})
                            input_tokens = usage.get('prompt_tokens', 0)
                            output_tokens = usage.get('completion_tokens', 0)
                            total_tokens = usage.get('total_tokens', input_tokens + output_tokens)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å
                            actual_model = usage.get('model', model_name)
                            if actual_model != model_name:
                                logger.warning(f"‚ö†Ô∏è  –ó–∞–ø—Ä–æ—à–µ–Ω–∞ {model_name}, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ {actual_model}")
                            else:
                                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {actual_model}")

                            self.usage_stats['total_requests'] += 1
                            self.usage_stats['total_input_tokens'] += input_tokens
                            self.usage_stats['total_output_tokens'] += output_tokens

                            # –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è Claude —á–µ—Ä–µ–∑ OpenRouter (anthropic/claude-sonnet-4 ‚Üí 3.5 Sonnet)
                            input_cost = input_tokens * 0.000003  # $0.000003 –∑–∞ —Ç–æ–∫–µ–Ω (–∏–∑ OpenRouter –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
                            output_cost = output_tokens * 0.000015  # $0.000015 –∑–∞ —Ç–æ–∫–µ–Ω
                            estimated_cost = input_cost + output_cost
                            self.usage_stats['estimated_cost'] += estimated_cost

                            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                            try:
                                cleaned_content = self._clean_json_from_markdown(content)
                                response_json = self._try_fix_broken_json(cleaned_content)
                                json_parse_success = True
                            except (json.JSONDecodeError, SyntaxError, ValueError) as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Claude: {e}")

                                if attempt < max_retries - 1:
                                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–∑-–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries})")
                                    await asyncio.sleep(1 + attempt)
                                    continue
                                else:
                                    return {
                                        'success': False,
                                        'error': f'JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}',
                                        'response': None,
                                        'raw_text': content
                                    }

                            result = {
                                'success': True,
                                'response': response_json,
                                'json_parse_success': json_parse_success,
                                'raw_text': content,
                                'model_used': model_name,
                                'agent_name': agent_name,
                                'usage_metadata': {
                                    'prompt_token_count': input_tokens,
                                    'candidates_token_count': output_tokens,
                                    'total_token_count': total_tokens
                                },
                                'attempt': attempt + 1,
                                'llm_input': prompt,
                                'estimated_cost': estimated_cost
                            }

                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Claude {model_name} {f'({agent_name})' if agent_name else ''} –∑–∞ {attempt + 1} –ø–æ–ø—ã—Ç–∫—É")
                            logger.info(f"üí∞ –¢–æ–∫–µ–Ω—ã: {total_tokens} (~${estimated_cost:.4f}), –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ~${self.usage_stats['estimated_cost']:.4f}")

                            return result

                        elif response.status == 429:
                            # Rate limiting - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Claude 3.5 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
                            if model_name == 'anthropic/claude-sonnet-4' and attempt == 0:
                                logger.warning(f"‚è∞ 429 Rate Limit –Ω–∞ Sonnet 4! –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Claude 3.5")
                                model_name = 'anthropic/claude-3.5-sonnet-20241022'
                                payload["model"] = model_name
                                continue

                            retry_after = response.headers.get('retry-after', '60')
                            retry_delay = min(int(retry_after), 10)  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫

                            if attempt < max_retries - 1:
                                logger.warning(f"‚è∞ 429 Rate Limit! –ñ–¥–µ–º {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 2}...")
                                await asyncio.sleep(retry_delay)
                                continue
                            else:
                                logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}) –¥–ª—è rate limit")

                        else:
                            # –î—Ä—É–≥–∏–µ HTTP –æ—à–∏–±–∫–∏
                            error_msg = response_data.get('error', {}).get('message', f'HTTP {response.status}')
                            logger.error(f"‚ùå Claude API –æ—à–∏–±–∫–∞: {error_msg}")

                            if attempt == max_retries - 1:
                                return {
                                    'success': False,
                                    'error': f'Claude API error: {error_msg}',
                                    'response': None,
                                    'attempts': max_retries
                                }

                            await asyncio.sleep(1 + attempt)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Claude API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")

                if attempt == max_retries - 1:
                    return {
                        'success': False,
                        'error': str(e),
                        'response': None,
                        'attempts': max_retries
                    }

                await asyncio.sleep(1 + attempt)

        return {
            'success': False,
            'error': "Unexpected error: exhausted all retries",
            'response': None
        }

    def _clean_json_from_markdown(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç JSON –æ—Ç markdown –æ–±–µ—Ä—Ç–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å Claude
        """
        import re

        text = text.strip()

        # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ —Ç–∏–ø–∞ ```json ... ```
        markdown_pattern = r'```(?:json)?\s*\n?(.*?)\n?```'
        match = re.search(markdown_pattern, text, re.DOTALL | re.IGNORECASE)

        if match:
            cleaned = match.group(1).strip()
            return cleaned

        # –ò—â–µ–º JSON –±–ª–æ–∫ - –æ—Ç –ø–µ—Ä–≤–æ–π { –¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π }
        first_brace = text.find('{')
        if first_brace != -1:
            json_part = text[first_brace:]

            # –°—á–∏—Ç–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è JSON
            brace_count = 0
            end_pos = -1

            for i, char in enumerate(json_part):
                if char == '{':
                    brace_count += 1
                elif char == '}':
                    brace_count -= 1
                    if brace_count == 0:
                        end_pos = i
                        break

            if end_pos != -1:
                return json_part[:end_pos+1].strip()

        # –ò—â–µ–º –º–∞—Å—Å–∏–≤ JSON - –æ—Ç –ø–µ—Ä–≤–æ–π [ –¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π ]
        first_bracket = text.find('[')
        if first_bracket != -1:
            json_part = text[first_bracket:]

            bracket_count = 0
            end_pos = -1

            for i, char in enumerate(json_part):
                if char == '[':
                    bracket_count += 1
                elif char == ']':
                    bracket_count -= 1
                    if bracket_count == 0:
                        end_pos = i
                        break

            if end_pos != -1:
                return json_part[:end_pos+1].strip()

        return text

    def _try_fix_broken_json(self, text: str):
        """
        –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ LLM.
        1. –ü—Ä–æ–±—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π json.loads
        2. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ—Ç ast.literal_eval –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–≤—ã—á–µ–∫
        3. –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å \n –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        """
        import re

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        try:
            return json.loads(text)
        except json.JSONDecodeError:
            logger.warning("‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π json.loads –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º ast.literal_eval")

        # –ü–æ–ø—ã—Ç–∫–∞ 2: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ast.literal_eval –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Python-like —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏)
        try:
            evaluated = ast.literal_eval(text)
            # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç
            return json.loads(json.dumps(evaluated))
        except (ValueError, SyntaxError, MemoryError, TypeError):
            logger.warning("‚ö†Ô∏è ast.literal_eval –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ–∫—Å—Ç–∞")

        # –ü–æ–ø—ã—Ç–∫–∞ 3: –û—á–∏—Å—Ç–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
        cleaned_text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', text)
        try:
            return json.loads(cleaned_text)
        except json.JSONDecodeError:
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            cleaned_text = re.sub(r'\n', r'\\n', cleaned_text)
            try:
                return json.loads(cleaned_text)
            except json.JSONDecodeError:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                cleaned_text = cleaned_text.replace('\n', ' ').replace('\r', ' ')
                return json.loads(cleaned_text) # –ï—Å–ª–∏ –∏ —Ç—É—Ç –æ—à–∏–±–∫–∞, —Ç–æ –æ–Ω–∞ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—Å—è –Ω–∞–≤–µ—Ä—Ö

    def get_usage_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        return self.usage_stats.copy()

    def reset_usage_stats(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.usage_stats = {
            'total_requests': 0,
            'total_input_tokens': 0,
            'total_output_tokens': 0,
            'estimated_cost': 0.0
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
claude_client = ClaudeClient()

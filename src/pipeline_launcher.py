"""
–û—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""

import logging
import asyncio
from typing import Dict

logger = logging.getLogger(__name__)

async def launch_pipeline(project_path: str) -> Dict:
    """
    –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ HerZog v3.0
    
    Args:
        project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
    """
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        from .main_pipeline import run_pipeline
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        result = await run_pipeline(project_path)
        
        logger.info(f"üìä –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω: success={result.get('success')}")
        
        return result
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ pipeline_launcher: {e}", exc_info=True)
        return {
            'success': False,
            'error': str(e),
            'project_path': project_path
        }
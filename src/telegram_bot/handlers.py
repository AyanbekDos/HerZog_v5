"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ HerZog
"""

import os
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from .questionnaire import ProjectQuestionnaire, STEP_MESSAGES

logger = logging.getLogger(__name__)
questionnaire = ProjectQuestionnaire()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    
    welcome_text = f"""
üèóÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HerZog v3.0!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Å–º–µ—Ç.

–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç  
/test - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ üß™
/help - –ü–æ–º–æ—â—å
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
    """
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def new_project_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /new - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    context.user_data.clear()
    context.user_data['user_id'] = user_id
    context.user_data['current_step'] = 'files'
    context.user_data['files'] = []
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
    await update.message.reply_text(
        STEP_MESSAGES['files'],
        parse_mode='Markdown'
    )

async def test_project_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –≤—ã–±–æ—Ä–æ–º —ç—Ç–∞–ø–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    user_id = update.effective_user.id
    
    # –ü—É—Ç—å –∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
    test_source_project = "/home/imort/Herzog_v3/projects/34975055/da1ac471"
    
    if not os.path.exists(test_source_project):
        await update.message.reply_text(
            "‚ùå –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ da1ac471."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
    stages = {
        "0": "0Ô∏è‚É£ –ù–∞—á–∞—Ç—å —Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (0_input)",
        "1": "1Ô∏è‚É£ –ü–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (1_extracted)", 
        "2": "2Ô∏è‚É£ –ü–æ—Å–ª–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (2_classified)",
        "3": "3Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ (3_prepared)",
        "4": "4Ô∏è‚É£ –ü–æ—Å–ª–µ work_packager (4_work_packager)",
        "5": "5Ô∏è‚É£ –ü–æ—Å–ª–µ works_to_packages (5_works_to_packages)",
        "6": "6Ô∏è‚É£ –ü–æ—Å–ª–µ counter (6_counter)",
        "7": "7Ô∏è‚É£ –ü–æ—Å–ª–µ scheduler_and_staffer (7_scheduler_and_staffer)",
        "8": "8Ô∏è‚É£ –ü–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (–≤—Å–µ —ç—Ç–∞–ø—ã)"
    }
    
    keyboard = []
    for stage_key, stage_name in stages.items():
        keyboard.append([InlineKeyboardButton(stage_name, callback_data=f"test_stage_{stage_key}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üß™ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –Ω–∞—á–∞—Ç—å:\n\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø 0 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–π —ç—Ç–∞–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n"
        "‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –±—É–¥—É—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_test_stage_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    stage = query.data.split('_')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞
    
    test_source_project = "/home/imort/Herzog_v3/projects/34975055/da1ac471"
    
    await query.edit_message_text(
        f"üîÑ **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...**\n\n"
        f"–ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã –¥–æ —ç—Ç–∞–ø–∞ {stage}...",
        parse_mode='Markdown'
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        project_path = questionnaire.create_project_structure(user_id)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
        success = _copy_project_files_up_to_stage(test_source_project, project_path, stage)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ
            context.user_data['test_stage'] = stage
            context.user_data['project_path'] = project_path
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å /process
            input_folder = os.path.join(project_path, "0_input")
            files_info = []
            
            # –ò—â–µ–º Excel —Ñ–∞–π–ª—ã –≤ input –ø–∞–ø–∫–µ
            if os.path.exists(input_folder):
                for file_name in os.listdir(input_folder):
                    if file_name.endswith(('.xlsx', '.xls')):
                        file_path = os.path.join(input_folder, file_name)
                        file_info = {
                            'file_name': file_name,
                            'file_id': f'test_{file_name}',
                            'file_size': os.path.getsize(file_path),
                            'local_path': file_path,
                            'uploaded_at': datetime.now().isoformat()
                        }
                        files_info.append(file_info)
            
            context.user_data['files'] = files_info
            context.user_data['user_id'] = user_id
            
            await query.edit_message_text(
                f"‚úÖ **–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"üìÅ –ü—É—Ç—å: `{project_path}`\n"
                f"üéØ –≠—Ç–∞–ø: –¥–æ {stage}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —ç—Ç–∞–ø–∞ {int(stage)+1 if stage.isdigit() and int(stage) < 8 else '—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ'}\n"
                f"‚Ä¢ –ò–∑—É—á–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
                f"‚Ä¢ –û—Ç–ª–∞–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç",
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await query.edit_message_text(
            f"‚ùå **–û—à–∏–±–∫–∞**: {str(e)}",
            parse_mode='Markdown'
        )

def _copy_project_files_up_to_stage(source_project: str, target_project: str, stage: str) -> bool:
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞"""
    import shutil
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–∞–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        stage_folders = {
            "0": ["0_input"],
            "1": ["0_input", "1_extracted"], 
            "2": ["0_input", "1_extracted", "2_classified"],
            "3": ["0_input", "1_extracted", "2_classified", "3_prepared"],
            "4": ["0_input", "1_extracted", "2_classified", "3_prepared", "4_work_packager"],
            "5": ["0_input", "1_extracted", "2_classified", "3_prepared", "4_work_packager", "5_works_to_packages"],
            "6": ["0_input", "1_extracted", "2_classified", "3_prepared", "4_work_packager", "5_works_to_packages", "6_counter"],
            "7": ["0_input", "1_extracted", "2_classified", "3_prepared", "4_work_packager", "5_works_to_packages", "6_counter", "7_scheduler_and_staffer"],
            "8": ["0_input", "1_extracted", "2_classified", "3_prepared", "4_work_packager", "5_works_to_packages", "6_counter", "7_scheduler_and_staffer", "8_output"]
        }
        
        folders_to_copy = stage_folders.get(stage, ["0_input"])
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É
        for folder in folders_to_copy:
            source_folder = os.path.join(source_project, folder)
            target_folder = os.path.join(target_project, folder)
            
            if os.path.exists(source_folder):
                if os.path.exists(target_folder):
                    shutil.rmtree(target_folder)
                shutil.copytree(source_folder, target_folder)
                logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º true.json –µ—Å–ª–∏ –µ—Å—Ç—å
        source_truth = os.path.join(source_project, "true.json")
        target_truth = os.path.join(target_project, "true.json")
        
        if os.path.exists(source_truth):
            shutil.copy2(source_truth, target_truth)
            logger.info("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω true.json")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return False

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é HerZog**

**–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:**
1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /new
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª—ã —Å–º–µ—Ç  
3. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω

**–ö–æ–º–∞–Ω–¥—ã:**
/new - –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
/test - –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç (–≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ) üß™
/next - –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
/skip - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
- Excel —Ñ–∞–π–ª—ã (.xlsx) —Å–æ —Å–º–µ—Ç–∞–º–∏
- –î–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
    )

async def next_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /next - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"""
    current_step = questionnaire.get_current_step(context)
    
    if current_step == 'files' and not context.user_data.get('files'):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω Excel-—Ñ–∞–π–ª —Å —Å–º–µ—Ç–æ–π!"
        )
        return
    
    next_step = questionnaire.next_step(context)
    await update.message.reply_text(
        STEP_MESSAGES[next_step],
        parse_mode='Markdown'
    )

async def skip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /skip - –ø—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
    current_step = questionnaire.get_current_step(context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
    context.user_data[current_step] = ''
    
    next_step = questionnaire.next_step(context)
    await update.message.reply_text(
        f"‚û°Ô∏è –®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω\n\n{STEP_MESSAGES[next_step]}",
        parse_mode='Markdown'
    )

async def process_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /process - –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    
    if not context.user_data.get('files'):
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    project_path = questionnaire.create_project_structure(user_id)
    context.user_data['project_path'] = project_path
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    import shutil
    for file_info in context.user_data['files']:
        if 'local_path' in file_info and os.path.exists(file_info['local_path']):
            target_path = f"{project_path}/0_input/{file_info['file_name']}"
            shutil.copy2(file_info['local_path'], target_path)
            logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {file_info['file_name']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
    directives_path = questionnaire.save_directives(context, project_path)
    
    await update.message.reply_text(
        f"üöÄ **–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...**\n\n"
        f"üìÅ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: `{project_path}`\n"
        f"üìã –î–∏—Ä–µ–∫—Ç–∏–≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: `{directives_path}`\n\n"
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
        parse_mode='Markdown'
    )
    
    # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
    try:
        from ..pipeline_launcher import launch_pipeline
        result = await launch_pipeline(project_path)
        
        if result['success']:
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö
            output_path = f"{project_path}/8_output"
            excel_files = []
            pdf_files = []
            
            if os.path.exists(output_path):
                for file in os.listdir(output_path):
                    if file.endswith('.xlsx'):
                        excel_files.append(file)
                    elif file.endswith('.pdf'):
                        pdf_files.append(file)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ true.json
            summary_info = await _get_project_summary(f"{project_path}/true.json")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_parts = [
                "‚úÖ **–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!**",
                "",
                "üìä **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:**"
            ]
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–∞—Ö —Ä–∞–±–æ—Ç
            if summary_info:
                message_parts.extend([
                    f"üì¶ –ü–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç: `{summary_info['packages_count']}`",
                    f"üìÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: `{summary_info['duration_weeks']} –Ω–µ–¥–µ–ª—å`",
                    f"üë• –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: `{summary_info['peak_workers']} —á–µ–ª–æ–≤–µ–∫`"
                ])
            
            message_parts.append("")
            message_parts.append("üìã **–°–û–ó–î–ê–ù–ù–´–ï –û–¢–ß–ï–¢–´:**")
            
            # Excel –æ—Ç—á–µ—Ç—ã
            if excel_files:
                for excel_file in excel_files:
                    file_path = f"{output_path}/{excel_file}"
                    file_size = os.path.getsize(file_path) if os.path.exists(file_path) else 0
                    message_parts.append(f"üìÑ Excel: `{excel_file}` ({file_size} –±–∞–π—Ç)")
            else:
                message_parts.append("üìÑ Excel: ‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω")
            
            # PDF –æ—Ç—á–µ—Ç—ã
            if pdf_files:
                for pdf_file in pdf_files:
                    file_path = f"{output_path}/{pdf_file}"
                    file_size = os.path.getsize(file_path) if os.path.exists(file_path) else 0
                    message_parts.append(f"üìë PDF: `{pdf_file}` ({file_size} –±–∞–π—Ç)")
            else:
                message_parts.append("üìë PDF: ‚ö†Ô∏è –ù–µ —Å–æ–∑–¥–∞–Ω")
            
            message_parts.extend([
                "",
                f"‚è±Ô∏è **–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {result.get('completed_at', 'N/A')}",
                f"üîß **–ê–≥–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:** `{len(result.get('agents_completed', []))}`"
            ])
            
            await update.message.reply_text(
                "\n".join(message_parts),
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await _send_project_files(update, output_path, excel_files, pdf_files)
        else:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:**\n\n"
                f"`{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}`",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:**\n\n`{str(e)}`",
            parse_mode='Markdown'
        )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    current_step = questionnaire.get_current_step(context)
    
    if current_step != 'files':
        await update.message.reply_text(
            "‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."
        )
        return
    
    document = update.message.document
    
    if not document.file_name.endswith('.xlsx'):
        await update.message.reply_text(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª—ã (.xlsx)!"
        )
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
        file = await document.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        user_id = update.effective_user.id
        temp_path = f"temp_uploads/{user_id}"
        os.makedirs(temp_path, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        local_file_path = f"{temp_path}/{document.file_name}"
        await file.download_to_drive(local_file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = {
            'file_name': document.file_name,
            'file_id': document.file_id,
            'file_size': document.file_size,
            'local_path': local_file_path,
            'uploaded_at': datetime.now().isoformat()
        }
        
        if 'files' not in context.user_data:
            context.user_data['files'] = []
        
        context.user_data['files'].append(file_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ —Å–ø–∞–º–∞
        await update.message.reply_text(f"üìÅ +{document.file_name}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Ñ–∞–π–ª–∞ –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        if len(context.user_data['files']) == 1 or len(context.user_data['files']) % 3 == 0:
            await update.message.reply_text(
                f"üìä **–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(context.user_data['files'])}**\n\n"
                f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /next –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —à–∞–≥–∞–º –æ–ø—Ä–æ—Å–∞"""
    current_step = questionnaire.get_current_step(context)
    text = update.message.text.strip()
    
    if current_step == 'work_count':
        try:
            work_count = int(text)
            if work_count <= 0:
                raise ValueError
            context.user_data['work_count'] = work_count
            next_step = questionnaire.next_step(context)
            await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {work_count}\n\n{STEP_MESSAGES[next_step]}",
                parse_mode='Markdown'
            )
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15)"
            )
    
    elif current_step == 'timeline':
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∏—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            clean_text = text.strip()
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: -, ‚Äì, ‚Äî, –ø—Ä–æ–±–µ–ª
            separators = [' - ', '-', ' ‚Äì ', '‚Äì', ' ‚Äî ', '‚Äî', ' ']
            parts = None
            
            for sep in separators:
                if sep in clean_text:
                    temp_parts = clean_text.split(sep)
                    if len(temp_parts) >= 2:
                        parts = [temp_parts[0].strip(), temp_parts[-1].strip()]
                        break
            
            if not parts:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–≤–µ –¥–∞—Ç—ã")
            
            start_date = parts[0]
            end_date = parts[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç
            try:
                start_parsed = datetime.strptime(start_date, '%d.%m.%Y')
                start_normalized = start_parsed.strftime('%d.%m.%Y')
            except ValueError:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}")
            
            try:
                end_parsed = datetime.strptime(end_date, '%d.%m.%Y')
                end_normalized = end_parsed.strftime('%d.%m.%Y')
            except ValueError:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}")
            
            context.user_data['timeline'] = {
                'start_date': start_normalized,
                'end_date': end_normalized
            }
            
            next_step = questionnaire.next_step(context)
            await update.message.reply_text(
                f"‚úÖ –ü–µ—Ä–∏–æ–¥: {start_normalized} - {end_normalized}\n\n{STEP_MESSAGES[next_step]}",
                parse_mode='Markdown'
            )
        except (ValueError, IndexError) as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞—Ç–∞–º–∏! –£–∫–∞–∂–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü—Ä–∏–º–µ—Ä—ã: `01.01.2024 - 30.06.2024` –∏–ª–∏ `01.01.2024 30.06.2024`\n"
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
    
    elif current_step == 'workforce':
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–µ–µ –∏ –∏—â–µ–º —á–∏—Å–ª–∞
            import re
            clean_text = text.strip().replace(' ', '').replace(',', '')
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: 10-20, 10‚Äì20, 10 20, 10–¥–æ20, –æ—Ç10–¥–æ20
            range_patterns = [
                r'(\d+)[-‚Äì‚Äî](\d+)',
                r'(\d+)\s+(\d+)',
                r'–æ—Ç\s*(\d+)\s*–¥–æ\s*(\d+)',
                r'(\d+)\s*–¥–æ\s*(\d+)'
            ]
            
            found_range = False
            for pattern in range_patterns:
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    min_workers = int(match.group(1))
                    max_workers = int(match.group(2))
                    context.user_data['workforce'] = {
                        'min': min_workers,
                        'max': max_workers
                    }
                    workers_text = f"{min_workers}-{max_workers} —á–µ–ª–æ–≤–µ–∫"
                    found_range = True
                    break
            
            if not found_range:
                # –ü—Ä–æ—Å—Ç–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ
                workers = int(re.search(r'\d+', text).group())
                context.user_data['workforce'] = {
                    'min': workers,
                    'max': workers
                }
                workers_text = f"{workers} —á–µ–ª–æ–≤–µ–∫"
            
            next_step = questionnaire.next_step(context)
            await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö: {workers_text}\n\n{STEP_MESSAGES[next_step]}",
                parse_mode='Markdown'
            )
        except (ValueError, AttributeError):
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö!\n"
                "–ü—Ä–∏–º–µ—Ä—ã: `15`, `10-20`, `–æ—Ç 10 –¥–æ 20`"
            )
    
    elif current_step in ['conceptualizer', 'strategist', 'accountant', 'foreman']:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        context.user_data[current_step] = text
        next_step = questionnaire.next_step(context)
        await update.message.reply_text(
            f"‚úÖ –£–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n{STEP_MESSAGES[next_step]}",
            parse_mode='Markdown'
        )
    
    else:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )

async def _send_project_files(update: Update, output_path: str, excel_files: list, pdf_files: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª—ã
        for excel_file in excel_files:
            file_path = f"{output_path}/{excel_file}"
            if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                await update.message.reply_document(
                    document=open(file_path, 'rb'),
                    filename=excel_file,
                    caption=f"üìÑ {excel_file}"
                )
            else:
                logger.warning(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç: {file_path}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª—ã  
        for pdf_file in pdf_files:
            file_path = f"{output_path}/{pdf_file}"
            if os.path.exists(file_path) and os.path.getsize(file_path) > 100:  # PDF –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 100 –±–∞–π—Ç
                await update.message.reply_document(
                    document=open(file_path, 'rb'),
                    filename=pdf_file,
                    caption=f"üìë {pdf_file}"
                )
            else:
                logger.warning(f"PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {file_path}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        await update.message.reply_text(
            f"‚ö†Ô∏è –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}"
        )

async def _get_project_summary(true_json_path: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ true.json"""
    try:
        import json
        
        if not os.path.exists(true_json_path):
            return None
            
        with open(true_json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        results = data.get('results', {})
        work_packages = results.get('work_packages', [])
        schedule = results.get('schedule', {})
        staffing = results.get('staffing', {})
        
        return {
            'packages_count': len(work_packages),
            'duration_weeks': schedule.get('project_duration_weeks', 'N/A'),
            'peak_workers': staffing.get('peak_workforce', 'N/A'),
            'total_workers': schedule.get('weekly_workload', {})
        }
        
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("new", new_project_command))  
    application.add_handler(CommandHandler("test", test_project_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(CommandHandler("next", next_command))
    application.add_handler(CommandHandler("skip", skip_command))
    application.add_handler(CommandHandler("process", process_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(handle_test_stage_selection, pattern="^test_stage_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
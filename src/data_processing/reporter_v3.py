"""
–ù–û–í–´–ô –ú–æ–¥—É–ª—å REPORTER v3 –¥–ª—è HerZog v3.0
–°–æ–∑–¥–∞–Ω–∏–µ –ú–ù–û–ì–û–°–¢–†–ê–ù–ò–ß–ù–û–ì–û Excel –æ—Ç—á–µ—Ç–∞ —Å –ª–∏—Å—Ç–∞–º–∏:
- üìä –ì—Ä–∞—Ñ–∏–∫ (–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω Gantt)
- üìã –ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
- üßÆ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
"""

import json
import logging
import os
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment, NamedStyle
from openpyxl.formatting.rule import CellIsRule
from openpyxl.utils import get_column_letter
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Any

logger = logging.getLogger(__name__)

class MultiPageScheduleGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ HerZog v3.0
    """
    
    def __init__(self):
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è Excel
        self.header_fill = PatternFill(start_color="2E4057", end_color="2E4057", fill_type="solid")  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        self.header_font = Font(color="FFFFFF", bold=True, size=11)
        self.subheader_fill = PatternFill(start_color="4A628A", end_color="4A628A", fill_type="solid")  # –°—Ä–µ–¥–Ω–∏–π —Å–∏–Ω–∏–π
        self.subheader_font = Font(color="FFFFFF", bold=True, size=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
        self.progress_high = PatternFill(start_color="4CAF50", end_color="4CAF50", fill_type="solid")  # –ó–µ–ª–µ–Ω—ã–π
        self.progress_medium = PatternFill(start_color="FF9800", end_color="FF9800", fill_type="solid")  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        self.progress_low = PatternFill(start_color="F44336", end_color="F44336", fill_type="solid")  # –ö—Ä–∞—Å–Ω—ã–π
        
        # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
        self.info_fill = PatternFill(start_color="E3F2FD", end_color="E3F2FD", fill_type="solid")  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
        self.logic_fill = PatternFill(start_color="F1F8E9", end_color="F1F8E9", fill_type="solid")  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        self.reasoning_fill = PatternFill(start_color="FFF3E0", end_color="FFF3E0", fill_type="solid")  # –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        self.warning_fill = PatternFill(start_color="FFEBEE", end_color="FFEBEE", fill_type="solid")  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
        
        # –ì—Ä–∞–Ω–∏—Ü—ã
        self.border = Border(
            left=Side(style='thin', color='CCCCCC'), 
            right=Side(style='thin', color='CCCCCC'),
            top=Side(style='thin', color='CCCCCC'), 
            bottom=Side(style='thin', color='CCCCCC')
        )
        self.thick_border = Border(
            left=Side(style='medium', color='2E4057'), 
            right=Side(style='medium', color='2E4057'),
            top=Side(style='medium', color='2E4057'), 
            bottom=Side(style='medium', color='2E4057')
        )
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        self.center_align = Alignment(horizontal='center', vertical='center', wrap_text=True)
        self.left_align = Alignment(horizontal='left', vertical='center', wrap_text=True)
        self.right_align = Alignment(horizontal='right', vertical='center')
        self.top_left_align = Alignment(horizontal='left', vertical='top', wrap_text=True)
    
    def generate_multipage_excel(self, input_file: str, output_path: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞ –∏–∑ true.json
        
        Args:
            input_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É true.json
            output_path: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ true.json
            with open(input_file, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            structure_version = truth_data.get('meta', {}).get('structure_version', '1.0')
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ true.json –≤–µ—Ä—Å–∏–∏ {structure_version}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏
            if structure_version == "2.0":
                extracted_data = self._extract_data_v2(truth_data)
            else:
                extracted_data = self._extract_data_v1(truth_data)
            
            work_packages = extracted_data['work_packages']
            timeline_blocks = extracted_data['timeline_blocks']
            project_info = extracted_data['project_info']
            
            if not work_packages:
                raise Exception("–ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞")
            
            if not timeline_blocks:
                raise Exception("–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞")
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {len(work_packages)} –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ {len(timeline_blocks)} –Ω–µ–¥–µ–ª—å")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º scheduling_reasoning –¥–∞–Ω–Ω—ã–µ
            scheduling_data = self._load_scheduling_reasoning(input_file)
            
            # –°–æ–∑–¥–∞–µ–º Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
            wb = Workbook()
            
            # –õ–∏—Å—Ç 1: üìä –ì—Ä–∞—Ñ–∏–∫ (Gantt)
            ws_schedule = wb.active
            ws_schedule.title = "üìä –ì—Ä–∞—Ñ–∏–∫"
            self._create_schedule_sheet(ws_schedule, work_packages, timeline_blocks, project_info, scheduling_data)
            
            # –õ–∏—Å—Ç 2: üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è (–ù–û–í–´–ô!)
            ws_reasoning = wb.create_sheet("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            self._create_reasoning_sheet(ws_reasoning, work_packages, timeline_blocks, project_info, scheduling_data)
            
            # –õ–∏—Å—Ç 3: üìã –ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç
            ws_packages = wb.create_sheet("üìã –ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç")
            self._create_packages_sheet(ws_packages, work_packages, project_info)
            
            # –õ–∏—Å—Ç 4: üßÆ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤  
            ws_logic = wb.create_sheet("üßÆ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤")
            self._create_logic_sheet(ws_logic, work_packages, project_info, extracted_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            project_name = project_info.get('project_name', 'project').replace(' ', '_')
            filename = f"–û—Ç—á–µ—Ç_{project_name}_{timestamp}.xlsx"
            output_file = os.path.join(output_path, filename)
            
            wb.save(output_file)
            logger.info(f"‚úÖ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
            return output_file
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            import traceback
            logger.error(f"üìã –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\\n{traceback.format_exc()}")
            raise
    
    def _load_scheduling_reasoning(self, input_file: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ scheduling_reasoning –∏–∑ –ø–∞–ø–∫–∏ scheduler_and_staffer
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ scheduler_and_staffer
            project_folder = os.path.dirname(input_file)
            scheduler_response_path = os.path.join(project_folder, "7_scheduler_and_staffer", "llm_response.json")
            
            if not os.path.exists(scheduler_response_path):
                logger.warning(f"–§–∞–π–ª scheduling_reasoning –Ω–µ –Ω–∞–π–¥–µ–Ω: {scheduler_response_path}")
                return {}
            
            with open(scheduler_response_path, 'r', encoding='utf-8') as f:
                scheduler_data = json.load(f)
            
            if not scheduler_data.get('success', False):
                logger.warning("Scheduler response –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                return {}
            
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ response
            raw_response = scheduler_data.get('raw_text', scheduler_data.get('response', ''))
            if isinstance(raw_response, str):
                try:
                    # –û—á–∏—â–∞–µ–º –æ—Ç markdown –µ—Å–ª–∏ –µ—Å—Ç—å
                    if raw_response.strip().startswith('```'):
                        # –£–±–∏—Ä–∞–µ–º ```json –≤ –Ω–∞—á–∞–ª–µ –∏ ``` –≤ –∫–æ–Ω—Ü–µ
                        lines = raw_response.strip().split('\n')
                        if lines[0].startswith('```'):
                            lines = lines[1:]
                        if lines[-1].strip() == '```':
                            lines = lines[:-1]
                        raw_response = '\n'.join(lines)
                    
                    parsed_response = json.loads(raw_response)
                except json.JSONDecodeError as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å scheduler response JSON: {e}")
                    logger.warning(f"Raw response sample: {raw_response[:200]}...")
                    return {}
            else:
                parsed_response = raw_response
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º scheduled_packages —Å reasoning
            scheduled_packages = parsed_response.get('scheduled_packages', [])
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            reasoning_dict = {}
            for package in scheduled_packages:
                package_id = package.get('package_id')
                if package_id and 'scheduling_reasoning' in package:
                    reasoning_dict[package_id] = {
                        'scheduling_reasoning': package['scheduling_reasoning'],
                        'schedule_blocks': package.get('schedule_blocks', []),
                        'progress_per_block': package.get('progress_per_block', {}),
                        'staffing_per_block': package.get('staffing_per_block', {})
                    }
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(reasoning_dict)} –ø–∞–∫–µ—Ç–æ–≤")
            return reasoning_dict
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ scheduling_reasoning: {e}")
            return {}
    
    def _extract_data_v2(self, truth_data: Dict) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã v2.0"""
        return {
            'work_packages': truth_data.get('results', {}).get('work_packages', []),
            'timeline_blocks': truth_data.get('timeline_blocks', []),
            'project_info': {
                'project_name': truth_data.get('meta', {}).get('project_name', '–ü—Ä–æ–µ–∫—Ç'),
                'created_at': truth_data.get('meta', {}).get('created_at'),
                'structure_version': '2.0'
            },
            'user_inputs': truth_data.get('user_inputs', {}),
            'pipeline_status': truth_data.get('pipeline', {})
        }
    
    def _extract_data_v1(self, truth_data: Dict) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã v1.0"""
        return {
            'work_packages': truth_data.get('results', {}).get('work_packages', []),
            'timeline_blocks': truth_data.get('timeline_blocks', []),
            'project_info': {
                'project_name': truth_data.get('project_inputs', {}).get('project_name', '–ü—Ä–æ–µ–∫—Ç'),
                'created_at': truth_data.get('metadata', {}).get('created_at'),
                'structure_version': '1.0'
            },
            'user_inputs': truth_data.get('project_inputs', {}),
            'pipeline_status': truth_data.get('metadata', {}).get('pipeline_status', [])
        }
    
    def _create_schedule_sheet(self, ws, work_packages: List[Dict], timeline_blocks: List[Dict], project_info: Dict, scheduling_data: Dict = {}):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º (Gantt)"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        ws['A1'] = "üìä –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ì–†–ê–§–ò–ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ê –†–ê–ë–û–¢"
        ws.merge_cells('A1:G1')
        ws['A1'].font = Font(bold=True, size=16, color="366092")
        ws['A1'].alignment = self.center_align
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        ws['A2'] = f"–ü—Ä–æ–µ–∫—Ç: {project_info.get('project_name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')}"
        ws.merge_cells('A2:G2')
        ws['A2'].font = Font(bold=True, size=12)
        ws['A2'].alignment = self.center_align
        
        ws['A3'] = f"–°–æ–∑–¥–∞–Ω: {self._format_datetime(project_info.get('created_at'))}"
        ws.merge_cells('A3:G3')
        ws['A3'].font = Font(size=10)
        ws['A3'].alignment = self.center_align
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (—Å—Ç—Ä–æ–∫–∞ 5)
        headers = [
            "‚Ññ\\n–ø/–ø",
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\\n–≤–∏–¥–∞ —Ä–∞–±–æ—Ç", 
            "–ï–¥.\\n–∏–∑–º.",
            "–ö–æ–ª-–≤–æ",
            "–ù–∞—á–∞–ª–æ",
            "–û–∫–æ–Ω—á–∞–Ω–∏–µ",
            "–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ –Ω–µ–¥–µ–ª—è–º"
        ]
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=5, column=col, value=header)
            cell.font = self.header_font
            cell.fill = self.header_fill
            cell.alignment = self.center_align
            cell.border = self.border
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º "–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω" –Ω–∞ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
        timeline_cols = len(timeline_blocks)
        if timeline_cols > 1:
            ws.merge_cells(f'G5:{get_column_letter(6 + timeline_cols)}5')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–¥–µ–ª—å (—Å—Ç—Ä–æ–∫–∞ 6)
        for i, block in enumerate(timeline_blocks, 7):
            week_id = block.get('week_id', block.get('block_id', i-6))
            start_date = datetime.fromisoformat(block['start_date']).strftime('%d.%m')
            end_date = datetime.fromisoformat(block['end_date']).strftime('%d.%m')
            
            cell = ws.cell(row=6, column=i, value=f"–ù–µ–¥.{week_id}\\n{start_date}-{end_date}")
            cell.font = Font(size=8, bold=True)
            cell.fill = self.info_fill
            cell.alignment = self.center_align
            cell.border = self.border
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç
        current_row = 7
        for i, package in enumerate(work_packages, 1):
            package_id = package.get('package_id', '')
            
            # –ù–æ–º–µ—Ä –ø/–ø
            ws.cell(row=current_row, column=1, value=i).alignment = self.center_align
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
            package_name = package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')
            ws.cell(row=current_row, column=2, value=package_name).alignment = self.left_align
            
            # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            volume_data = package.get('volume_data', {})
            calculations = package.get('calculations', {})
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: volume_data -> calculations -> –¥–µ—Ñ–æ–ª—Ç
            unit = (volume_data.get('final_unit') or 
                   volume_data.get('unit') or 
                   calculations.get('final_unit') or 
                   calculations.get('unit') or '—à—Ç')
                   
            quantity = (volume_data.get('final_quantity') or 
                       volume_data.get('quantity') or 
                       calculations.get('final_quantity') or 
                       calculations.get('quantity') or 0)
            
            ws.cell(row=current_row, column=3, value=unit).alignment = self.center_align
            ws.cell(row=current_row, column=4, value=str(quantity)).alignment = self.center_align
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ scheduling_data (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏–ª–∏ –∏–∑ package
            schedule_info = scheduling_data.get(package_id, {})
            schedule_blocks = schedule_info.get('schedule_blocks', package.get('schedule_blocks', []))
            progress_per_block = schedule_info.get('progress_per_block', package.get('progress_per_block', {}))
            staffing_per_block = schedule_info.get('staffing_per_block', package.get('staffing_per_block', {}))
            
            # –î–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if schedule_blocks:
                start_date = self._get_package_start_date(schedule_blocks, timeline_blocks)
                end_date = self._get_package_end_date(schedule_blocks, timeline_blocks)
                ws.cell(row=current_row, column=5, value=start_date).alignment = self.center_align
                ws.cell(row=current_row, column=6, value=end_date).alignment = self.center_align
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–µ–¥–µ–ª—è–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
            for j, block in enumerate(timeline_blocks, 7):
                week_id = block.get('week_id', block.get('block_id'))
                week_str = str(week_id)
                
                if week_id in schedule_blocks and week_str in progress_per_block:
                    progress = progress_per_block[week_str]
                    staffing = staffing_per_block.get(week_str, 0)
                    
                    # –§–æ—Ä–º–∞—Ç: "50%/3—á–µ–ª"
                    cell_value = f"{progress}%/{staffing}—á–µ–ª"
                    cell = ws.cell(row=current_row, column=j, value=cell_value)
                    cell.alignment = self.center_align
                    
                    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
                    if progress >= 70:
                        cell.fill = self.progress_high
                        cell.font = Font(color="FFFFFF", bold=True)
                    elif progress >= 30:
                        cell.fill = self.progress_medium
                        cell.font = Font(color="FFFFFF", bold=True)
                    else:
                        cell.fill = self.progress_low
                        cell.font = Font(color="FFFFFF", bold=True)
                    
                    cell.border = self.border
                else:
                    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
                    cell = ws.cell(row=current_row, column=j, value="")
                    cell.border = self.border
            
            current_row += 1
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._format_schedule_sheet(ws, timeline_cols)
    
    def _create_reasoning_sheet(self, ws, work_packages: List[Dict], timeline_blocks: List[Dict], project_info: Dict, scheduling_data: Dict):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'] = "üìÖ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ò –û–ë–û–°–ù–û–í–ê–ù–ò–Ø –†–ï–®–ï–ù–ò–ô"
        ws.merge_cells('A1:F1')
        ws['A1'].font = Font(bold=True, size=16, color="2E4057")
        ws['A1'].alignment = self.center_align
        ws['A1'].fill = self.reasoning_fill
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A2'] = "–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç –ø–æ –ø–∞–∫–µ—Ç–∞–º"
        ws.merge_cells('A2:F2')
        ws['A2'].font = Font(bold=True, size=12, color="4A628A")
        ws['A2'].alignment = self.center_align
        
        current_row = 4
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å scheduling_reasoning
        scheduled_packages = []
        for package in work_packages:
            package_id = package.get('package_id', '')
            if package_id in scheduling_data:
                scheduled_packages.append(package)
        
        if not scheduled_packages:
            ws.cell(row=current_row, column=1, value="‚ö†Ô∏è –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã").font = Font(bold=True, color="F44336")
            return
        
        for i, package in enumerate(scheduled_packages, 1):
            package_id = package.get('package_id', '')
            schedule_info = scheduling_data.get(package_id, {})
            reasoning = schedule_info.get('scheduling_reasoning', {})
            
            if not reasoning:
                continue
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–∫–µ—Ç–∞
            package_header = f"üì¶ –ü–ê–ö–ï–¢ {i}: {package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')}"
            ws.cell(row=current_row, column=1, value=package_header)
            ws.cell(row=current_row, column=1).font = Font(bold=True, size=14, color="2E4057")
            ws.cell(row=current_row, column=1).fill = self.subheader_fill
            ws.merge_cells(f'A{current_row}:F{current_row}')
            current_row += 1
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            schedule_blocks = schedule_info.get('schedule_blocks', [])
            progress_per_block = schedule_info.get('progress_per_block', {})
            staffing_per_block = schedule_info.get('staffing_per_block', {})
            
            info_items = [
                ("üìÖ ID –ø–∞–∫–µ—Ç–∞:", package_id),
                ("‚è±Ô∏è –ù–µ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", f"{min(schedule_blocks)}-{max(schedule_blocks)}" if schedule_blocks else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"),
                ("üë• –û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å:", f"{sum(staffing_per_block.values())} —á–µ–ª¬∑–Ω–µ–¥" if staffing_per_block else "0"),
                ("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", " | ".join([f"–ù–µ–¥.{k}: {v}%" for k, v in progress_per_block.items()]) if progress_per_block else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            ]
            
            for label, value in info_items:
                ws.cell(row=current_row, column=1, value=label).font = Font(bold=True, size=10)
                ws.cell(row=current_row, column=2, value=str(value))
                ws.cell(row=current_row, column=1).fill = self.info_fill
                ws.cell(row=current_row, column=2).fill = self.info_fill
                current_row += 1
            
            current_row += 1
            
            # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
            reasoning_items = [
                ("üóìÔ∏è –ü–û–ß–ï–ú–£ –ò–ú–ï–ù–ù–û –≠–¢–ò –ù–ï–î–ï–õ–ò:", reasoning.get('why_these_weeks', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
                ("‚è≥ –ü–û–ß–ï–ú–£ –ò–ú–ï–ù–ù–û –¢–ê–ö–ê–Ø –ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨:", reasoning.get('why_this_duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
                ("üìä –ü–û–ß–ï–ú–£ –ò–ú–ï–ù–ù–û –¢–ê–ö–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨:", reasoning.get('why_this_sequence', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
                ("üë∑ –ü–û–ß–ï–ú–£ –ò–ú–ï–ù–ù–û –¢–ê–ö–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –õ–Æ–î–ï–ô:", reasoning.get('why_this_staffing', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            ]
            
            for j, (label, explanation) in enumerate(reasoning_items):
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
                ws.cell(row=current_row, column=1, value=label)
                ws.cell(row=current_row, column=1).font = Font(bold=True, size=11, color="FF6F00")
                ws.cell(row=current_row, column=1).fill = self.reasoning_fill
                ws.merge_cells(f'A{current_row}:F{current_row}')
                current_row += 1
                
                # –¢–µ–∫—Å—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
                ws.cell(row=current_row, column=1, value=explanation)
                ws.cell(row=current_row, column=1).alignment = self.top_left_align
                ws.cell(row=current_row, column=1).font = Font(size=10)
                ws.merge_cells(f'A{current_row}:F{current_row}')
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                ws.row_dimensions[current_row].height = max(20, len(explanation) // 100 * 15)
                
                current_row += 2
            
            current_row += 2  # –ü—Ä–æ–ø—É—Å–∫ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._format_reasoning_sheet(ws)
    
    def _create_packages_sheet(self, ws, work_packages: List[Dict], project_info: Dict):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –ø–∞–∫–µ—Ç–∞–º —Ä–∞–±–æ—Ç"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'] = "üìã –ü–ê–ö–ï–¢–´ –†–ê–ë–û–¢ - –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"
        ws.merge_cells('A1:H1')
        ws['A1'].font = Font(bold=True, size=16, color="366092")
        ws['A1'].alignment = self.center_align
        
        current_row = 3
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        for i, package in enumerate(work_packages, 1):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–∫–µ—Ç–∞
            package_header = f"üì¶ –ü–ê–ö–ï–¢ {i}: {package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')}"
            ws.cell(row=current_row, column=1, value=package_header).font = Font(bold=True, size=14, color="366092")
            ws.merge_cells(f'A{current_row}:H{current_row}')
            current_row += 1
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞
            volume_data = package.get('volume_data', {})
            calculations = package.get('calculations', {})
            
            unit = (volume_data.get('final_unit') or volume_data.get('unit') or 
                   calculations.get('final_unit') or calculations.get('unit') or '—à—Ç')
            quantity = (volume_data.get('final_quantity') or volume_data.get('quantity') or 
                       calculations.get('final_quantity') or calculations.get('quantity') or 0)
            
            # –î–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞
            package_details = [
                ("ID –ø–∞–∫–µ—Ç–∞:", package.get('package_id', 'N/A')),
                ("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:", unit),
                ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", str(quantity)),
                ("–û–ø–∏—Å–∞–Ω–∏–µ:", package.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            ]
            
            for label, value in package_details:
                ws.cell(row=current_row, column=1, value=label).font = Font(bold=True)
                ws.cell(row=current_row, column=2, value=value)
                current_row += 1
            
            # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
            logic = (volume_data.get('calculation_logic') or 
                    calculations.get('calculation_logic') or 
                    '–õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            
            ws.cell(row=current_row, column=1, value="–õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:").font = Font(bold=True)
            ws.cell(row=current_row, column=2, value=logic[:200] + "..." if len(logic) > 200 else logic)
            current_row += 1
            
            # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
            reasoning = volume_data.get('reasoning', {})
            if reasoning:
                current_row += 1
                ws.cell(row=current_row, column=1, value="üìù –û–ë–û–°–ù–û–í–ê–ù–ò–Ø –†–ê–°–ß–ï–¢–û–í:").font = Font(bold=True, size=11, color="2F5233")
                current_row += 1
                
                # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                why_quantity = reasoning.get('why_this_quantity', '')
                if why_quantity:
                    ws.cell(row=current_row, column=1, value="‚Ä¢ –ü–æ—á–µ–º—É —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:").font = Font(bold=True)
                    ws.merge_cells(f'B{current_row}:H{current_row}')
                    ws.cell(row=current_row, column=2, value=why_quantity).alignment = self.left_align
                    current_row += 1
                
                # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
                why_unit = reasoning.get('why_this_unit', '')
                if why_unit:
                    ws.cell(row=current_row, column=1, value="‚Ä¢ –ü–æ—á–µ–º—É —ç—Ç–∞ –µ–¥–∏–Ω–∏—Ü–∞:").font = Font(bold=True)
                    ws.merge_cells(f'B{current_row}:H{current_row}')
                    ws.cell(row=current_row, column=2, value=why_unit).alignment = self.left_align
                    current_row += 1
                
                # –ü–æ–¥—Ö–æ–¥ –∫ —Ä–∞—Å—á–µ—Ç—É
                calc_approach = reasoning.get('calculation_approach', '')
                if calc_approach:
                    ws.cell(row=current_row, column=1, value="‚Ä¢ –ü–æ–¥—Ö–æ–¥ –∫ —Ä–∞—Å—á–µ—Ç—É:").font = Font(bold=True)
                    ws.merge_cells(f'B{current_row}:H{current_row}')
                    ws.cell(row=current_row, column=2, value=calc_approach).alignment = self.left_align
                    current_row += 1
            
            # –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –≤ –ø–∞–∫–µ—Ç–µ
            current_row += 1
            ws.cell(row=current_row, column=1, value="üìã –í–•–û–î–Ø–©–ò–ï –†–ê–ë–û–¢–´:").font = Font(bold=True, size=12, color="2F5233")
            current_row += 1
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç
            work_headers = ["‚Ññ", "–ö–æ–¥ —Ä–∞–±–æ—Ç—ã", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", "–ï–¥–∏–Ω–∏—Ü–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–æ–ª—å", "–£—á–∞—Å—Ç–∏–µ"]
            for col, header in enumerate(work_headers, 1):
                cell = ws.cell(row=current_row, column=col, value=header)
                cell.font = Font(bold=True)
                cell.fill = self.info_fill
                cell.alignment = self.center_align
                cell.border = self.border
            current_row += 1
            
            # –ù–∞–π–¥–µ–º —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            package_works = self._get_package_works(package.get('package_id'), work_packages, project_info)
            
            for j, work in enumerate(package_works, 1):
                ws.cell(row=current_row, column=1, value=j).alignment = self.center_align
                ws.cell(row=current_row, column=2, value=work.get('code', 'N/A'))
                ws.cell(row=current_row, column=3, value=work.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                ws.cell(row=current_row, column=4, value=work.get('unit', '—à—Ç')).alignment = self.center_align
                ws.cell(row=current_row, column=5, value=str(work.get('quantity', 0))).alignment = self.right_align
                ws.cell(row=current_row, column=6, value=work.get('role', '–æ—Å–Ω–æ–≤–Ω–∞—è')).alignment = self.center_align
                ws.cell(row=current_row, column=7, value=work.get('included', '–ø–æ–ª–Ω–∞—è')).alignment = self.center_align
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                for col in range(1, 8):
                    ws.cell(row=current_row, column=col).border = self.border
                    
                current_row += 1
            
            current_row += 2  # –ü—Ä–æ–ø—É—Å–∫ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._format_packages_sheet(ws)
    
    def _get_package_works(self, package_id, work_packages, project_info):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
        works = []
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ source_work_items
        source_works = project_info.get('source_work_items', [])
        for work in source_works:
            if work.get('package_id') == package_id:
                works.append({
                    'code': work.get('code', 'N/A'),
                    'name': work.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'unit': work.get('unit', '—à—Ç'),
                    'quantity': work.get('quantity', 0),
                    'role': '–∏—Å—Ö–æ–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
                })
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ source_work_items, –∏—â–µ–º –≤ volume_data –ø–∞–∫–µ—Ç–∞
        if not works:
            for pkg in work_packages:
                if pkg.get('package_id') == package_id:
                    volume_data = pkg.get('volume_data', {})
                    component_analysis = volume_data.get('component_analysis', [])
                    
                    for component in component_analysis:
                        works.append({
                            'code': component.get('code', 'N/A'),
                            'name': component.get('work_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'unit': component.get('unit', '—à—Ç'),
                            'quantity': component.get('quantity', 0),
                            'role': self._translate_role(component.get('role', 'unknown')),
                            'included': self._translate_included(component.get('included', 'full'))
                        })
                    break
        
        return works
    
    def _translate_role(self, role):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä–æ–ª—å —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        role_translations = {
            'base_surface': '–±–∞–∑–æ–≤–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å',
            'finish_layer': '—Ñ–∏–Ω–∏—à–Ω—ã–π —Å–ª–æ–π', 
            'adjustment': '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞',
            'preparation': '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            'base_element': '–±–∞–∑–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç',
            'safety_element': '—ç–ª–µ–º–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            'separate_work': '–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
            'full': '–ø–æ–ª–Ω–∞—è',
            'excluded': '–∏—Å–∫–ª—é—á–µ–Ω–∞',
            'reference': '—Å–ø—Ä–∞–≤–æ—á–Ω–∞—è'
        }
        return role_translations.get(role, role)
    
    def _translate_included(self, included):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–∏–ø —É—á–∞—Å—Ç–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        included_translations = {
            'full': '–ø–æ–ª–Ω–∞—è',
            'excluded': '–∏—Å–∫–ª—é—á–µ–Ω–∞',
            'reference': '—Å–ø—Ä–∞–≤–æ—á–Ω–∞—è',
            'partial': '—á–∞—Å—Ç–∏—á–Ω–∞—è'
        }
        return included_translations.get(included, included)
    
    def _create_logic_sheet(self, ws, work_packages: List[Dict], project_info: Dict, extracted_data: Dict):
        """–°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –ª–æ–≥–∏–∫–æ–π —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A1'] = "üßÆ –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–û–í –ò –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"
        ws.merge_cells('A1:E1')
        ws['A1'].font = Font(bold=True, size=16, color="366092")
        ws['A1'].alignment = self.center_align
        
        current_row = 3
        
        # –ë–ª–æ–∫ 1: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        ws.cell(row=current_row, column=1, value="üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï").font = Font(bold=True, size=12)
        current_row += 1
        
        project_details = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", project_info.get('project_name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')),
            ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:", project_info.get('structure_version', '1.0')),
            ("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", self._format_datetime(project_info.get('created_at'))),
            ("–í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç:", len(work_packages)),
            ("–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤:", len(extracted_data.get('timeline_blocks', [])))
        ]
        
        for label, value in project_details:
            ws.cell(row=current_row, column=1, value=label).font = Font(bold=True)
            ws.cell(row=current_row, column=2, value=str(value))
            current_row += 1
        
        current_row += 2
        
        # –ë–ª–æ–∫ 2: –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        ws.cell(row=current_row, column=1, value="üßÆ –î–ï–¢–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–û–í").font = Font(bold=True, size=12)
        current_row += 1
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        calc_headers = ["–ü–∞–∫–µ—Ç", "–ï–¥–∏–Ω–∏—Ü–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"]
        for col, header in enumerate(calc_headers, 1):
            cell = ws.cell(row=current_row, column=col, value=header)
            cell.font = self.header_font
            cell.fill = self.logic_fill
            cell.alignment = self.center_align
            cell.border = self.border
        current_row += 1
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–æ–≤
        for package in work_packages:
            package_name = package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')
            
            # –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–æ–≤ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            volume_data = package.get('volume_data', {})
            calculations = package.get('calculations', {})
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: volume_data -> calculations -> –¥–µ—Ñ–æ–ª—Ç
            unit = (volume_data.get('final_unit') or 
                   volume_data.get('unit') or 
                   calculations.get('final_unit') or 
                   calculations.get('unit') or '—à—Ç')
                   
            quantity = (volume_data.get('final_quantity') or 
                       volume_data.get('quantity') or 
                       calculations.get('final_quantity') or 
                       calculations.get('quantity') or 0)
            
            # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
            logic = (volume_data.get('calculation_logic') or 
                    calculations.get('calculation_logic') or 
                    calculations.get('calculation_summary') or 
                    '–õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                    
            reasoning = volume_data.get('reasoning', {})
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å volume_data)
            if reasoning and volume_data:
                why_quantity = reasoning.get('why_this_quantity', '')
                why_unit = reasoning.get('why_this_unit', '')
                approach = reasoning.get('calculation_approach', '')
                
                if why_quantity or why_unit or approach:
                    extended_logic = f"{logic}\n\n–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {why_quantity}\n–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã: {why_unit}\n–ü–æ–¥—Ö–æ–¥ –∫ —Ä–∞—Å—á–µ—Ç—É: {approach}"
                    logic = extended_logic[:400] + "..." if len(extended_logic) > 400 else extended_logic
            
            ws.cell(row=current_row, column=1, value=package_name).alignment = self.left_align
            ws.cell(row=current_row, column=2, value=unit).alignment = self.center_align
            ws.cell(row=current_row, column=3, value=str(quantity)).alignment = self.right_align
            ws.cell(row=current_row, column=4, value=logic).alignment = self.left_align
            
            current_row += 1
        
        current_row += 2
        
        # –ë–ª–æ–∫ 3: –°—Ç–∞—Ç—É—Å pipeline
        pipeline_status = extracted_data.get('pipeline_status', {})
        if pipeline_status:
            ws.cell(row=current_row, column=1, value="üîÑ –°–¢–ê–¢–£–° –û–ë–†–ê–ë–û–¢–ö–ò").font = Font(bold=True, size=12)
            current_row += 1
            
            # –î–ª—è v2.0
            if isinstance(pipeline_status, dict):
                agents = pipeline_status.get('agents_status', [])
                current_stage = pipeline_status.get('current_stage', 'unknown')
                
                ws.cell(row=current_row, column=1, value="–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è:").font = Font(bold=True)
                ws.cell(row=current_row, column=2, value=current_stage)
                current_row += 1
                
                for agent in agents:
                    agent_name = agent.get('agent', 'unknown')
                    status = agent.get('status', 'unknown')
                    duration = agent.get('duration', 'N/A')
                    
                    ws.cell(row=current_row, column=1, value=f"{agent_name}:")
                    ws.cell(row=current_row, column=2, value=status)
                    ws.cell(row=current_row, column=3, value=f"{duration}s" if duration and duration != 'N/A' else 'N/A')
                    current_row += 1
            
            # –î–ª—è v1.0
            elif isinstance(pipeline_status, list):
                for status in pipeline_status:
                    agent_name = status.get('agent_name', 'unknown')
                    agent_status = status.get('status', 'unknown')
                    
                    ws.cell(row=current_row, column=1, value=f"{agent_name}:")
                    ws.cell(row=current_row, column=2, value=agent_status)
                    current_row += 1
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._format_logic_sheet(ws)
    
    def _get_package_start_date(self, schedule_blocks: List[int], timeline_blocks: List[Dict]) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç"""
        if not schedule_blocks:
            return ""
        
        min_week = min(schedule_blocks)
        for block in timeline_blocks:
            block_id = block.get('week_id', block.get('block_id'))
            if block_id == min_week:
                date = datetime.fromisoformat(block['start_date'])
                return date.strftime('%d.%m.%Y')
        return ""
    
    def _get_package_end_date(self, schedule_blocks: List[int], timeline_blocks: List[Dict]) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç"""
        if not schedule_blocks:
            return ""
        
        max_week = max(schedule_blocks)
        for block in timeline_blocks:
            block_id = block.get('week_id', block.get('block_id'))
            if block_id == max_week:
                date = datetime.fromisoformat(block['end_date'])
                return date.strftime('%d.%m.%Y')
        return ""
    
    def _format_datetime(self, datetime_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if not datetime_str:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        try:
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
            return dt.strftime('%d.%m.%Y %H:%M')
        except:
            return str(datetime_str)
    
    def _format_schedule_sheet(self, ws, timeline_cols: int):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 5   # ‚Ññ
        ws.column_dimensions['B'].width = 40  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
        ws.column_dimensions['C'].width = 8   # –ï–¥.–∏–∑–º
        ws.column_dimensions['D'].width = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ws.column_dimensions['E'].width = 12  # –ù–∞—á–∞–ª–æ
        ws.column_dimensions['F'].width = 12  # –û–∫–æ–Ω—á–∞–Ω–∏–µ
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        for i in range(7, 7 + timeline_cols):
            col_letter = get_column_letter(i)
            ws.column_dimensions[col_letter].width = 10
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
        max_row = ws.max_row
        max_col = 6 + timeline_cols
        
        for row in range(5, max_row + 1):
            for col in range(1, max_col + 1):
                cell = ws.cell(row=row, column=col)
                cell.border = self.border
    
    def _format_packages_sheet(self, ws):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç"""
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 5   # ‚Ññ
        ws.column_dimensions['B'].width = 20  # –ö–æ–¥ —Ä–∞–±–æ—Ç—ã
        ws.column_dimensions['C'].width = 50  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        ws.column_dimensions['D'].width = 12  # –ï–¥–∏–Ω–∏—Ü–∞
        ws.column_dimensions['E'].width = 12  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ws.column_dimensions['F'].width = 18  # –†–æ–ª—å
        ws.column_dimensions['G'].width = 12  # –£—á–∞—Å—Ç–∏–µ
        ws.column_dimensions['H'].width = 15  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
        
        # –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
        max_row = ws.max_row
        for row in range(3, max_row + 1):
            for col in range(1, 9):
                ws.cell(row=row, column=col).border = self.border
    
    def _format_reasoning_sheet(self, ws):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–π"""
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 80  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        ws.column_dimensions['B'].width = 25  # –ó–Ω–∞—á–µ–Ω–∏—è
        ws.column_dimensions['C'].width = 15  # –î–æ–ø. –∫–æ–ª–æ–Ω–∫–∏
        ws.column_dimensions['D'].width = 15
        ws.column_dimensions['E'].width = 15
        ws.column_dimensions['F'].width = 15
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —è—á–µ–π–∫–∞–º
        max_row = ws.max_row
        for row in range(1, max_row + 1):
            for col in range(1, 7):
                cell = ws.cell(row=row, column=col)
                if cell.value:
                    cell.border = self.border
    
    def _format_logic_sheet(self, ws):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 30  # –ü–∞–∫–µ—Ç
        ws.column_dimensions['B'].width = 12  # –ï–¥–∏–Ω–∏—Ü–∞
        ws.column_dimensions['C'].width = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ws.column_dimensions['D'].width = 80  # –õ–æ–≥–∏–∫–∞
        ws.column_dimensions['E'].width = 15  # –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ
def generate_multipage_excel_report(input_file: str, output_path: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    Args:
        input_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É true.json
        output_path: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    generator = MultiPageScheduleGenerator()
    return generator.generate_multipage_excel(input_file, output_path)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_input = "/home/imort/Herzog_v3/projects/34975055/d490876a/true.json"
    test_output = "/tmp"
    
    if os.path.exists(test_input):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å scheduling_reasoning...")
        try:
            result_file = generate_multipage_excel_report(test_input, test_output)
            print(f"‚úÖ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {result_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_input}")
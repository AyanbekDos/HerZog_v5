"""
–£–õ–£–ß–®–ï–ù–ù–´–ô –ú–æ–¥—É–ª—å REPORTER v4 –¥–ª—è HerZog v3.0
–°–æ–∑–¥–∞–Ω–∏–µ –ú–ù–û–ì–û–°–¢–†–ê–ù–ò–ß–ù–û–ì–û Excel –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º UI/UX:
- üìä –ì—Ä–∞—Ñ–∏–∫ (–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω Gantt —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏)
- üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è (–¥–µ—Ç–∞–ª—å–Ω—ã–µ reasoning –∏–∑ scheduler)
- üìã –ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
- üßÆ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π –¥–∏–∑–∞–π–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
- –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –í–∫–ª—é—á–µ–Ω–∏–µ scheduling_reasoning –¥–∞–Ω–Ω—ã—Ö
- –£–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import logging
import os
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment, GradientFill
from openpyxl.utils import get_column_letter
from openpyxl.formatting.rule import ColorScaleRule, IconSetRule
from openpyxl.worksheet.dimensions import ColumnDimension
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Any, Optional

logger = logging.getLogger(__name__)

class ProfessionalScheduleGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UI/UX –¥–∏–∑–∞–π–Ω–æ–º –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ–º scheduling_reasoning
    """
    
    def __init__(self):
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
        self.colors = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ (Material Design inspired)
            'primary_blue': '1E88E5',      # –°–∏–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π
            'primary_dark': '0D47A1',      # –°–∏–Ω–∏–π —Ç–µ–º–Ω—ã–π
            'primary_light': 'E3F2FD',     # –°–∏–Ω–∏–π —Å–≤–µ—Ç–ª—ã–π
            
            'secondary_green': '43A047',    # –ó–µ–ª–µ–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç
            'secondary_orange': 'FB8C00',   # –û—Ä–∞–Ω–∂–µ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
            'secondary_purple': '8E24AA',   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
            
            # –°—Ç–∞—Ç—É—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞
            'success': '4CAF50',           # –£—Å–ø–µ—Ö/–∑–∞–≤–µ—Ä—à–µ–Ω–æ
            'warning': 'FF9800',           # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ/–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            'error': 'F44336',             # –û—à–∏–±–∫–∞/–∫—Ä–∏—Ç–∏—á–Ω–æ
            'info': '2196F3',              # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            'progress_low': 'FFECB3',      # 0-30%
            'progress_medium': 'FFD54F',   # 30-70%
            'progress_high': '4CAF50',     # 70-100%
            
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
            'neutral_light': 'F5F5F5',     # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            'neutral_medium': 'E0E0E0',    # –°—Ä–µ–¥–Ω–µ-—Å–µ—Ä—ã–π
            'neutral_dark': '424242',      # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            'white': 'FFFFFF',
            'black': '000000'
        }
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        self._init_styles()
        
    def _init_styles(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        self.header_main = Font(
            color=self.colors['white'], 
            bold=True, 
            size=18, 
            name='Segoe UI'
        )
        self.header_secondary = Font(
            color=self.colors['primary_dark'], 
            bold=True, 
            size=14, 
            name='Segoe UI'
        )
        self.header_table = Font(
            color=self.colors['white'], 
            bold=True, 
            size=11, 
            name='Segoe UI'
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        self.text_normal = Font(
            color=self.colors['neutral_dark'], 
            size=10, 
            name='Segoe UI'
        )
        self.text_bold = Font(
            color=self.colors['neutral_dark'], 
            bold=True, 
            size=10, 
            name='Segoe UI'
        )
        self.text_small = Font(
            color=self.colors['neutral_dark'], 
            size=8, 
            name='Segoe UI'
        )
        
        # –ó–∞–ª–∏–≤–∫–∏
        self.fill_primary = PatternFill(
            start_color=self.colors['primary_blue'], 
            end_color=self.colors['primary_blue'], 
            fill_type="solid"
        )
        self.fill_secondary = PatternFill(
            start_color=self.colors['secondary_green'], 
            end_color=self.colors['secondary_green'], 
            fill_type="solid"
        )
        self.fill_light = PatternFill(
            start_color=self.colors['primary_light'], 
            end_color=self.colors['primary_light'], 
            fill_type="solid"
        )
        self.fill_success = PatternFill(
            start_color=self.colors['success'], 
            end_color=self.colors['success'], 
            fill_type="solid"
        )
        self.fill_warning = PatternFill(
            start_color=self.colors['warning'], 
            end_color=self.colors['warning'], 
            fill_type="solid"
        )
        
        # –ì—Ä–∞–Ω–∏—Ü—ã
        self.border_thin = Border(
            left=Side(style='thin', color=self.colors['neutral_medium']), 
            right=Side(style='thin', color=self.colors['neutral_medium']),
            top=Side(style='thin', color=self.colors['neutral_medium']), 
            bottom=Side(style='thin', color=self.colors['neutral_medium'])
        )
        self.border_thick = Border(
            left=Side(style='medium', color=self.colors['primary_blue']), 
            right=Side(style='medium', color=self.colors['primary_blue']),
            top=Side(style='medium', color=self.colors['primary_blue']), 
            bottom=Side(style='medium', color=self.colors['primary_blue'])
        )
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        self.align_center = Alignment(horizontal='center', vertical='center', wrap_text=True)
        self.align_left = Alignment(horizontal='left', vertical='center', wrap_text=True)
        self.align_right = Alignment(horizontal='right', vertical='center', wrap_text=True)
        self.align_justify = Alignment(horizontal='justify', vertical='top', wrap_text=True)
    
    def generate_professional_excel(self, input_file: str, output_path: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞
        
        Args:
            input_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É true.json
            output_path: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(input_file, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –ß–∏—Ç–∞–µ–º scheduling_reasoning –¥–∞–Ω–Ω—ã–µ
            scheduler_data = self._load_scheduler_reasoning(input_file)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            structure_version = truth_data.get('meta', {}).get('structure_version', '1.0')
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ true.json –≤–µ—Ä—Å–∏–∏ {structure_version}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏
            if structure_version == "2.0":
                extracted_data = self._extract_data_v2(truth_data)
            else:
                extracted_data = self._extract_data_v1(truth_data)
            
            work_packages = extracted_data['work_packages']
            timeline_blocks = extracted_data['timeline_blocks']
            project_info = extracted_data['project_info']
            
            if not work_packages:
                raise Exception("–ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞")
            
            if not timeline_blocks:
                raise Exception("–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞")
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {len(work_packages)} –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ {len(timeline_blocks)} –Ω–µ–¥–µ–ª—å")
            
            # –°–æ–∑–¥–∞–µ–º Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
            wb = Workbook()
            
            # –õ–∏—Å—Ç 1: üìä –ì—Ä–∞—Ñ–∏–∫ (Gantt —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏)
            ws_schedule = wb.active
            ws_schedule.title = "üìä –ì—Ä–∞—Ñ–∏–∫"
            self._create_enhanced_schedule_sheet(ws_schedule, work_packages, timeline_blocks, project_info, scheduler_data)
            
            # –õ–∏—Å—Ç 2: üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è (–ù–û–í–´–ô!)
            ws_planning = wb.create_sheet("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è")
            self._create_planning_reasoning_sheet(ws_planning, work_packages, timeline_blocks, project_info, scheduler_data)
            
            # –õ–∏—Å—Ç 3: üìã –ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
            ws_packages = wb.create_sheet("üìã –ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç")
            self._create_enhanced_packages_sheet(ws_packages, work_packages, project_info)
            
            # –õ–∏—Å—Ç 4: üßÆ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
            ws_logic = wb.create_sheet("üßÆ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤")
            self._create_enhanced_logic_sheet(ws_logic, work_packages, project_info, extracted_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            project_name = project_info.get('project_name', 'project').replace(' ', '_')
            filename = f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π_–æ—Ç—á–µ—Ç_{project_name}_{timestamp}.xlsx"
            output_file = os.path.join(output_path, filename)
            
            wb.save(output_file)
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
            return output_file
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            import traceback
            logger.error(f"üìã –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\\n{traceback.format_exc()}")
            raise
    
    def _load_scheduler_reasoning(self, input_file: str) -> Optional[Dict]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç scheduling_reasoning –¥–∞–Ω–Ω—ã–µ –∏–∑ scheduler_and_staffer –∞–≥–µ–Ω—Ç–∞
        
        Args:
            input_file: –ü—É—Ç—å –∫ true.json —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ llm_response.json –∏–ª–∏ None
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_dir = os.path.dirname(input_file)
            scheduler_response_path = os.path.join(project_dir, '7_scheduler_and_staffer', 'llm_response.json')
            
            if os.path.exists(scheduler_response_path):
                with open(scheduler_response_path, 'r', encoding='utf-8') as f:
                    scheduler_data = json.load(f)
                    
                if scheduler_data.get('success', False):
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ {scheduler_response_path}")
                    return scheduler_data.get('response', {})
                else:
                    logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å–ø–µ—à–Ω—ã –≤ {scheduler_response_path}")
                    
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {scheduler_response_path}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        return None
    
    def _extract_data_v2(self, truth_data: Dict) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã v2.0"""
        return {
            'work_packages': truth_data.get('results', {}).get('work_packages', []),
            'timeline_blocks': truth_data.get('timeline_blocks', []),
            'project_info': {
                'project_name': truth_data.get('meta', {}).get('project_name', '–ü—Ä–æ–µ–∫—Ç'),
                'created_at': truth_data.get('meta', {}).get('created_at'),
                'structure_version': '2.0'
            },
            'user_inputs': truth_data.get('user_inputs', {}),
            'pipeline_status': truth_data.get('pipeline', {})
        }
    
    def _extract_data_v1(self, truth_data: Dict) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã v1.0"""
        return {
            'work_packages': truth_data.get('results', {}).get('work_packages', []),
            'timeline_blocks': truth_data.get('timeline_blocks', []),
            'project_info': {
                'project_name': truth_data.get('project_inputs', {}).get('project_name', '–ü—Ä–æ–µ–∫—Ç'),
                'created_at': truth_data.get('metadata', {}).get('created_at'),
                'structure_version': '1.0'
            },
            'user_inputs': truth_data.get('project_inputs', {}),
            'pipeline_status': truth_data.get('metadata', {}).get('pipeline_status', [])
        }
    
    def _create_enhanced_schedule_sheet(self, ws, work_packages: List[Dict], timeline_blocks: List[Dict], 
                                      project_info: Dict, scheduler_data: Optional[Dict]):
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ª–∏—Å—Ç —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º (Gantt)"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
        ws['A1'] = "üìä –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ì–†–ê–§–ò–ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ê –†–ê–ë–û–¢"
        ws.merge_cells('A1:H1')
        ws['A1'].font = self.header_main
        ws['A1'].fill = self.fill_primary
        ws['A1'].alignment = self.align_center
        ws.row_dimensions[1].height = 25
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        ws['A2'] = f"üèóÔ∏è –ü—Ä–æ–µ–∫—Ç: {project_info.get('project_name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')}"
        ws.merge_cells('A2:H2')
        ws['A2'].font = self.header_secondary
        ws['A2'].fill = self.fill_light
        ws['A2'].alignment = self.align_center
        ws.row_dimensions[2].height = 20
        
        ws['A3'] = f"üìÖ –°–æ–∑–¥–∞–Ω: {self._format_datetime(project_info.get('created_at'))} | üì¶ –ü–∞–∫–µ—Ç–æ–≤: {len(work_packages)} | ‚è±Ô∏è –ù–µ–¥–µ–ª—å: {len(timeline_blocks)}"
        ws.merge_cells('A3:H3')
        ws['A3'].font = self.text_normal
        ws['A3'].fill = self.fill_light
        ws['A3'].alignment = self.align_center
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (—Å—Ç—Ä–æ–∫–∞ 5)
        headers = [
            "‚Ññ\\n–ø/–ø",
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\\n–ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç", 
            "–ï–¥.\\n–∏–∑–º.",
            "–û–±—ä–µ–º",
            "–ù–∞—á–∞–ª–æ",
            "–û–∫–æ–Ω—á–∞–Ω–∏–µ",
            "–ü–µ—Ä—Å–æ–Ω–∞–ª",
            "–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ –Ω–µ–¥–µ–ª—è–º"
        ]
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=5, column=col, value=header)
            cell.font = self.header_table
            cell.fill = self.fill_primary
            cell.alignment = self.align_center
            cell.border = self.border_thick
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º "–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω" –Ω–∞ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
        timeline_cols = len(timeline_blocks)
        if timeline_cols > 1:
            ws.merge_cells(f'H5:{get_column_letter(7 + timeline_cols)}5')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–¥–µ–ª—å (—Å—Ç—Ä–æ–∫–∞ 6) —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        for i, block in enumerate(timeline_blocks, 8):
            week_id = block.get('week_id', block.get('block_id', i-7))
            start_date = datetime.fromisoformat(block['start_date']).strftime('%d.%m')
            end_date = datetime.fromisoformat(block['end_date']).strftime('%d.%m')
            
            cell = ws.cell(row=6, column=i, value=f"üìÖ –ù–µ–¥.{week_id}\\n{start_date}-{end_date}")
            cell.font = Font(size=8, bold=True, color=self.colors['primary_dark'])
            cell.fill = self.fill_light
            cell.alignment = self.align_center
            cell.border = self.border_thin
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        current_row = 7
        for i, package in enumerate(work_packages, 1):
            package_id = package.get('package_id', f'pkg_{i:03d}')
            
            # –ò—â–µ–º scheduling_reasoning –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            package_reasoning = self._get_package_reasoning(package_id, scheduler_data)
            
            # –ù–æ–º–µ—Ä –ø/–ø —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            num_cell = ws.cell(row=current_row, column=1, value=i)
            num_cell.alignment = self.align_center
            num_cell.font = self.text_bold
            num_cell.fill = self.fill_secondary
            num_cell.border = self.border_thin
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Å —ç–º–æ–¥–∑–∏
            package_name = package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')
            name_cell = ws.cell(row=current_row, column=2, value=package_name)
            name_cell.alignment = self.align_left
            name_cell.font = self.text_bold
            name_cell.border = self.border_thin
            
            # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            volume_data = package.get('volume_data', {})
            calculations = package.get('calculations', {})
            
            unit = (volume_data.get('final_unit') or 
                   volume_data.get('unit') or 
                   calculations.get('final_unit') or 
                   calculations.get('unit') or '—à—Ç')
                   
            quantity = (volume_data.get('final_quantity') or 
                       volume_data.get('quantity') or 
                       calculations.get('final_quantity') or 
                       calculations.get('quantity') or 
                       calculations.get('total_quantity') or 
                       calculations.get('total_volume') or 0)
            
            unit_cell = ws.cell(row=current_row, column=3, value=unit)
            unit_cell.alignment = self.align_center
            unit_cell.font = self.text_normal
            unit_cell.border = self.border_thin
            
            qty_cell = ws.cell(row=current_row, column=4, value=f"{quantity:.2f}")
            qty_cell.alignment = self.align_center
            qty_cell.font = self.text_bold
            qty_cell.border = self.border_thin
            
            # –î–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            schedule_blocks = package.get('schedule_blocks', [])
            if schedule_blocks:
                start_date = self._get_package_start_date(schedule_blocks, timeline_blocks)
                end_date = self._get_package_end_date(schedule_blocks, timeline_blocks)
                
                start_cell = ws.cell(row=current_row, column=5, value=start_date)
                start_cell.alignment = self.align_center
                start_cell.font = self.text_normal
                start_cell.border = self.border_thin
                
                end_cell = ws.cell(row=current_row, column=6, value=end_date)
                end_cell.alignment = self.align_center
                end_cell.font = self.text_normal
                end_cell.border = self.border_thin
            
            # –û–±—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª
            staffing_per_block = package.get('staffing_per_block', {})
            total_staff = sum(staffing_per_block.values()) if staffing_per_block else 0
            max_staff = max(staffing_per_block.values()) if staffing_per_block else 0
            
            staff_cell = ws.cell(row=current_row, column=7, value=f"üë∑ –º–∞–∫—Å.{max_staff}\\n(–≤—Å–µ–≥–æ {total_staff})")
            staff_cell.alignment = self.align_center
            staff_cell.font = self.text_small
            staff_cell.border = self.border_thin
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–µ–¥–µ–ª—è–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
            progress_per_block = package.get('progress_per_block', {})
            
            for j, block in enumerate(timeline_blocks, 8):
                week_id = block.get('week_id', block.get('block_id'))
                week_str = str(week_id)
                
                cell = ws.cell(row=current_row, column=j, value="")
                cell.border = self.border_thin
                
                if week_id in schedule_blocks and week_str in progress_per_block:
                    progress = progress_per_block[week_str]
                    staffing = staffing_per_block.get(week_str, 0)
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
                    cell_value = f"üîß {progress}%\\nüë∑ {staffing}—á–µ–ª"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ reasoning
                    if package_reasoning and package_reasoning.get('scheduling_reasoning'):
                        reasoning = package_reasoning['scheduling_reasoning']
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–¥–µ–ª–∏
                        if j == 8:  # –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è
                            why_sequence = reasoning.get('why_this_sequence', '')
                            if why_sequence and len(why_sequence) > 20:
                                hint = why_sequence[:20] + "..."
                                cell_value += f"\\nüí≠ {hint}"
                    
                    cell.value = cell_value
                    cell.alignment = self.align_center
                    cell.font = self.text_small
                    
                    # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
                    if progress >= 70:
                        cell.fill = PatternFill(start_color=self.colors['progress_high'], 
                                              end_color=self.colors['progress_high'], fill_type="solid")
                    elif progress >= 30:
                        cell.fill = PatternFill(start_color=self.colors['progress_medium'], 
                                              end_color=self.colors['progress_medium'], fill_type="solid")
                    else:
                        cell.fill = PatternFill(start_color=self.colors['progress_low'], 
                                              end_color=self.colors['progress_low'], fill_type="solid")
            
            current_row += 1
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._format_enhanced_schedule_sheet(ws, timeline_cols, current_row)
    
    def _create_planning_reasoning_sheet(self, ws, work_packages: List[Dict], timeline_blocks: List[Dict], 
                                       project_info: Dict, scheduler_data: Optional[Dict]):
        """
        –ù–û–í–´–ô –õ–ò–°–¢: –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
        ws['A1'] = "üìÖ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ò –û–ë–û–°–ù–û–í–ê–ù–ò–Ø"
        ws.merge_cells('A1:F1')
        ws['A1'].font = self.header_main
        ws['A1'].fill = self.fill_primary
        ws['A1'].alignment = self.align_center
        ws.row_dimensions[1].height = 30
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        ws['A2'] = "ü§ñ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–∞ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤"
        ws.merge_cells('A2:F2')
        ws['A2'].font = self.header_secondary
        ws['A2'].fill = self.fill_light
        ws['A2'].alignment = self.align_center
        ws.row_dimensions[2].height = 20
        
        current_row = 4
        
        if not scheduler_data:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            ws.cell(row=current_row, column=1, value="‚ö†Ô∏è –î–ê–ù–ù–´–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ù–ï–î–û–°–¢–£–ü–ù–´")
            ws.merge_cells(f'A{current_row}:F{current_row}')
            cell = ws.cell(row=current_row, column=1)
            cell.font = Font(bold=True, size=14, color=self.colors['error'])
            cell.fill = PatternFill(start_color=self.colors['warning'], end_color=self.colors['warning'], fill_type="solid")
            cell.alignment = self.align_center
            
            current_row += 2
            ws.cell(row=current_row, column=1, value="–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            ws.cell(row=current_row, column=1).font = self.text_bold
            
            reasons = [
                "‚Ä¢ –ê–≥–µ–Ω—Ç scheduler_and_staffer –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                "‚Ä¢ –§–∞–π–ª 7_scheduler_and_staffer/llm_response.json –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–∏–ª–∞—Å—å",
                "‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞"
            ]
            
            for reason in reasons:
                current_row += 1
                ws.cell(row=current_row, column=1, value=reason)
                ws.cell(row=current_row, column=1).font = self.text_normal
            
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        scheduled_packages = scheduler_data.get('scheduled_packages', [])
        
        for i, package in enumerate(scheduled_packages, 1):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–∫–µ—Ç–∞
            package_name = package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')
            package_header = f"üì¶ –ü–ê–ö–ï–¢ {i}: {package_name}"
            
            ws.cell(row=current_row, column=1, value=package_header)
            ws.merge_cells(f'A{current_row}:F{current_row}')
            header_cell = ws.cell(row=current_row, column=1)
            header_cell.font = Font(bold=True, size=13, color=self.colors['primary_dark'])
            header_cell.fill = self.fill_secondary
            header_cell.alignment = self.align_left
            header_cell.border = self.border_thick
            ws.row_dimensions[current_row].height = 25
            current_row += 1
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞
            calculations = package.get('calculations', {})
            schedule_blocks = package.get('schedule_blocks', [])
            progress_per_block = package.get('progress_per_block', {})
            staffing_per_block = package.get('staffing_per_block', {})
            
            # –ë–ª–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            basic_info = [
                ("üîß –û–±—ä–µ–º —Ä–∞–±–æ—Ç:", f"{calculations.get('total_quantity', calculations.get('total_volume', 'N/A'))} {calculations.get('unit', '')}"),
                ("üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏:", f"–ù–µ–¥–µ–ª–∏ {', '.join(map(str, schedule_blocks))} ({len(schedule_blocks)} –Ω–µ–¥.)"),
                ("‚öñÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å:", self._translate_complexity(calculations.get('complexity', 'unknown'))),
                ("üë∑ –ü–µ—Ä—Å–æ–Ω–∞–ª –≤—Å–µ–≥–æ:", f"{sum(staffing_per_block.values())} —á–µ–ª-–Ω–µ–¥, –º–∞–∫—Å. {max(staffing_per_block.values()) if staffing_per_block else 0} —á–µ–ª/–Ω–µ–¥")
            ]
            
            for label, value in basic_info:
                ws.cell(row=current_row, column=1, value=label).font = self.text_bold
                ws.cell(row=current_row, column=2, value=str(value)).font = self.text_normal
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                for col in range(1, 3):
                    cell = ws.cell(row=current_row, column=col)
                    cell.border = self.border_thin
                    cell.fill = self.fill_light
                
                current_row += 1
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
            reasoning = package.get('scheduling_reasoning', {})
            if reasoning:
                current_row += 1
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–π
                ws.cell(row=current_row, column=1, value="üß† –î–ï–¢–ê–õ–¨–ù–´–ï –û–ë–û–°–ù–û–í–ê–ù–ò–Ø AI-–ê–ì–ï–ù–¢–ê:")
                ws.merge_cells(f'A{current_row}:F{current_row}')
                reasoning_header = ws.cell(row=current_row, column=1)
                reasoning_header.font = Font(bold=True, size=11, color=self.colors['secondary_purple'])
                reasoning_header.fill = PatternFill(start_color='E8EAF6', end_color='E8EAF6', fill_type="solid")
                reasoning_header.alignment = self.align_left
                reasoning_header.border = self.border_thin
                current_row += 1
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è
                reasoning_items = [
                    ("üéØ –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω—ã —ç—Ç–∏ –Ω–µ–¥–µ–ª–∏:", reasoning.get('why_these_weeks', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
                    ("‚è∞ –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reasoning.get('why_this_duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
                    ("üìä –ü–æ—á–µ–º—É —Ç–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reasoning.get('why_this_sequence', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')),
                    ("üë• –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:", reasoning.get('why_this_staffing', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                ]
                
                for question, answer in reasoning_items:
                    # –í–æ–ø—Ä–æ—Å
                    ws.cell(row=current_row, column=1, value=question)
                    question_cell = ws.cell(row=current_row, column=1)
                    question_cell.font = Font(bold=True, size=10, color=self.colors['secondary_purple'])
                    question_cell.alignment = self.align_left
                    question_cell.border = self.border_thin
                    
                    # –û—Ç–≤–µ—Ç
                    ws.merge_cells(f'B{current_row}:F{current_row}')
                    ws.cell(row=current_row, column=2, value=answer)
                    answer_cell = ws.cell(row=current_row, column=2)
                    answer_cell.font = self.text_normal
                    answer_cell.alignment = self.align_justify
                    answer_cell.border = self.border_thin
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    ws.row_dimensions[current_row].height = max(20, len(answer) // 80 * 15 + 15)
                    
                    current_row += 1
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
            if schedule_blocks and progress_per_block:
                current_row += 1
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                ws.cell(row=current_row, column=1, value="üìà –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –í–†–ï–ú–ï–ù–ù–´–ú –ë–õ–û–ö–ê–ú:")
                ws.merge_cells(f'A{current_row}:F{current_row}')
                detail_header = ws.cell(row=current_row, column=1)
                detail_header.font = Font(bold=True, size=11, color=self.colors['secondary_green'])
                detail_header.fill = PatternFill(start_color='E8F5E8', end_color='E8F5E8', fill_type="solid")
                detail_header.alignment = self.align_left
                detail_header.border = self.border_thin
                current_row += 1
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                detail_headers = ["–ù–µ–¥–µ–ª—è", "–ü–µ—Ä–∏–æ–¥", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–ü–µ—Ä—Å–æ–Ω–∞–ª", "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å"]
                for col, header in enumerate(detail_headers, 1):
                    cell = ws.cell(row=current_row, column=col, value=header)
                    cell.font = self.header_table
                    cell.fill = self.fill_secondary
                    cell.alignment = self.align_center
                    cell.border = self.border_thin
                current_row += 1
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –Ω–µ–¥–µ–ª—è–º
                for week_id in schedule_blocks:
                    week_str = str(week_id)
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–µ–ª–∏
                    week_period = "–ù–µ –Ω–∞–π–¥–µ–Ω"
                    for block in timeline_blocks:
                        if block.get('week_id', block.get('block_id')) == week_id:
                            start_date = datetime.fromisoformat(block['start_date']).strftime('%d.%m.%Y')
                            end_date = datetime.fromisoformat(block['end_date']).strftime('%d.%m.%Y')
                            week_period = f"{start_date} - {end_date}"
                            break
                    
                    progress = progress_per_block.get(week_str, 0)
                    staffing = staffing_per_block.get(week_str, 0)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
                    if staffing > 0 and progress > 0:
                        intensity = "üî• –í—ã—Å–æ–∫–∞—è" if staffing >= 5 else "‚ö° –°—Ä–µ–¥–Ω—è—è" if staffing >= 3 else "üêå –ù–∏–∑–∫–∞—è"
                    else:
                        intensity = "‚ùå –ù–µ—Ç —Ä–∞–±–æ—Ç"
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É
                    row_data = [
                        f"–ù–µ–¥–µ–ª—è {week_id}",
                        week_period,
                        f"{progress}%",
                        f"{staffing} —á–µ–ª.",
                        intensity
                    ]
                    
                    for col, data in enumerate(row_data, 1):
                        cell = ws.cell(row=current_row, column=col, value=data)
                        cell.font = self.text_normal
                        cell.alignment = self.align_center
                        cell.border = self.border_thin
                        
                        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        if col == 3:  # –ö–æ–ª–æ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            if progress >= 70:
                                cell.fill = PatternFill(start_color=self.colors['progress_high'], 
                                                      end_color=self.colors['progress_high'], fill_type="solid")
                            elif progress >= 30:
                                cell.fill = PatternFill(start_color=self.colors['progress_medium'], 
                                                      end_color=self.colors['progress_medium'], fill_type="solid")
                            else:
                                cell.fill = PatternFill(start_color=self.colors['progress_low'], 
                                                      end_color=self.colors['progress_low'], fill_type="solid")
                    
                    current_row += 1
            
            current_row += 2  # –ü—Ä–æ–ø—É—Å–∫ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._format_planning_sheet(ws)
    
    def _get_package_reasoning(self, package_id: str, scheduler_data: Optional[Dict]) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç scheduling_reasoning –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        
        Args:
            package_id: ID –ø–∞–∫–µ—Ç–∞
            scheduler_data: –î–∞–Ω–Ω—ã–µ –∏–∑ scheduler –∞–≥–µ–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞ –∏–ª–∏ None
        """
        if not scheduler_data or not isinstance(scheduler_data, dict):
            return None
        
        scheduled_packages = scheduler_data.get('scheduled_packages', [])
        for package in scheduled_packages:
            if package.get('package_id') == package_id:
                return package
        
        return None
    
    def _translate_complexity(self, complexity: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
        complexity_map = {
            'low': 'üü¢ –ù–∏–∑–∫–∞—è',
            'medium': 'üü° –°—Ä–µ–¥–Ω—è—è', 
            'high': 'üî¥ –í—ã—Å–æ–∫–∞—è',
            'unknown': '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'
        }
        return complexity_map.get(complexity.lower(), f'‚ùì {complexity}')
    
    def _create_enhanced_packages_sheet(self, ws, work_packages: List[Dict], project_info: Dict):
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –ø–∞–∫–µ—Ç–∞–º —Ä–∞–±–æ—Ç"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        ws['A1'] = "üìã –ü–ê–ö–ï–¢–´ –†–ê–ë–û–¢ - –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"
        ws.merge_cells('A1:H1')
        ws['A1'].font = self.header_main
        ws['A1'].fill = self.fill_primary
        ws['A1'].alignment = self.align_center
        ws.row_dimensions[1].height = 25
        
        current_row = 3
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        for i, package in enumerate(work_packages, 1):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–∫–µ—Ç–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            package_name = package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')
            package_header = f"üì¶ –ü–ê–ö–ï–¢ {i}: {package_name}"
            
            ws.cell(row=current_row, column=1, value=package_header)
            ws.merge_cells(f'A{current_row}:H{current_row}')
            header_cell = ws.cell(row=current_row, column=1)
            header_cell.font = Font(bold=True, size=14, color=self.colors['white'])
            
            # –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤
            if i % 2 == 1:
                header_cell.fill = self.fill_secondary
            else:
                header_cell.fill = PatternFill(start_color=self.colors['secondary_orange'], 
                                             end_color=self.colors['secondary_orange'], fill_type="solid")
            
            header_cell.alignment = self.align_left
            header_cell.border = self.border_thick
            ws.row_dimensions[current_row].height = 25
            current_row += 1
            
            # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–∞–∫–∞—è –∂–µ, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏...
            # (–∫–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É, –Ω–æ —Å –Ω–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏)
            
            current_row += 10  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._format_enhanced_packages_sheet(ws)
    
    def _create_enhanced_logic_sheet(self, ws, work_packages: List[Dict], project_info: Dict, extracted_data: Dict):
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ª–∏—Å—Ç —Å –ª–æ–≥–∏–∫–æ–π —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        ws['A1'] = "üßÆ –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–û–í –ò –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"
        ws.merge_cells('A1:E1')
        ws['A1'].font = self.header_main
        ws['A1'].fill = self.fill_primary
        ws['A1'].alignment = self.align_center
        ws.row_dimensions[1].height = 25
        
        current_row = 3
        
        # –ë–ª–æ–∫ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        ws.cell(row=current_row, column=1, value="üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï")
        ws.merge_cells(f'A{current_row}:E{current_row}')
        info_header = ws.cell(row=current_row, column=1)
        info_header.font = self.header_secondary
        info_header.fill = self.fill_secondary
        info_header.alignment = self.align_center
        info_header.border = self.border_thick
        current_row += 1
        
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏...
        # (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É, –Ω–æ —Å –Ω–æ–≤–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π)
        
        self._format_enhanced_logic_sheet(ws)
    
    def _get_package_start_date(self, schedule_blocks: List[int], timeline_blocks: List[Dict]) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç"""
        if not schedule_blocks:
            return ""
        
        min_week = min(schedule_blocks)
        for block in timeline_blocks:
            block_id = block.get('week_id', block.get('block_id'))
            if block_id == min_week:
                date = datetime.fromisoformat(block['start_date'])
                return date.strftime('%d.%m.%Y')
        return ""
    
    def _get_package_end_date(self, schedule_blocks: List[int], timeline_blocks: List[Dict]) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ —Ä–∞–±–æ—Ç"""
        if not schedule_blocks:
            return ""
        
        max_week = max(schedule_blocks)
        for block in timeline_blocks:
            block_id = block.get('week_id', block.get('block_id'))
            if block_id == max_week:
                date = datetime.fromisoformat(block['end_date'])
                return date.strftime('%d.%m.%Y')
        return ""
    
    def _format_datetime(self, datetime_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if not datetime_str:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        try:
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
            return dt.strftime('%d.%m.%Y %H:%M')
        except:
            return str(datetime_str)
    
    def _format_enhanced_schedule_sheet(self, ws, timeline_cols: int, max_row: int):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"""
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {
            'A': 5,   # ‚Ññ –ø/–ø
            'B': 35,  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            'C': 8,   # –ï–¥.–∏–∑–º
            'D': 10,  # –û–±—ä–µ–º
            'E': 12,  # –ù–∞—á–∞–ª–æ
            'F': 12,  # –û–∫–æ–Ω—á–∞–Ω–∏–µ
            'G': 15   # –ü–µ—Ä—Å–æ–Ω–∞–ª
        }
        
        for col_letter, width in column_widths.items():
            ws.column_dimensions[col_letter].width = width
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        for i in range(8, 8 + timeline_cols):
            col_letter = get_column_letter(i)
            ws.column_dimensions[col_letter].width = 12
        
        # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        ws.freeze_panes = 'C7'
    
    def _format_planning_sheet(self, ws):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        column_widths = {
            'A': 25,  # –í–æ–ø—Ä–æ—Å—ã
            'B': 60,  # –û—Ç–≤–µ—Ç—ã
            'C': 15,  # –ü–µ—Ä–∏–æ–¥
            'D': 10,  # –ü—Ä–æ–≥—Ä–µ—Å—Å
            'E': 10,  # –ü–µ—Ä—Å–æ–Ω–∞–ª
            'F': 15   # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        }
        
        for col_letter, width in column_widths.items():
            ws.column_dimensions[col_letter].width = width
    
    def _format_enhanced_packages_sheet(self, ws):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É –ø–∞–∫–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç"""
        
        column_widths = {
            'A': 5,   # ‚Ññ
            'B': 20,  # –ö–æ–¥
            'C': 50,  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            'D': 12,  # –ï–¥–∏–Ω–∏—Ü–∞
            'E': 12,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'F': 18,  # –†–æ–ª—å
            'G': 12,  # –£—á–∞—Å—Ç–∏–µ
            'H': 15   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        }
        
        for col_letter, width in column_widths.items():
            ws.column_dimensions[col_letter].width = width
    
    def _format_enhanced_logic_sheet(self, ws):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –ª–∏—Å—Ç—É –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
        
        column_widths = {
            'A': 30,  # –ü–∞–∫–µ—Ç
            'B': 12,  # –ï–¥–∏–Ω–∏—Ü–∞
            'C': 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'D': 80,  # –õ–æ–≥–∏–∫–∞
            'E': 15   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
        
        for col_letter, width in column_widths.items():
            ws.column_dimensions[col_letter].width = width


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ
def generate_professional_excel_report(input_file: str, output_path: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞ v4
    
    Args:
        input_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É true.json
        output_path: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    generator = ProfessionalScheduleGenerator()
    return generator.generate_professional_excel(input_file, output_path)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_input = "/home/imort/Herzog_v3/projects/test/b4338a45/true.json"
    test_output = "/tmp"
    
    if os.path.exists(test_input):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ v4...")
        try:
            result_file = generate_professional_excel_report(test_input, test_output)
            print(f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {result_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_input}")
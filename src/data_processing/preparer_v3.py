"""
–ù–û–í–´–ô –ú–æ–¥—É–ª—å PREPARER v3.0 –¥–ª—è HerZog v3.0
–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, —É–±–∏—Ä–∞–µ—Ç legacy –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
"""

import json
import logging
from datetime import datetime
from typing import Dict, List, Any
import os

from ..shared.timeline_blocks import generate_weekly_blocks
from ..shared.truth_initializer_v3 import truth_manager

logger = logging.getLogger(__name__)

class PreparerV3:
    """
    –ù–æ–≤—ã–π preparer –ø–æ–¥ —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É v3.0
    –°–æ–∑–¥–∞–µ—Ç –ß–ò–°–¢–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ legacy –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    """

    def __init__(self):
        self.agent_name = "preparer"

    def prepare_project(self, project_name: str, source_file: str, user_id: str,
                       extracted_data: List[Dict], classified_data: List[Dict],
                       project_config: Dict[str, Any], output_dir: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ v3.0

        Args:
            project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            source_file: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            extracted_data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç extractor
            classified_data: –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            project_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            output_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            –ü—É—Ç—å –∫ true.json
        """
        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ v3.0: {project_name}")

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        truth_data = truth_manager.create_project(
            project_name=project_name,
            source_file=source_file,
            user_id=user_id,
            project_config=project_config
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        timeline_blocks = self._generate_timeline_blocks(project_config.get("timeline", {}))
        truth_data["configuration"]["timeline"]["blocks"] = timeline_blocks

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º work_items –≤ —á–∏—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        work_items = self._prepare_work_items(classified_data)
        truth_manager.add_source_work_items(truth_data, work_items)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        classification_stats = self._calculate_classification_stats(classified_data)
        truth_manager.update_classifications(truth_data, classification_stats)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        project_path = os.path.join(output_dir, truth_data["project"]["id"])
        os.makedirs(project_path, exist_ok=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å preparer
        truth_manager.update_agent_status(truth_data, "preparer", "completed", {
            "timeline_blocks_created": len(timeline_blocks),
            "work_items_prepared": len(work_items),
            "classification_stats": classification_stats
        })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç
        truth_path = truth_manager.save_project(truth_data, project_path)

        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –ø–∞–ø–∫—É preparer –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        preparer_folder = os.path.join(project_path, "3_prepared")
        os.makedirs(preparer_folder, exist_ok=True)
        truth_manager.copy_to_agent_folder(truth_data, preparer_folder)

        logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç v3.0 —Å–æ–∑–¥–∞–Ω: {truth_path}")
        return truth_path

    def _generate_timeline_blocks(self, timeline_config: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        """
        start_date = timeline_config.get("start_date")
        end_date = timeline_config.get("end_date")

        if not start_date or not end_date:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞/–æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
            return []

        blocks = generate_weekly_blocks(start_date, end_date)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç v3.0
        timeline_blocks = []
        for i, block in enumerate(blocks, 1):
            timeline_blocks.append({
                "week_id": i,
                "start_date": block["start_date"],
                "end_date": block["end_date"],
                "working_days": block["working_days"],
                "calendar_days": block["calendar_days"],
                "holidays": block.get("excluded_holidays", []),
                "is_partial_start": block.get("is_partial_start", False),
                "is_partial_end": block.get("is_partial_end", False)
            })

        logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–æ {len(timeline_blocks)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤")
        return timeline_blocks

    def _prepare_work_items(self, classified_data: List[Dict]) -> List[Dict[str, Any]]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç work_items –≤ —á–∏—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ v3.0
        """
        work_items = []

        for item in classified_data:
            # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã (—É–±–∏—Ä–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–æ—á–µ–µ)
            if item.get('classification') != '–†–∞–±–æ—Ç–∞':
                continue

            work_item = {
                "id": item.get('id'),
                "source_file": item.get('source_file'),
                "code": item.get('code'),
                "name": item.get('name'),
                "unit": item.get('unit'),
                "quantity": self._safe_float(item.get('quantity')),
                "classification": item.get('classification'),
                "classification_reasoning": item.get('reasoning', ''),
                "assigned_package_id": None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ works_to_packages
                "extracted_at": None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å timestamp –æ—Ç extractor
                "classified_at": datetime.now().isoformat(),
                "assigned_at": None   # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ works_to_packages
            }

            work_items.append(work_item)

        logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(work_items)} —Ä–∞–±–æ—Ç")
        return work_items

    def _calculate_classification_stats(self, classified_data: List[Dict]) -> Dict[str, int]:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        stats = {
            "work_items": 0,
            "materials": 0,
            "other_items": 0
        }

        for item in classified_data:
            classification = item.get('classification', '')
            if classification == '–†–∞–±–æ—Ç–∞':
                stats["work_items"] += 1
            elif classification == '–ú–∞—Ç–µ—Ä–∏–∞–ª':
                stats["materials"] += 1
            else:
                stats["other_items"] += 1

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        return stats

    def _safe_float(self, value) -> float:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
        """
        try:
            if isinstance(value, str):
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —á–∏—Å–µ–ª
                value = value.replace(',', '.')
            return float(value)
        except (ValueError, TypeError):
            return 0.0

# –§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API
def prepare_project_legacy(extracted_data, classified_data, project_inputs, project_id, output_dir):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
    """
    preparer = PreparerV3()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    project_config = {
        "timeline": {
            "start_date": project_inputs.get("project_timeline", {}).get("start_date"),
            "end_date": project_inputs.get("project_timeline", {}).get("end_date"),
        },
        "workforce": project_inputs.get("workforce_range", {}),
        "targets": {
            "package_count": project_inputs.get("target_work_package_count", 15)
        },
        "directives": project_inputs.get("agent_directives", {})
    }

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
    project_name = project_inputs.get("project_name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
    source_file = "unknown.xlsx"  # –í —Å—Ç–∞—Ä–æ–º API –Ω–µ –±—ã–ª–æ
    user_id = "unknown"  # –í —Å—Ç–∞—Ä–æ–º API –Ω–µ –±—ã–ª–æ

    return preparer.prepare_project(
        project_name=project_name,
        source_file=source_file,
        user_id=user_id,
        extracted_data=extracted_data,
        classified_data=classified_data,
        project_config=project_config,
        output_dir=output_dir
    )
"""
PDF Exporter –¥–ª—è HerZog v3.0
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Excel –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ PDF —Ñ–æ—Ä–º–∞—Ç
"""

import os
import logging
from typing import Optional, List, Dict, Any
import subprocess
import json
from datetime import datetime

logger = logging.getLogger(__name__)

class PDFExporter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ PDF
    """
    
    def __init__(self):
        self.supported_formats = ['pdf', 'png', 'jpg']
    
    def export_excel_to_pdf(self, excel_file: str, output_path: str, format: str = 'pdf') -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –≤ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            excel_file: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            output_path: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            format: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ ('pdf', 'png', 'jpg')
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            if format not in self.supported_formats:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {self.supported_formats}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Excel —Ñ–∞–π–ª–∞
            if not os.path.exists(excel_file):
                raise FileNotFoundError(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
            
            logger.info(f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç Excel –≤ {format.upper()}: {excel_file}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            base_name = os.path.splitext(os.path.basename(excel_file))[0]
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            output_file = os.path.join(output_path, f"{base_name}_export.{format}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            success = False
            
            # –ú–µ—Ç–æ–¥ 1: LibreOffice (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
            if not success:
                success = self._convert_with_libreoffice(excel_file, output_file, format)
            
            # –ú–µ—Ç–æ–¥ 2: Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
            if not success:
                success = self._convert_with_python_libs(excel_file, output_file, format)
            
            # –ú–µ—Ç–æ–¥ 3: –°–æ–∑–¥–∞–µ–º PDF-–æ—Ç—á–µ—Ç "–≤—Ä—É—á–Ω—É—é" –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            if not success:
                success = self._create_pdf_from_data(excel_file, output_file)
            
            if success:
                logger.info(f"‚úÖ PDF —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_file}")
                return output_file
            else:
                raise Exception("–í—Å–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF: {e}")
            raise
    
    def _convert_with_libreoffice(self, excel_file: str, output_file: str, format: str) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è LibreOffice"""
        try:
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LibreOffice...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ LibreOffice
            result = subprocess.run(['which', 'libreoffice'], capture_output=True, text=True)
            if result.returncode != 0:
                logger.warning("‚ö†Ô∏è LibreOffice –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return False
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            output_dir = os.path.dirname(output_file)
            if format == 'pdf':
                cmd = [
                    'libreoffice', '--headless', '--convert-to', 'pdf',
                    '--outdir', output_dir, excel_file
                ]
            else:
                logger.warning(f"‚ö†Ô∏è LibreOffice –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ {format}")
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                # LibreOffice —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ + .pdf
                expected_file = os.path.join(output_dir, os.path.splitext(os.path.basename(excel_file))[0] + '.pdf')
                if os.path.exists(expected_file):
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if expected_file != output_file:
                        os.rename(expected_file, output_file)
                    return True
            
            logger.warning(f"‚ö†Ô∏è LibreOffice –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.stderr}")
            return False
            
        except subprocess.TimeoutExpired:
            logger.warning("‚ö†Ô∏è LibreOffice –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
            return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LibreOffice –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return False
    
    def _convert_with_python_libs(self, excel_file: str, output_file: str, format: str) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        try:
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reportlab –¥–ª—è PDF
            if format == 'pdf':
                return self._create_pdf_with_reportlab(excel_file, output_file)
            
            # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PIL + openpyxl
            elif format in ['png', 'jpg']:
                logger.warning("‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Python –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
                return False
            
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Python –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return False
    
    def _create_pdf_with_reportlab(self, excel_file: str, output_file: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç PDF –∏—Å–ø–æ–ª—å–∑—É—è reportlab"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reportlab
            try:
                from reportlab.lib.pagesizes import letter, A4
                from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
                from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
                from reportlab.lib import colors
                from reportlab.lib.units import cm
                from reportlab.pdfbase import pdfmetrics
                from reportlab.pdfbase.ttfonts import TTFont
            except ImportError:
                logger.warning("‚ö†Ô∏è reportlab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
            
            import openpyxl
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
            wb = openpyxl.load_workbook(excel_file)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
                font_paths = [
                    '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',  # Ubuntu/Debian
                    '/usr/share/fonts/TTF/DejaVuSans.ttf',            # Arch
                    '/System/Library/Fonts/Arial.ttf',               # macOS
                    'C:/Windows/Fonts/arial.ttf',                    # Windows
                    '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf'  # Liberation
                ]
                
                font_registered = False
                for font_path in font_paths:
                    if os.path.exists(font_path):
                        pdfmetrics.registerFont(TTFont('CyrillicFont', font_path))
                        font_registered = True
                        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç: {font_path}")
                        break
                
                if not font_registered:
                    logger.warning("‚ö†Ô∏è –®—Ä–∏—Ñ—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")

            # –°–æ–∑–¥–∞–µ–º PDF
            doc = SimpleDocTemplate(output_file, pagesize=A4)
            story = []
            styles = getSampleStyleSheet()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º
            if font_registered:
                styles.add(ParagraphStyle('CyrillicHeading1',
                                        parent=styles['Heading1'],
                                        fontName='CyrillicFont',
                                        fontSize=16))
                styles.add(ParagraphStyle('CyrillicNormal',
                                        parent=styles['Normal'],
                                        fontName='CyrillicFont',
                                        fontSize=10))
                heading_style = 'CyrillicHeading1'
                normal_style = 'CyrillicNormal'
            else:
                heading_style = 'Heading1'
                normal_style = 'Normal'
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç Excel
            for sheet_name in wb.sheetnames:
                ws = wb[sheet_name]
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–∏—Å—Ç–∞
                story.append(Paragraph(f"<b>{sheet_name}</b>", styles[heading_style]))
                story.append(Spacer(1, 0.5*cm))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –∏ 10 –∫–æ–ª–æ–Ω–æ–∫)
                max_rows = min(20, ws.max_row)
                max_cols = min(10, ws.max_column)
                
                data = []
                for row in range(1, max_rows + 1):
                    row_data = []
                    for col in range(1, max_cols + 1):
                        cell_value = ws.cell(row=row, column=col).value
                        if cell_value is None:
                            row_data.append("")
                        else:
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                            text = str(cell_value)
                            if len(text) > 30:
                                text = text[:27] + "..."
                            row_data.append(text)
                    data.append(row_data)
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                if data:
                    table = Table(data)
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                    table_font = 'CyrillicFont' if font_registered else 'Helvetica'
                    table_font_bold = 'CyrillicFont' if font_registered else 'Helvetica-Bold'
                    
                    table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                        ('FONTNAME', (0, 0), (-1, 0), table_font_bold),
                        ('FONTNAME', (0, 1), (-1, -1), table_font),
                        ('FONTSIZE', (0, 0), (-1, 0), 8),
                        ('FONTSIZE', (0, 1), (-1, -1), 7),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    story.append(table)
                
                story.append(Spacer(1, 1*cm))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            doc.build(story)
            logger.info("‚úÖ PDF —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ reportlab")
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF —á–µ—Ä–µ–∑ reportlab: {e}")
            return False
    
    def _create_pdf_from_data(self, excel_file: str, output_file: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç PDF –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö true.json"""
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ PDF –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π true.json —Ñ–∞–π–ª
            project_dir = self._find_project_dir(excel_file)
            if not project_dir:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
                return False
            
            truth_file = os.path.join(project_dir, "true.json")
            if not os.path.exists(truth_file):
                logger.warning("‚ö†Ô∏è –§–∞–π–ª true.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(truth_file, 'r', encoding='utf-8') as f:
                truth_data = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF
            return self._create_simple_text_pdf(truth_data, output_file)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _find_project_dir(self, excel_file: str) -> Optional[str]:
        """–ò—â–µ—Ç –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ Excel —Ñ–∞–π–ª—É"""
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ /tmp, –∞ –ø—Ä–æ–µ–∫—Ç –≤ /projects
        project_dirs = []
        
        # –ò—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        herzog_path = "/home/imort/Herzog_v3"
        if os.path.exists(herzog_path):
            projects_path = os.path.join(herzog_path, "projects")
            if os.path.exists(projects_path):
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
                for user_dir in os.listdir(projects_path):
                    user_path = os.path.join(projects_path, user_dir)
                    if os.path.isdir(user_path):
                        for project_dir in os.listdir(user_path):
                            project_path = os.path.join(user_path, project_dir)
                            if os.path.isdir(project_path):
                                project_dirs.append((project_path, os.path.getmtime(project_path)))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        if project_dirs:
            project_dirs.sort(key=lambda x: x[1], reverse=True)
            return project_dirs[0][0]
        
        return None
    
    def _create_simple_text_pdf(self, truth_data: Dict, output_file: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å weasyprint –¥–ª—è HTML->PDF
            try:
                import weasyprint
                return self._create_html_pdf(truth_data, output_file)
            except ImportError:
                pass
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ PDF
            text_file = output_file.replace('.pdf', '.txt')
            
            with open(text_file, 'w', encoding='utf-8') as f:
                f.write("–ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ì–†–ê–§–ò–ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ê –†–ê–ë–û–¢\n")
                f.write("="*50 + "\n\n")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                project_name = truth_data.get('project_inputs', {}).get('project_name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')
                f.write(f"–ü—Ä–æ–µ–∫—Ç: {project_name}\n")
                f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n")
                
                # –ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç
                work_packages = truth_data.get('results', {}).get('work_packages', [])
                f.write(f"–ü–ê–ö–ï–¢–´ –†–ê–ë–û–¢ ({len(work_packages)} —à—Ç.):\n")
                f.write("-" * 30 + "\n")
                
                for i, package in enumerate(work_packages, 1):
                    name = package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')
                    volume_data = package.get('volume_data', {})
                    unit = volume_data.get('unit', '—à—Ç')
                    quantity = volume_data.get('quantity', 0)
                    
                    f.write(f"{i}. {name}\n")
                    f.write(f"   –û–±—ä–µ–º: {quantity} {unit}\n")
                    
                    # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω
                    schedule_blocks = package.get('schedule_blocks', [])
                    if schedule_blocks:
                        f.write(f"   –ù–µ–¥–µ–ª–∏: {', '.join(map(str, schedule_blocks))}\n")
                    
                    f.write("\n")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ .pdf –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if os.path.exists(text_file):
                os.rename(text_file, output_file)
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF (–∫–∞–∫ .txt)")
                return True
            
            return False
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ PDF: {e}")
            return False
    
    def _create_html_pdf(self, truth_data: Dict, output_file: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç PDF —á–µ—Ä–µ–∑ HTML+CSS"""
        try:
            import weasyprint
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
            html_content = self._generate_html_report(truth_data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
            weasyprint.HTML(string=html_content).write_pdf(output_file)
            logger.info("‚úÖ PDF —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ weasyprint")
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML PDF: {e}")
            return False
    
    def _generate_html_report(self, truth_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç"""
        project_name = truth_data.get('project_inputs', {}).get('project_name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')
        work_packages = truth_data.get('results', {}).get('work_packages', [])
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ - {project_name}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                h1 {{ color: #366092; text-align: center; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
                th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
                th {{ background-color: #366092; color: white; }}
                .center {{ text-align: center; }}
            </style>
        </head>
        <body>
            <h1>üìä –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ì–†–ê–§–ò–ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ê –†–ê–ë–û–¢</h1>
            <h2>{project_name}</h2>
            <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
            
            <h3>–ü–∞–∫–µ—Ç—ã —Ä–∞–±–æ—Ç</h3>
            <table>
                <tr>
                    <th>‚Ññ</th>
                    <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th>–ï–¥–∏–Ω–∏—Ü–∞</th>
                    <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    <th>–ù–µ–¥–µ–ª–∏</th>
                </tr>
        """
        
        for i, package in enumerate(work_packages, 1):
            name = package.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–∞–∫–µ—Ç')
            volume_data = package.get('volume_data', {})
            unit = volume_data.get('unit', '—à—Ç')
            quantity = volume_data.get('quantity', 0)
            schedule_blocks = package.get('schedule_blocks', [])
            weeks = ', '.join(map(str, schedule_blocks)) if schedule_blocks else '-'
            
            html += f"""
                <tr>
                    <td class="center">{i}</td>
                    <td>{name}</td>
                    <td class="center">{unit}</td>
                    <td class="center">{quantity}</td>
                    <td class="center">{weeks}</td>
                </tr>
            """
        
        html += """
            </table>
        </body>
        </html>
        """
        
        return html


def export_schedule_to_pdf(excel_file: str, output_path: str, format: str = 'pdf') -> str:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ PDF
    
    Args:
        excel_file: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        output_path: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        format: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ ('pdf', 'png', 'jpg')
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    exporter = PDFExporter()
    return exporter.export_excel_to_pdf(excel_file, output_path, format)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    test_excel = "/tmp/–û—Ç—á–µ—Ç_–ü—Ä–æ–µ–∫—Ç_20250910_141641.xlsx"
    test_output = "/tmp"
    
    if os.path.exists(test_excel):
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF...")
        try:
            pdf_file = export_schedule_to_pdf(test_excel, test_output)
            print(f"‚úÖ PDF —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {pdf_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_excel}")
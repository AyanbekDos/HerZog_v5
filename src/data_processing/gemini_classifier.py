"""
–ú–æ–¥—É–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–º–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Gemini 2.5 Pro
"""

import json
import logging
import os
import uuid
from typing import List, Dict, Optional
from dotenv import load_dotenv
from ..shared.gemini_client import gemini_client

load_dotenv()

def load_prompt_template() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        prompt_path = os.path.join(os.path.dirname(__file__), '../prompts/gemini_classification_prompt.txt')
        with open(prompt_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return ""

async def classify_with_gemini(items: List[Dict], project_dir: str = None) -> Dict[str, Dict]:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Gemini 2.5 Pro
    
    Args:
        items: –°–ø–∏—Å–æ–∫ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø–æ–ª—è–º–∏ code, name
        project_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è llm_input/response
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å {id: {"classification": str, "reasoning": str}}
    """
    if not items:
        return {}
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–æ—Ç–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    items_with_id = []
    id_mapping = {}
    
    for item in items:
        item_id = item.get('id', str(uuid.uuid4()))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π id –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
        id_mapping[item_id] = item
        
        items_with_id.append({
            "id": item_id,
            "full_name": f"{item.get('code', '')} {item.get('name', '')}"
        })
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
    prompt_template = load_prompt_template()
    if not prompt_template:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞")
        return {}
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    system_instruction = prompt_template.replace('{ITEMS_JSON}', "")  # –£–±–∏—Ä–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    system_instruction = system_instruction.replace("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:")
    user_prompt = json.dumps(items_with_id, ensure_ascii=False, indent=2)

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π gemini_client —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        logging.info("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ Gemini —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (classifier -> gemini-2.5-flash-lite)")
        gemini_response = await gemini_client.generate_response(
            prompt=user_prompt,
            agent_name="classifier",
            system_instruction=system_instruction
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º llm_input –∏ llm_response –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        if project_dir:
            classified_dir = os.path.join(project_dir, "2_classified")
            os.makedirs(classified_dir, exist_ok=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            llm_input_path = os.path.join(classified_dir, "llm_input.json")
            llm_input_data = {
                "system_instruction": system_instruction,
                "user_prompt": user_prompt,
                "items": []
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ ID –∫ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
            for item in items:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º item_id –Ω–∞–ø—Ä—è–º—É—é - –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ id_mapping
                item_id = item.get('id')
                if item_id and item_id in id_mapping:
                    llm_input_data["items"].append({
                        "id": item_id,
                        "code": item.get('code', ''),
                        "name": item.get('name', '')
                    })

            with open(llm_input_path, 'w', encoding='utf-8') as f:
                json.dump(llm_input_data, f, ensure_ascii=False, indent=2)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
            llm_response_path = os.path.join(classified_dir, "llm_response.json")
            with open(llm_response_path, 'w', encoding='utf-8') as f:
                json.dump(gemini_response, f, ensure_ascii=False, indent=2)

            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã llm_input.json –∏ llm_response.json –≤ {classified_dir}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if not gemini_response.get('success', False):
            logging.error(f"–û—à–∏–±–∫–∞ Gemini API: {gemini_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = gemini_response.get('raw_text', '')
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {response_text[:200]}...")

        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –∏–∑ gemini_response['response'] (—É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω)
        classifications = gemini_response.get('response', [])

        if isinstance(classifications, list):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ ID
            result = {}
            for classification in classifications:
                item_id = classification.get('id') or classification.get('uuid')  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if item_id in id_mapping:
                    result[item_id] = {
                        'classification': classification.get('classification', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ'),
                        'reasoning': classification.get('reasoning', ''),
                        'original_item': id_mapping[item_id]
                    }

            logging.info(f"Gemini —É—Å–ø–µ—à–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª {len(result)} –ø–æ–∑–∏—Ü–∏–π")
            return result
        else:
            logging.error("Gemini –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –Ω–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞")
            return {}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API: {str(e)}")
        return {}

def convert_gemini_result(gemini_result: Dict) -> Dict:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Gemini –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
    
    Args:
        gemini_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç classify_with_gemini
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ classification, reasoning
    """
    classification = gemini_result.get('classification', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ')
    
    return {
        'classification': classification,
        'gemini_confidence': 0.85,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        'gemini_reasoning': gemini_result.get('reasoning', '')
    }

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    logging.basicConfig(level=logging.INFO)
    
    test_items = [
        {
            'code': '47-1',
            'name': '–ü–æ–≥—Ä—É–∑–∫–∞ –≤ –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: –º—É—Å–æ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Å –ø–æ–≥—Ä—É–∑–∫–æ–π –≤—Ä—É—á–Ω—É—é'
        },
        {
            'code': '–ö–ü',
            'name': '–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–µ –¢–ë–û'
        }
    ]
    
    result = classify_with_gemini(test_items)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {result}")
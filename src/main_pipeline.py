"""
–ì–ª–∞–≤–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω HerZog v3.0 - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —á–µ—Ä–µ–∑ true.json
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã
"""

import os
import json
import logging
from typing import Dict, Optional
from datetime import datetime

from .shared.truth_initializer import create_true_json, get_current_agent, update_pipeline_status
from .ai_agents.agent_runner import run_agent
from .ai_agents.new_agent_runner import run_new_agent

logger = logging.getLogger(__name__)

class HerzogPipeline:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, project_path: str):
        self.project_path = project_path
        self.steps = {
            1: "extraction",
            2: "classification", 
            3: "preparation",
            4: "conceptualization",
            5: "scheduling",
            6: "accounting",
            7: "staffing",
            8: "reporting"
        }
        
    async def run_full_pipeline(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —á–µ—Ä–µ–∑ true.json –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {self.project_path}")
        
        results = {
            'project_path': self.project_path,
            'started_at': datetime.now().isoformat(),
            'success': False,
            'error': None,
            'agents_completed': []
        }
        
        try:
            # –®–∞–≥ 1-3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            await self._prepare_project_data()
            
            # –°–æ–∑–¥–∞–µ–º true.json –∏–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            truth_path = os.path.join(self.project_path, "true.json")
            
            if not os.path.exists(truth_path):
                logger.info("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ true.json...")
                success = create_true_json(self.project_path)
                if not success:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å true.json")
                logger.info("‚úÖ true.json —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            while True:
                current_agent = get_current_agent(truth_path)
                
                if current_agent is None:
                    logger.info("üéâ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
                    break
                
                logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞: {current_agent}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ in_progress
                update_pipeline_status(truth_path, current_agent, "in_progress")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                new_agents = ["work_packager", "works_to_packages", "counter", "scheduler_and_staffer"]
                
                if current_agent in new_agents:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    result = await run_new_agent(current_agent, self.project_path)
                    success = result.get('success', False)
                else:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                    success = run_agent(current_agent, self.project_path)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
                    update_pipeline_status(truth_path, current_agent, "completed")
                    results['agents_completed'].append(current_agent)
                    logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {current_agent} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    raise Exception(f"–ê–≥–µ–Ω—Ç {current_agent} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            
            # –®–∞–≥ 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            logger.info("–®–∞–≥ 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
            step8_result = await self.run_reporting()
            
            if not step8_result['success']:
                raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 8: {step8_result['error']}")
            
            results['success'] = True
            results['completed_at'] = datetime.now().isoformat()
            logger.info("üéØ –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
        except Exception as e:
            results['error'] = str(e)
            results['failed_at'] = datetime.now().isoformat()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        
        return results
    
    async def _prepare_project_data(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥–∏ 1-3: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è true.json"""
        
        # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
        logger.info("–®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        step1_result = await self.run_extraction()
        if not step1_result['success']:
            raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 1: {step1_result['error']}")
        
        # –®–∞–≥ 2: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç/–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        logger.info("–®–∞–≥ 2: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è...")
        step2_result = await self.run_classification()
        if not step2_result['success']:
            raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 2: {step2_result['error']}")
        
        # –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞
        logger.info("–®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
        step3_result = await self.run_preparation()
        if not step3_result['success']:
            raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 3: {step3_result['error']}")
    
    async def run_extraction(self) -> Dict:
        """–®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
        try:
            from .data_processing.extractor import extract_estimates
            
            input_path = f"{self.project_path}/0_input"
            output_path = f"{self.project_path}/1_extracted"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö Excel —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ input
            raw_data = extract_estimates(input_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(f"{output_path}/raw_estimates.json", 'w', encoding='utf-8') as f:
                json.dump(raw_data, f, ensure_ascii=False, indent=2)
            
            return {
                'success': True,
                'items_extracted': len(raw_data),
                'output_file': f"{output_path}/raw_estimates.json"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            return {'success': False, 'error': str(e)}
    
    async def run_classification(self) -> Dict:
        """–®–∞–≥ 2: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        try:
            from .data_processing.classifier import classify_estimates
            
            input_file = f"{self.project_path}/1_extracted/raw_estimates.json"
            output_path = f"{self.project_path}/2_classified"
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            classified_data = classify_estimates(input_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(f"{output_path}/classified_estimates.json", 'w', encoding='utf-8') as f:
                json.dump(classified_data, f, ensure_ascii=False, indent=2)
            
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            work_count = len([item for item in classified_data if item.get('classification') == '–†–∞–±–æ—Ç–∞'])
            material_count = len([item for item in classified_data if item.get('classification') == '–ú–∞—Ç–µ—Ä–∏–∞–ª'])
            
            return {
                'success': True,
                'total_items': len(classified_data),
                'work_items': work_count,
                'material_items': material_count,
                'output_file': f"{output_path}/classified_estimates.json"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    async def run_preparation(self) -> Dict:
        """–®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            from .data_processing.preparer import prepare_project_data
            
            raw_estimates_file = f"{self.project_path}/1_extracted/raw_estimates.json"
            directives_file = f"{self.project_path}/0_input/directives.json"
            output_path = f"{self.project_path}/3_prepared"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ (preparer —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç classifier)
            project_data = prepare_project_data(raw_estimates_file, directives_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(f"{output_path}/project_data.json", 'w', encoding='utf-8') as f:
                json.dump(project_data, f, ensure_ascii=False, indent=2)
            
            return {
                'success': True,
                'work_items': len(project_data.get('work_items', [])),
                'timeline_blocks': len(project_data.get('timeline_blocks', [])),
                'output_file': f"{output_path}/project_data.json"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    # –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è AI –∞–≥–µ–Ω—Ç–æ–≤ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
    # –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def run_ai_agent(self, step_num: int) -> Dict:
        """DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —á–µ—Ä–µ–∑ true.json"""
        logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è run_ai_agent –¥–ª—è —à–∞–≥–∞ {step_num}")
        return {'success': True, 'deprecated': True}
    
    async def run_reporting(self) -> Dict:
        """–®–∞–≥ 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ Excel + PDF + –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
        try:
            logger.info("üìä –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º reporter_v3 + PDF + Telegram")
            
            from .data_processing.reporter_v3 import generate_multipage_excel_report
            from .data_processing.pdf_exporter import export_schedule_to_pdf
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ true.json  
            input_file = f"{self.project_path}/true.json"
            output_path = f"{self.project_path}/8_output"
            
            results = {}
            
            # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π Excel –æ—Ç—á–µ—Ç
            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞...")
            excel_file = generate_multipage_excel_report(input_file, output_path)
            results['excel_file'] = excel_file
            logger.info(f"‚úÖ Excel —Å–æ–∑–¥–∞–Ω: {excel_file}")
            
            # 2. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
            logger.info("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF...")
            try:
                pdf_file = export_schedule_to_pdf(excel_file, output_path)
                results['pdf_file'] = pdf_file
                logger.info(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {pdf_file}")
            except Exception as pdf_error:
                logger.warning(f"‚ö†Ô∏è PDF –Ω–µ —Å–æ–∑–¥–∞–Ω: {pdf_error}")
                results['pdf_error'] = str(pdf_error)
            
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            logger.info("üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...")
            try:
                # –¢—É—Ç –Ω—É–∂–µ–Ω chat_id –∏ bot_token, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞
                results['telegram_ready'] = True
                logger.info("‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ (–Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ bot_token –∏ chat_id)")
            except Exception as tg_error:
                logger.warning(f"‚ö†Ô∏è Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {tg_error}")
                results['telegram_error'] = str(tg_error)
            
            return {
                'success': True,
                'results': results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            import traceback
            logger.error(f"üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return {'success': False, 'error': str(e)}

# –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
async def run_pipeline(project_path: str) -> Dict:
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    pipeline = HerzogPipeline(project_path)
    return await pipeline.run_full_pipeline()
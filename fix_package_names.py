#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–∞–∫–µ—Ç–æ–≤ –≤ true.json –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import json
import sys

def fix_package_names(project_path: str):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ true.json"""

    # –ß–∏—Ç–∞–µ–º –∏–º–µ–Ω–∞ –∏–∑ work_packager
    work_packager_response = os.path.join(project_path, "4_work_packager", "llm_response.json")
    if not os.path.exists(work_packager_response):
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω {work_packager_response}")
        return False

    with open(work_packager_response, 'r', encoding='utf-8') as f:
        packager_data = json.load(f)

    packages_with_names = packager_data.get('response', {}).get('work_packages', [])
    if not packages_with_names:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–∫–µ—Ç—ã —Å –∏–º–µ–Ω–∞–º–∏")
        return False

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–º–µ–Ω –ø–æ package_id
    names_dict = {}
    for pkg in packages_with_names:
        package_id = pkg.get('package_id')
        name = pkg.get('name')
        description = pkg.get('description')
        if package_id and name:
            names_dict[package_id] = {
                'name': name,
                'description': description
            }

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(names_dict)} –ø–∞–∫–µ—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏")

    # –ß–∏—Ç–∞–µ–º true.json
    truth_path = os.path.join(project_path, "true.json")
    if not os.path.exists(truth_path):
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω {truth_path}")
        return False

    with open(truth_path, 'r', encoding='utf-8') as f:
        truth_data = json.load(f)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –≤ work_packages
    work_packages = truth_data.get('results', {}).get('work_packages', [])
    if not work_packages:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã work_packages –≤ true.json")
        return False

    updated_count = 0
    for package in work_packages:
        package_id = package.get('package_id')
        if package_id in names_dict:
            package['name'] = names_dict[package_id]['name']
            package['description'] = names_dict[package_id]['description']
            updated_count += 1
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω {package_id}: {names_dict[package_id]['name']}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π true.json
    with open(truth_path, 'w', encoding='utf-8') as f:
        json.dump(truth_data, f, ensure_ascii=False, indent=2)

    print(f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–∞–∫–µ—Ç–æ–≤ –≤ {truth_path}")
    return True

if __name__ == "__main__":
    if len(sys.argv) > 1:
        project_path = sys.argv[1]
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç
        project_path = "/home/imort/Herzog_v3/projects/34975055/f77f33ea"

    if os.path.exists(project_path):
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –∏–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ {project_path}")
        success = fix_package_names(project_path)
        if success:
            print("‚úÖ –ò–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–æ–≤")
    else:
        print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")